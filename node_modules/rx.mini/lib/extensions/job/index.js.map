{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/extensions/job/index.ts"],"names":[],"mappings":";;;;;AAAA,+CAA2B;AAS3B,MAAM,MAAM;IAGV,YAAoB,IAAW;;;;;mBAAX;;QAFpB;;;;mBAAU,KAAK;WAAC;IAEkB,CAAC;IAE3B,KAAK,CAAC,OAAO;QACnB,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAC9B,IAAI,GAAG,EAAE;YACP,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YAEpB,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC;YAElC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;YAChC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAEnB,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;IACH,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;IACH,CAAC;CACF;AAED,MAAqB,SAAS;IAI5B,YAAoB,MAAc,EAAE,CAAC,EAAE,CAAC,EAAE;;;;;mBAAtB;;QAHpB;;;;mBAAc,EAAE;WAAC;QACjB;;;;mBAAoB,EAAE;WAAC;QAGrB,MAAM,EAAE,CAAC,EAAE,GAAG,GAAG,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,GAAG,CACP,IAAO,EACP,IAAqB;QAErB,MAAM,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;QAEvB,MAAM,KAAK,GAAG,IAAI,WAAK,EAA0B,CAAC;QAElD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;QAEtC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;SACjD;QAED,OAAO,KAAK,CAAC,SAAS,EAAE,CAAC;IAC3B,CAAC;CACF;AAzBD,4BAyBC","sourcesContent":["import Event from \"../../\";\n\ntype Option = { a: number };\n\ntype AA<T> = T extends (...arg: infer I) => any ? I : never;\ntype ThenArg<T> = T extends Promise<infer U> ? U : T;\n\ntype Job = { func: any; args: any[]; event: Event<any> };\n\nclass Worker {\n  running = false;\n\n  constructor(private jobs: Job[]) {}\n\n  private async execute() {\n    const job = this.jobs.shift();\n    if (job) {\n      this.running = true;\n\n      const { func, args, event } = job;\n\n      const res = await func(...args);\n      event.execute(res);\n\n      this.execute();\n    } else {\n      this.running = false;\n    }\n  }\n\n  wakeup() {\n    if (!this.running) {\n      this.execute();\n    }\n  }\n}\n\nexport default class JobSystem {\n  jobs: Job[] = [];\n  workers: Worker[] = [];\n\n  constructor(private opt: Option = { a: 5 }) {\n    const { a } = opt;\n    this.workers = [...Array(a)].map(() => new Worker(this.jobs));\n  }\n\n  async add<T extends (...args: any[]) => Promise<any>>(\n    func: T,\n    args: AA<typeof func>\n  ) {\n    const { a } = this.opt;\n\n    const event = new Event<ThenArg<ReturnType<T>>>();\n\n    this.jobs.push({ func, args, event });\n\n    if (this.jobs.length < a) {\n      this.workers.forEach(worker => worker.wakeup());\n    }\n\n    return event.asPromise();\n  }\n}\n"]}