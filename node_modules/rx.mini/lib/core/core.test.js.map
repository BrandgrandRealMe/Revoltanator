{"version":3,"file":"core.test.js","sourceRoot":"","sources":["../../src/core/core.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event } from \".\";\n\ndescribe(\"event\", () => {\n  test(\"subscribe\", () => {\n    const testEvent = new Event<[string]>();\n    const { unSubscribe } = testEvent.subscribe((data) => {\n      expect(data).toBe(\"1\");\n    });\n\n    testEvent.subscribe((data) => {\n      expect(data).toBe(\"1\");\n    });\n\n    testEvent.execute(\"1\");\n\n    expect((testEvent as any).event.stack.length).toBe(2);\n    unSubscribe();\n    expect((testEvent as any).event.stack.length).toBe(1);\n\n    testEvent.once(() => {\n      expect((testEvent as any).event.stack.length).toBe(1);\n    });\n    expect((testEvent as any).event.stack.length).toBe(2);\n    testEvent.execute(\"1\");\n  });\n\n  test(\"aspromise\", async () => {\n    const testEvent = new Event<[number]>();\n    setTimeout(() => {\n      testEvent.execute(1);\n    }, 0);\n    const [res] = await testEvent.asPromise();\n    expect(res).toBe(1);\n  });\n\n  test(\"complete\", async () => {\n    const event = new Event<[number]>();\n    const trigger = event.returnTrigger;\n    const listener = event.returnListener;\n    setTimeout(() => trigger.execute(0), 0);\n    {\n      const [res] = await listener.asPromise();\n      expect(typeof res).toBe(\"number\");\n    }\n    setTimeout(() => trigger.complete(), 0);\n    {\n      const [res] = await listener.asPromise();\n      expect(typeof res).toBe(\"undefined\");\n    }\n\n    expect(() => event.subscribe(() => {})).toThrowError(\"event completed\");\n    expect(() => event.execute(0)).toThrowError(\"event completed\");\n  });\n\n  test(\"test-error\", async () => {\n    const event = new Event<[number]>();\n    setTimeout(() => event.execute(1), 0);\n    {\n      const [res] = await event.asPromise();\n      expect(typeof res).toBe(\"number\");\n    }\n    setTimeout(() => event.error(\"error\"), 0);\n    {\n      const [res] = await event.asPromise().catch((e) => [e]);\n      expect(res).toBe(\"error\");\n    }\n  });\n});\n"]}