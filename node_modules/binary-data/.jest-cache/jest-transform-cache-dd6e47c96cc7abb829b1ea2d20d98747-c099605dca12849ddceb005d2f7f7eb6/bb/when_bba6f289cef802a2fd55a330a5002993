7bcf36b8a7eb56f2c6b64248c2c13e64
'use strict';

/* istanbul ignore next */var cov_1ozueoeuzm = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/when.js',
      hash = '5f62adeabe7dd96cd8cb69680b899fc917dc61d4',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/when.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 43
        },
        end: {
          line: 3,
          column: 62
        }
      },
      '1': {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 43
        }
      },
      '2': {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 46
        }
      },
      '3': {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 46
        }
      },
      '4': {
        start: {
          line: 7,
          column: 33
        },
        end: {
          line: 7,
          column: 63
        }
      },
      '5': {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 41
        }
      },
      '6': {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 22
        }
      },
      '7': {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 21,
          column: 3
        }
      },
      '8': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 63
        }
      },
      '9': {
        start: {
          line: 23,
          column: 17
        },
        end: {
          line: 28,
          column: 3
        }
      },
      '10': {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 30,
          column: 16
        }
      },
      '11': {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 40
        }
      },
      '12': {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 21
        }
      },
      '13': {
        start: {
          line: 41,
          column: 19
        },
        end: {
          line: 43,
          column: 26
        }
      },
      '14': {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 35
        }
      },
      '15': {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      '16': {
        start: {
          line: 48,
          column: 6
        },
        end: {
          line: 48,
          column: 30
        }
      },
      '17': {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 49,
          column: 13
        }
      },
      '18': {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 48
        }
      },
      '19': {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 33
        }
      },
      '20': {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 28
        }
      },
      '21': {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 64,
          column: 40
        }
      },
      '22': {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 21
        }
      },
      '23': {
        start: {
          line: 67,
          column: 19
        },
        end: {
          line: 69,
          column: 26
        }
      },
      '24': {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 35
        }
      },
      '25': {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 76,
          column: 5
        }
      },
      '26': {
        start: {
          line: 74,
          column: 6
        },
        end: {
          line: 74,
          column: 30
        }
      },
      '27': {
        start: {
          line: 75,
          column: 6
        },
        end: {
          line: 75,
          column: 13
        }
      },
      '28': {
        start: {
          line: 78,
          column: 18
        },
        end: {
          line: 78,
          column: 54
        }
      },
      '29': {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 33
        }
      },
      '30': {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 28
        }
      },
      '31': {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 17
        }
      },
      '32': {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 93,
          column: 40
        }
      },
      '33': {
        start: {
          line: 95,
          column: 19
        },
        end: {
          line: 97,
          column: 26
        }
      },
      '34': {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      '35': {
        start: {
          line: 100,
          column: 6
        },
        end: {
          line: 100,
          column: 49
        }
      },
      '36': {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 28
        }
      },
      '37': {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 25
        }
      }
    },
    fnMap: {
      '0': {
        name: 'when',
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 13
          }
        },
        loc: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 18
      },
      '1': {
        name: 'encode',
        decl: {
          start: {
            line: 37,
            column: 11
          },
          end: {
            line: 37,
            column: 17
          }
        },
        loc: {
          start: {
            line: 37,
            column: 34
          },
          end: {
            line: 56,
            column: 3
          }
        },
        line: 37
      },
      '2': {
        name: 'decode',
        decl: {
          start: {
            line: 63,
            column: 11
          },
          end: {
            line: 63,
            column: 17
          }
        },
        loc: {
          start: {
            line: 63,
            column: 27
          },
          end: {
            line: 84,
            column: 3
          }
        },
        line: 63
      },
      '3': {
        name: 'encodingLength',
        decl: {
          start: {
            line: 92,
            column: 11
          },
          end: {
            line: 92,
            column: 25
          }
        },
        loc: {
          start: {
            line: 92,
            column: 33
          },
          end: {
            line: 105,
            column: 3
          }
        },
        line: 92
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        }, {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        }],
        line: 19
      },
      '1': {
        loc: {
          start: {
            line: 19,
            column: 6
          },
          end: {
            line: 19,
            column: 40
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 19,
            column: 6
          },
          end: {
            line: 19,
            column: 19
          }
        }, {
          start: {
            line: 19,
            column: 23
          },
          end: {
            line: 19,
            column: 40
          }
        }],
        line: 19
      },
      '2': {
        loc: {
          start: {
            line: 41,
            column: 19
          },
          end: {
            line: 43,
            column: 26
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 35
          }
        }, {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 43,
            column: 26
          }
        }],
        line: 41
      },
      '3': {
        loc: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }, {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }],
        line: 47
      },
      '4': {
        loc: {
          start: {
            line: 67,
            column: 19
          },
          end: {
            line: 69,
            column: 26
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 68,
            column: 35
          }
        }, {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 69,
            column: 26
          }
        }],
        line: 67
      },
      '5': {
        loc: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        }, {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        }],
        line: 73
      },
      '6': {
        loc: {
          start: {
            line: 95,
            column: 19
          },
          end: {
            line: 97,
            column: 26
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 96,
            column: 35
          }
        }, {
          start: {
            line: 97,
            column: 8
          },
          end: {
            line: 97,
            column: 26
          }
        }],
        line: 95
      },
      '7': {
        loc: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }],
        line: 99
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const { isType, isFunction, isUserType } = /* istanbul ignore next */(cov_1ozueoeuzm.s[0]++, require('lib/util'));
const symbols = /* istanbul ignore next */(cov_1ozueoeuzm.s[1]++, require('internal/symbols'));
const { decodeCommon } = /* istanbul ignore next */(cov_1ozueoeuzm.s[2]++, require('lib/decode'));
const { encodeCommon } = /* istanbul ignore next */(cov_1ozueoeuzm.s[3]++, require('lib/encode'));
const { encodingLengthCommon } = /* istanbul ignore next */(cov_1ozueoeuzm.s[4]++, require('lib/encoding-length'));
const Metadata = /* istanbul ignore next */(cov_1ozueoeuzm.s[5]++, require('internal/meta'));

/* istanbul ignore next */cov_1ozueoeuzm.s[6]++;
module.exports = when;

/**
 * Type for conditions.
 * @param {Function|bool} condition
 * @param {Object} type Any builtin type or schema.
 * @returns {Object}
 */
function when(condition, type) {
  /* istanbul ignore next */cov_1ozueoeuzm.f[0]++;
  cov_1ozueoeuzm.s[7]++;

  if ( /* istanbul ignore next */(cov_1ozueoeuzm.b[1][0]++, !isType(type)) && /* istanbul ignore next */(cov_1ozueoeuzm.b[1][1]++, !isUserType(type))) {
    /* istanbul ignore next */cov_1ozueoeuzm.b[0][0]++;
    cov_1ozueoeuzm.s[8]++;

    throw new TypeError('Argument #2 should be a valid type.');
  } else /* istanbul ignore next */{
    cov_1ozueoeuzm.b[0][1]++;
  }

  const result = /* istanbul ignore next */(cov_1ozueoeuzm.s[9]++, {
    encode,
    decode,
    encodingLength,
    [symbols.skip]: false
  });

  /* istanbul ignore next */cov_1ozueoeuzm.s[10]++;
  return result;

  /**
   * Encode value if condition is truthy.
   * @param {any} value
   * @param {EncodeStream} wstream
   */
  function encode(value, wstream) {
    /* istanbul ignore next */cov_1ozueoeuzm.f[1]++;

    const context = /* istanbul ignore next */(cov_1ozueoeuzm.s[11]++, Metadata.clone(this));
    /* istanbul ignore next */cov_1ozueoeuzm.s[12]++;
    encode.bytes = 0;

    const status = /* istanbul ignore next */(cov_1ozueoeuzm.s[13]++, isFunction(condition) ? /* istanbul ignore next */(cov_1ozueoeuzm.b[2][0]++, Boolean(condition(context))) : /* istanbul ignore next */(cov_1ozueoeuzm.b[2][1]++, Boolean(condition)));

    /* istanbul ignore next */cov_1ozueoeuzm.s[14]++;
    result[symbols.skip] = !status;

    /* istanbul ignore next */cov_1ozueoeuzm.s[15]++;
    if (!status) {
      /* istanbul ignore next */cov_1ozueoeuzm.b[3][0]++;
      cov_1ozueoeuzm.s[16]++;

      Metadata.clean(context);
      /* istanbul ignore next */cov_1ozueoeuzm.s[17]++;
      return;
    } else /* istanbul ignore next */{
      cov_1ozueoeuzm.b[3][1]++;
    }

    cov_1ozueoeuzm.s[18]++;
    encodeCommon(value, wstream, type, context);
    /* istanbul ignore next */cov_1ozueoeuzm.s[19]++;
    encode.bytes = context.bytes;

    /* istanbul ignore next */cov_1ozueoeuzm.s[20]++;
    Metadata.clean(context);
  }

  /**
   * Decode value if condition is truthy.
   * @param {DecodeStream} rstream
   * @returns {any}
   */
  function decode(rstream) {
    /* istanbul ignore next */cov_1ozueoeuzm.f[2]++;

    const context = /* istanbul ignore next */(cov_1ozueoeuzm.s[21]++, Metadata.clone(this));
    /* istanbul ignore next */cov_1ozueoeuzm.s[22]++;
    decode.bytes = 0;

    const status = /* istanbul ignore next */(cov_1ozueoeuzm.s[23]++, isFunction(condition) ? /* istanbul ignore next */(cov_1ozueoeuzm.b[4][0]++, Boolean(condition(context))) : /* istanbul ignore next */(cov_1ozueoeuzm.b[4][1]++, Boolean(condition)));

    /* istanbul ignore next */cov_1ozueoeuzm.s[24]++;
    result[symbols.skip] = !status;

    /* istanbul ignore next */cov_1ozueoeuzm.s[25]++;
    if (!status) {
      /* istanbul ignore next */cov_1ozueoeuzm.b[5][0]++;
      cov_1ozueoeuzm.s[26]++;

      Metadata.clean(context);
      /* istanbul ignore next */cov_1ozueoeuzm.s[27]++;
      return;
    } else /* istanbul ignore next */{
      cov_1ozueoeuzm.b[5][1]++;
    }

    const value = /* istanbul ignore next */(cov_1ozueoeuzm.s[28]++, decodeCommon(rstream, type, context));

    /* istanbul ignore next */cov_1ozueoeuzm.s[29]++;
    decode.bytes = context.bytes;
    /* istanbul ignore next */cov_1ozueoeuzm.s[30]++;
    Metadata.clean(context);

    /* istanbul ignore next */cov_1ozueoeuzm.s[31]++;
    return value; // eslint-disable-line consistent-return
  }

  /**
   * Get the number bytes of an encoded value
   * when condition is truthy or 0.
   * @param {any} value
   * @returns {number}
   */
  function encodingLength(value) {
    /* istanbul ignore next */cov_1ozueoeuzm.f[3]++;

    const context = /* istanbul ignore next */(cov_1ozueoeuzm.s[32]++, Metadata.clone(this));

    const status = /* istanbul ignore next */(cov_1ozueoeuzm.s[33]++, isFunction(condition) ? /* istanbul ignore next */(cov_1ozueoeuzm.b[6][0]++, Boolean(condition(context))) : /* istanbul ignore next */(cov_1ozueoeuzm.b[6][1]++, Boolean(condition)));

    /* istanbul ignore next */cov_1ozueoeuzm.s[34]++;
    if (status) {
      /* istanbul ignore next */cov_1ozueoeuzm.b[7][0]++;
      cov_1ozueoeuzm.s[35]++;

      encodingLengthCommon(value, type, context);
    } else /* istanbul ignore next */{
      cov_1ozueoeuzm.b[7][1]++;
    }

    cov_1ozueoeuzm.s[36]++;
    Metadata.clean(context);
    /* istanbul ignore next */cov_1ozueoeuzm.s[37]++;
    return context.bytes;
  }
}