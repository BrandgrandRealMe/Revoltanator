225682ac4e203fd1c25bc97006651f1e
'use strict';

const BinaryStream = require('lib/binary-stream');
const NotEnoughDataError = require('lib/not-enough-data-error');

describe('decode', () => {
  test('readBuffer', () => {
    const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6]);
    const stream = new BinaryStream();
    stream.append(buf);
    expect(stream.length).toBe(buf.length);

    const wantRead = 2;

    const result = stream.readBuffer(wantRead);
    expect(stream.length).toBe(buf.length - wantRead);
    expect(result).toEqual(Buffer.from([0x1, 0x2]));
  });

  test('readBuffer # out of bounds', () => {
    const buf = Buffer.from([0x1, 0x2]);
    const stream = new BinaryStream();
    stream.append(buf);
    const requestedBytes = buf.length + 1;

    expect(() => stream.readBuffer(requestedBytes)).toThrow(NotEnoughDataError);
  });

  test('default numbers', () => {
    const suites = [
    /* Type, size, test value */
    ['DoubleBE', 8, Number.MAX_SAFE_INTEGER / 2], ['DoubleLE', 8, Number.MAX_SAFE_INTEGER / 2], ['FloatBE', 4, 0.5], ['FloatLE', 4, 0.5], ['Int8', 1, 127], ['UInt8', 1, 255], ['Int16BE', 2, 0x7fff - 1], ['Int16LE', 2, 0x7fff - 1], ['UInt16BE', 2, 0xffff - 1], ['UInt16LE', 2, 0xffff - 1], ['Int32BE', 4, 0x7fffffff - 1], ['Int32LE', 4, 0x7fffffff - 1], ['UInt32BE', 4, 0xffffffff - 1], ['UInt32LE', 4, 0xffffffff - 1]];

    const buf = Buffer.allocUnsafe(10);

    for (const suite of suites) {
      const read = `read${suite[0]}`;
      const write = `write${suite[0]}`;

      buf.fill(0);
      buf[write](suite[2], 0);
      const stream = new BinaryStream();
      stream.append(buf);

      expect(stream[read]()).toBe(suite[2]);
      expect(stream.length).toBe(buf.length - suite[1]);
    }
  });

  describe('custom numbers', () => {
    const suites = [
    /* Type, size, test value */
    ['IntBE', 3, 0x7fffff - 1], ['UIntBE', 3, 0xffffff - 1], ['IntLE', 3, 0x7fffff - 1], ['UIntLE', 3, 0xffffff - 1]];

    const buf = Buffer.allocUnsafe(5);

    for (const suite of suites) {
      const read = `read${suite[0]}`;
      const write = `write${suite[0]}`;

      test(read, () => {
        buf.fill(0);
        buf[write](suite[2], 0, suite[1]);
        const stream = new BinaryStream();
        stream.append(buf);

        expect(stream[read](suite[1])).toBe(suite[2]);
        expect(stream.length).toBe(buf.length - suite[1]);
      });
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlY29kZS5qcyJdLCJuYW1lcyI6WyJCaW5hcnlTdHJlYW0iLCJyZXF1aXJlIiwiTm90RW5vdWdoRGF0YUVycm9yIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiYnVmIiwiQnVmZmVyIiwiZnJvbSIsInN0cmVhbSIsImFwcGVuZCIsImV4cGVjdCIsImxlbmd0aCIsInRvQmUiLCJ3YW50UmVhZCIsInJlc3VsdCIsInJlYWRCdWZmZXIiLCJ0b0VxdWFsIiwicmVxdWVzdGVkQnl0ZXMiLCJ0b1Rocm93Iiwic3VpdGVzIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsImFsbG9jVW5zYWZlIiwic3VpdGUiLCJyZWFkIiwid3JpdGUiLCJmaWxsIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxlQUFlQyxRQUFRLG1CQUFSLENBQXJCO0FBQ0EsTUFBTUMscUJBQXFCRCxRQUFRLDJCQUFSLENBQTNCOztBQUVBRSxTQUFTLFFBQVQsRUFBbUIsTUFBTTtBQUN2QkMsT0FBSyxZQUFMLEVBQW1CLE1BQU07QUFDdkIsVUFBTUMsTUFBTUMsT0FBT0MsSUFBUCxDQUFZLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQXFCLEdBQXJCLEVBQTBCLEdBQTFCLENBQVosQ0FBWjtBQUNBLFVBQU1DLFNBQVMsSUFBSVIsWUFBSixFQUFmO0FBQ0FRLFdBQU9DLE1BQVAsQ0FBY0osR0FBZDtBQUNBSyxXQUFPRixPQUFPRyxNQUFkLEVBQXNCQyxJQUF0QixDQUEyQlAsSUFBSU0sTUFBL0I7O0FBRUEsVUFBTUUsV0FBVyxDQUFqQjs7QUFFQSxVQUFNQyxTQUFTTixPQUFPTyxVQUFQLENBQWtCRixRQUFsQixDQUFmO0FBQ0FILFdBQU9GLE9BQU9HLE1BQWQsRUFBc0JDLElBQXRCLENBQTJCUCxJQUFJTSxNQUFKLEdBQWFFLFFBQXhDO0FBQ0FILFdBQU9JLE1BQVAsRUFBZUUsT0FBZixDQUF1QlYsT0FBT0MsSUFBUCxDQUFZLENBQUMsR0FBRCxFQUFNLEdB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QUFNQyxLQUFYLElBQW9CSixNQUFwQixFQUE0QjtBQUMxQixZQUFNSyxPQUFRLE9BQU1ELE1BQU0sQ0FBTixDQUFTLEVBQTdCO0FBQ0EsWUFBTUUsUUFBUyxRQUFPRixNQUFNLENBQU4sQ0FBUyxFQUEvQjs7QUFFQW5CLFdBQUtvQixJQUFMLEVBQVcsTUFBTTtBQUNmbkIsWUFBSXFCLElBQUosQ0FBUyxDQUFUO0FBQ0FyQixZQUFJb0IsS0FBSixFQUFXRixNQUFNLENBQU4sQ0FBWCxFQUFxQixDQUFyQixFQUF3QkEsTUFBTSxDQUFOLENBQXhCO0FBQ0EsY0FBTWYsU0FBUyxJQUFJUixZQUFKLEVBQWY7QUFDQVEsZUFBT0MsTUFBUCxDQUFjSixHQUFkOztBQUVBSyxlQUFPRixPQUFPZ0IsSUFBUCxFQUFhRCxNQUFNLENBQU4sQ0FBYixDQUFQLEVBQStCWCxJQUEvQixDQUFvQ1csTUFBTSxDQUFOLENBQXBDO0FBQ0FiLGVBQU9GLE9BQU9HLE1BQWQsRUFBc0JDLElBQXRCLENBQTJCUCxJQUFJTSxNQUFKLEdBQWFZLE1BQU0sQ0FBTixDQUF4QztBQUNELE9BUkQ7QUFTRDtBQUNGLEdBMUJEO0FBMkJELENBM0ZEIiwiZmlsZSI6ImRlY29kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQmluYXJ5U3RyZWFtID0gcmVxdWlyZSgnbGliL2JpbmFyeS1zdHJlYW0nKTtcbmNvbnN0IE5vdEVub3VnaERhdGFFcnJvciA9IHJlcXVpcmUoJ2xpYi9ub3QtZW5vdWdoLWRhdGEtZXJyb3InKTtcblxuZGVzY3JpYmUoJ2RlY29kZScsICgpID0+IHtcbiAgdGVzdCgncmVhZEJ1ZmZlcicsICgpID0+IHtcbiAgICBjb25zdCBidWYgPSBCdWZmZXIuZnJvbShbMHgxLCAweDIsIDB4MywgMHg0LCAweDUsIDB4Nl0pO1xuICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBCaW5hcnlTdHJlYW0oKTtcbiAgICBzdHJlYW0uYXBwZW5kKGJ1Zik7XG4gICAgZXhwZWN0KHN0cmVhbS5sZW5ndGgpLnRvQmUoYnVmLmxlbmd0aCk7XG5cbiAgICBjb25zdCB3YW50UmVhZCA9IDI7XG5cbiAgICBjb25zdCByZXN1bHQgPSBzdHJlYW0ucmVhZEJ1ZmZlcih3YW50UmVhZCk7XG4gICAgZXhwZWN0KHN0cmVhbS5sZW5ndGgpLnRvQmUoYnVmLmxlbmd0aCAtIHdhbnRSZWFkKTtcbiAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKEJ1ZmZlci5mcm9tKFsweDEsIDB4Ml0pKTtcbiAgfSk7XG5cbiAgdGVzdCgncmVhZEJ1ZmZlciAjIG91dCBvZiBib3VuZHMnLCAoKSA9PiB7XG4gICAgY29uc3QgYnVmID0gQnVmZmVyLmZyb20oWzB4MSwgMHgyXSk7XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IEJpbmFyeVN0cmVhbSgpO1xuICAgIHN0cmVhbS5hcHBlbmQoYnVmKTtcbiAgICBjb25zdCByZXF1ZXN0ZWRCeXRlcyA9IGJ1Zi5sZW5ndGggKyAxO1xuXG4gICAgZXhwZWN0KCgpID0+IHN0cmVhbS5yZWFkQnVmZmVyKHJlcXVlc3RlZEJ5dGVzKSkudG9UaHJvdyhOb3RFbm91Z2hEYXRhRXJyb3IpO1xuICB9KTtcblxuICB0ZXN0KCdkZWZhdWx0IG51bWJlcnMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3VpdGVzID0gW1xuICAgICAgLyogVHlwZSwgc2l6ZSwgdGVzdCB2YWx1ZSAqL1xuICAgICAgWydEb3VibGVCRScsIDgsIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIC8gMl0sXG4gICAgICBbJ0RvdWJsZUxFJywgOCwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgLyAyXSxcblxuICAgICAgWydGbG9hdEJFJywgNCwgMC41XSxcbiAgICAgIFsnRmxvYXRMRScsIDQsIDAuNV0sXG5cbiAgICAgIFsnSW50OCcsIDEsIDEyN10sXG4gICAgICBbJ1VJbnQ4JywgMSwgMjU1XSxcblxuICAgICAgWydJbnQxNkJFJywgMiwgMHg3ZmZmIC0gMV0sXG4gICAgICBbJ0ludDE2TEUnLCAyLCAweDdmZmYgLSAxXSxcblxuICAgICAgWydVSW50MTZCRScsIDIsIDB4ZmZmZiAtIDFdLFxuICAgICAgWydVSW50MTZMRScsIDIsIDB4ZmZmZiAtIDFdLFxuXG4gICAgICBbJ0ludDMyQkUnLCA0LCAweDdmZmZmZmZmIC0gMV0sXG4gICAgICBbJ0ludDMyTEUnLCA0LCAweDdmZmZmZmZmIC0gMV0sXG5cbiAgICAgIFsnVUludDMyQkUnLCA0LCAweGZmZmZmZmZmIC0gMV0sXG4gICAgICBbJ1VJbnQzMkxFJywgNCwgMHhmZmZmZmZmZiAtIDFdLFxuICAgIF07XG5cbiAgICBjb25zdCBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTApO1xuXG4gICAgZm9yIChjb25zdCBzdWl0ZSBvZiBzdWl0ZXMpIHtcbiAgICAgIGNvbnN0IHJlYWQgPSBgcmVhZCR7c3VpdGVbMF19YDtcbiAgICAgIGNvbnN0IHdyaXRlID0gYHdyaXRlJHtzdWl0ZVswXX1gO1xuXG4gICAgICBidWYuZmlsbCgwKTtcbiAgICAgIGJ1Zlt3cml0ZV0oc3VpdGVbMl0sIDApO1xuICAgICAgY29uc3Qgc3RyZWFtID0gbmV3IEJpbmFyeVN0cmVhbSgpO1xuICAgICAgc3RyZWFtLmFwcGVuZChidWYpO1xuXG4gICAgICBleHBlY3Qoc3RyZWFtW3JlYWRdKCkpLnRvQmUoc3VpdGVbMl0pO1xuICAgICAgZXhwZWN0KHN0cmVhbS5sZW5ndGgpLnRvQmUoYnVmLmxlbmd0aCAtIHN1aXRlWzFdKTtcbiAgICB9XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjdXN0b20gbnVtYmVycycsICgpID0+IHtcbiAgICBjb25zdCBzdWl0ZXMgPSBbXG4gICAgICAvKiBUeXBlLCBzaXplLCB0ZXN0IHZhbHVlICovXG4gICAgICBbJ0ludEJFJywgMywgMHg3ZmZmZmYgLSAxXSxcbiAgICAgIFsnVUludEJFJywgMywgMHhmZmZmZmYgLSAxXSxcblxuICAgICAgWydJbnRMRScsIDMsIDB4N2ZmZmZmIC0gMV0sXG4gICAgICBbJ1VJbnRMRScsIDMsIDB4ZmZmZmZmIC0gMV0sXG4gICAgXTtcblxuICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg1KTtcblxuICAgIGZvciAoY29uc3Qgc3VpdGUgb2Ygc3VpdGVzKSB7XG4gICAgICBjb25zdCByZWFkID0gYHJlYWQke3N1aXRlWzBdfWA7XG4gICAgICBjb25zdCB3cml0ZSA9IGB3cml0ZSR7c3VpdGVbMF19YDtcblxuICAgICAgdGVzdChyZWFkLCAoKSA9PiB7XG4gICAgICAgIGJ1Zi5maWxsKDApO1xuICAgICAgICBidWZbd3JpdGVdKHN1aXRlWzJdLCAwLCBzdWl0ZVsxXSk7XG4gICAgICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBCaW5hcnlTdHJlYW0oKTtcbiAgICAgICAgc3RyZWFtLmFwcGVuZChidWYpO1xuXG4gICAgICAgIGV4cGVjdChzdHJlYW1bcmVhZF0oc3VpdGVbMV0pKS50b0JlKHN1aXRlWzJdKTtcbiAgICAgICAgZXhwZWN0KHN0cmVhbS5sZW5ndGgpLnRvQmUoYnVmLmxlbmd0aCAtIHN1aXRlWzFdKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59KTtcbiJdfQ==