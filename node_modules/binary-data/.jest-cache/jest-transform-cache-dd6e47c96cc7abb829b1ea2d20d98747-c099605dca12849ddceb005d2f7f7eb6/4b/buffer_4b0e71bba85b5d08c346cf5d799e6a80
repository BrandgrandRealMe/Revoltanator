cbb3538004d325ac376e4583d0a86d87
'use strict';

/* istanbul ignore next */var cov_29sk20cu9j = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/buffer.js',
      hash = 'e0ced1c0815330280a9b4eebdda83257367f0891',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/buffer.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 31
        },
        end: {
          line: 3,
          column: 50
        }
      },
      '1': {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 4,
          column: 63
        }
      },
      '2': {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 24
        }
      },
      '3': {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 42
        }
      },
      '4': {
        start: {
          line: 15,
          column: 17
        },
        end: {
          line: 15,
          column: 31
        }
      },
      '5': {
        start: {
          line: 16,
          column: 17
        },
        end: {
          line: 16,
          column: 35
        }
      },
      '6': {
        start: {
          line: 17,
          column: 17
        },
        end: {
          line: 17,
          column: 32
        }
      },
      '7': {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 21,
          column: 3
        }
      },
      '8': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 56
        }
      },
      '9': {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 27,
          column: 4
        }
      },
      '10': {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 21
        }
      },
      '11': {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 21
        }
      },
      '12': {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 24
        }
      },
      '13': {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      '14': {
        start: {
          line: 42,
          column: 6
        },
        end: {
          line: 42,
          column: 38
        }
      },
      '15': {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      '16': {
        start: {
          line: 46,
          column: 6
        },
        end: {
          line: 46,
          column: 55
        }
      },
      '17': {
        start: {
          line: 47,
          column: 6
        },
        end: {
          line: 47,
          column: 42
        }
      },
      '18': {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      '19': {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 44
        }
      },
      '20': {
        start: {
          line: 53,
          column: 6
        },
        end: {
          line: 53,
          column: 38
        }
      },
      '21': {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 54,
          column: 46
        }
      },
      '22': {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 29
        }
      },
      '23': {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 31
        }
      },
      '24': {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      '25': {
        start: {
          line: 61,
          column: 6
        },
        end: {
          line: 61,
          column: 28
        }
      },
      '26': {
        start: {
          line: 62,
          column: 6
        },
        end: {
          line: 62,
          column: 24
        }
      },
      '27': {
        start: {
          line: 72,
          column: 15
        },
        end: {
          line: 72,
          column: 16
        }
      },
      '28': {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 73,
          column: 21
        }
      },
      '29': {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 24
        }
      },
      '30': {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 94,
          column: 5
        }
      },
      '31': {
        start: {
          line: 79,
          column: 6
        },
        end: {
          line: 79,
          column: 20
        }
      },
      '32': {
        start: {
          line: 80,
          column: 11
        },
        end: {
          line: 94,
          column: 5
        }
      },
      '33': {
        start: {
          line: 81,
          column: 6
        },
        end: {
          line: 81,
          column: 50
        }
      },
      '34': {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 82,
          column: 42
        }
      },
      '35': {
        start: {
          line: 83,
          column: 6
        },
        end: {
          line: 83,
          column: 28
        }
      },
      '36': {
        start: {
          line: 84,
          column: 11
        },
        end: {
          line: 94,
          column: 5
        }
      },
      '37': {
        start: {
          line: 85,
          column: 6
        },
        end: {
          line: 85,
          column: 29
        }
      },
      '38': {
        start: {
          line: 87,
          column: 6
        },
        end: {
          line: 87,
          column: 28
        }
      },
      '39': {
        start: {
          line: 88,
          column: 11
        },
        end: {
          line: 94,
          column: 5
        }
      },
      '40': {
        start: {
          line: 89,
          column: 6
        },
        end: {
          line: 89,
          column: 32
        }
      },
      '41': {
        start: {
          line: 91,
          column: 6
        },
        end: {
          line: 93,
          column: 7
        }
      },
      '42': {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 73
        }
      },
      '43': {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 40
        }
      },
      '44': {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 97,
          column: 25
        }
      },
      '45': {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      '46': {
        start: {
          line: 100,
          column: 6
        },
        end: {
          line: 100,
          column: 24
        }
      },
      '47': {
        start: {
          line: 101,
          column: 6
        },
        end: {
          line: 101,
          column: 25
        }
      },
      '48': {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 15
        }
      },
      '49': {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 113,
          column: 21
        }
      },
      '50': {
        start: {
          line: 114,
          column: 15
        },
        end: {
          line: 114,
          column: 16
        }
      },
      '51': {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      '52': {
        start: {
          line: 117,
          column: 6
        },
        end: {
          line: 117,
          column: 20
        }
      },
      '53': {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 124,
          column: 5
        }
      },
      '54': {
        start: {
          line: 121,
          column: 6
        },
        end: {
          line: 121,
          column: 15
        }
      },
      '55': {
        start: {
          line: 122,
          column: 11
        },
        end: {
          line: 124,
          column: 5
        }
      },
      '56': {
        start: {
          line: 123,
          column: 6
        },
        end: {
          line: 123,
          column: 47
        }
      },
      '57': {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 29
        }
      },
      '58': {
        start: {
          line: 136,
          column: 2
        },
        end: {
          line: 138,
          column: 3
        }
      },
      '59': {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 58
        }
      },
      '60': {
        start: {
          line: 147,
          column: 2
        },
        end: {
          line: 151,
          column: 3
        }
      },
      '61': {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 150,
          column: 6
        }
      },
      '62': {
        start: {
          line: 159,
          column: 2
        },
        end: {
          line: 161,
          column: 3
        }
      },
      '63': {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 160,
          column: 66
        }
      }
    },
    fnMap: {
      '0': {
        name: 'buffer',
        decl: {
          start: {
            line: 13,
            column: 9
          },
          end: {
            line: 13,
            column: 15
          }
        },
        loc: {
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 128,
            column: 1
          }
        },
        line: 13
      },
      '1': {
        name: 'encode',
        decl: {
          start: {
            line: 34,
            column: 11
          },
          end: {
            line: 34,
            column: 17
          }
        },
        loc: {
          start: {
            line: 34,
            column: 32
          },
          end: {
            line: 64,
            column: 3
          }
        },
        line: 34
      },
      '2': {
        name: 'decode',
        decl: {
          start: {
            line: 71,
            column: 11
          },
          end: {
            line: 71,
            column: 17
          }
        },
        loc: {
          start: {
            line: 71,
            column: 27
          },
          end: {
            line: 105,
            column: 3
          }
        },
        line: 71
      },
      '3': {
        name: 'encodingLength',
        decl: {
          start: {
            line: 112,
            column: 11
          },
          end: {
            line: 112,
            column: 25
          }
        },
        loc: {
          start: {
            line: 112,
            column: 31
          },
          end: {
            line: 127,
            column: 3
          }
        },
        line: 112
      },
      '4': {
        name: 'checkBuffer',
        decl: {
          start: {
            line: 135,
            column: 9
          },
          end: {
            line: 135,
            column: 20
          }
        },
        loc: {
          start: {
            line: 135,
            column: 26
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 135
      },
      '5': {
        name: 'checkLength',
        decl: {
          start: {
            line: 146,
            column: 9
          },
          end: {
            line: 146,
            column: 20
          }
        },
        loc: {
          start: {
            line: 146,
            column: 47
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 146
      },
      '6': {
        name: 'checkLengthType',
        decl: {
          start: {
            line: 158,
            column: 9
          },
          end: {
            line: 158,
            column: 24
          }
        },
        loc: {
          start: {
            line: 158,
            column: 33
          },
          end: {
            line: 162,
            column: 1
          }
        },
        line: 158
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        }, {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        }],
        line: 19
      },
      '1': {
        loc: {
          start: {
            line: 19,
            column: 6
          },
          end: {
            line: 19,
            column: 45
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 19,
            column: 6
          },
          end: {
            line: 19,
            column: 12
          }
        }, {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 19,
            column: 23
          }
        }, {
          start: {
            line: 19,
            column: 27
          },
          end: {
            line: 19,
            column: 34
          }
        }, {
          start: {
            line: 19,
            column: 38
          },
          end: {
            line: 19,
            column: 45
          }
        }],
        line: 19
      },
      '2': {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }],
        line: 41
      },
      '3': {
        loc: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        }, {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        }],
        line: 45
      },
      '4': {
        loc: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        }, {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        }],
        line: 50
      },
      '5': {
        loc: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        }, {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        }],
        line: 60
      },
      '6': {
        loc: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        }, {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        }],
        line: 78
      },
      '7': {
        loc: {
          start: {
            line: 80,
            column: 11
          },
          end: {
            line: 94,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 80,
            column: 11
          },
          end: {
            line: 94,
            column: 5
          }
        }, {
          start: {
            line: 80,
            column: 11
          },
          end: {
            line: 94,
            column: 5
          }
        }],
        line: 80
      },
      '8': {
        loc: {
          start: {
            line: 84,
            column: 11
          },
          end: {
            line: 94,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 84,
            column: 11
          },
          end: {
            line: 94,
            column: 5
          }
        }, {
          start: {
            line: 84,
            column: 11
          },
          end: {
            line: 94,
            column: 5
          }
        }],
        line: 84
      },
      '9': {
        loc: {
          start: {
            line: 88,
            column: 11
          },
          end: {
            line: 94,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 88,
            column: 11
          },
          end: {
            line: 94,
            column: 5
          }
        }, {
          start: {
            line: 88,
            column: 11
          },
          end: {
            line: 94,
            column: 5
          }
        }],
        line: 88
      },
      '10': {
        loc: {
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 93,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 93,
            column: 7
          }
        }, {
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 93,
            column: 7
          }
        }],
        line: 91
      },
      '11': {
        loc: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        }, {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        }],
        line: 99
      },
      '12': {
        loc: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        }, {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        }],
        line: 116
      },
      '13': {
        loc: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        }, {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        }],
        line: 120
      },
      '14': {
        loc: {
          start: {
            line: 122,
            column: 11
          },
          end: {
            line: 124,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 122,
            column: 11
          },
          end: {
            line: 124,
            column: 5
          }
        }, {
          start: {
            line: 122,
            column: 11
          },
          end: {
            line: 124,
            column: 5
          }
        }],
        line: 122
      },
      '15': {
        loc: {
          start: {
            line: 136,
            column: 2
          },
          end: {
            line: 138,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 136,
            column: 2
          },
          end: {
            line: 138,
            column: 3
          }
        }, {
          start: {
            line: 136,
            column: 2
          },
          end: {
            line: 138,
            column: 3
          }
        }],
        line: 136
      },
      '16': {
        loc: {
          start: {
            line: 147,
            column: 2
          },
          end: {
            line: 151,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 147,
            column: 2
          },
          end: {
            line: 151,
            column: 3
          }
        }, {
          start: {
            line: 147,
            column: 2
          },
          end: {
            line: 151,
            column: 3
          }
        }],
        line: 147
      },
      '17': {
        loc: {
          start: {
            line: 159,
            column: 2
          },
          end: {
            line: 161,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 159,
            column: 2
          },
          end: {
            line: 161,
            column: 3
          }
        }, {
          start: {
            line: 159,
            column: 2
          },
          end: {
            line: 161,
            column: 3
          }
        }],
        line: 159
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0,
      '48': 0,
      '49': 0,
      '50': 0,
      '51': 0,
      '52': 0,
      '53': 0,
      '54': 0,
      '55': 0,
      '56': 0,
      '57': 0,
      '58': 0,
      '59': 0,
      '60': 0,
      '61': 0,
      '62': 0,
      '63': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0, 0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0],
      '10': [0, 0],
      '11': [0, 0],
      '12': [0, 0],
      '13': [0, 0],
      '14': [0, 0],
      '15': [0, 0],
      '16': [0, 0],
      '17': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const { isType, isFunction } = /* istanbul ignore next */(cov_29sk20cu9j.s[0]++, require('lib/util'));
const NotEnoughDataError = /* istanbul ignore next */(cov_29sk20cu9j.s[1]++, require('lib/not-enough-data-error'));

/* istanbul ignore next */cov_29sk20cu9j.s[2]++;
module.exports = buffer;

/**
 * Buffer type.
 * @param {number|Object} length The number of bytes or type for size-prefixed buffers.
 * @returns {Object}
 */
function buffer(length) {
  /* istanbul ignore next */cov_29sk20cu9j.f[0]++;

  const isnum = /* istanbul ignore next */(cov_29sk20cu9j.s[3]++, typeof length === 'number');
  const istype = /* istanbul ignore next */(cov_29sk20cu9j.s[4]++, isType(length));
  const isfunc = /* istanbul ignore next */(cov_29sk20cu9j.s[5]++, isFunction(length));
  const isNull = /* istanbul ignore next */(cov_29sk20cu9j.s[6]++, length === null);

  /* istanbul ignore next */cov_29sk20cu9j.s[7]++;
  if ( /* istanbul ignore next */(cov_29sk20cu9j.b[1][0]++, !isnum) && /* istanbul ignore next */(cov_29sk20cu9j.b[1][1]++, !istype) && /* istanbul ignore next */(cov_29sk20cu9j.b[1][2]++, !isfunc) && /* istanbul ignore next */(cov_29sk20cu9j.b[1][3]++, !isNull)) {
    /* istanbul ignore next */cov_29sk20cu9j.b[0][0]++;
    cov_29sk20cu9j.s[8]++;

    throw new TypeError('Unknown type of argument #1.');
  } else /* istanbul ignore next */{
    cov_29sk20cu9j.b[0][1]++;
  }

  cov_29sk20cu9j.s[9]++;
  return {
    encode,
    decode,
    encodingLength
  };

  /**
   * Encode buffer.
   * @param {Buffer} buf
   * @param {EncodeStream} wstream
   */
  function encode(buf, wstream) {
    /* istanbul ignore next */cov_29sk20cu9j.f[1]++;
    cov_29sk20cu9j.s[10]++;

    checkBuffer(buf);
    /* istanbul ignore next */cov_29sk20cu9j.s[11]++;
    encode.bytes = 0;

    // eslint-disable-next-line no-invalid-this
    const context = /* istanbul ignore next */(cov_29sk20cu9j.s[12]++, this);

    /* istanbul ignore next */cov_29sk20cu9j.s[13]++;
    if (isnum) {
      /* istanbul ignore next */cov_29sk20cu9j.b[2][0]++;
      cov_29sk20cu9j.s[14]++;

      checkLength(length, buf.length);
    } else /* istanbul ignore next */{
      cov_29sk20cu9j.b[2][1]++;
    }

    cov_29sk20cu9j.s[15]++;
    if (istype) {
      /* istanbul ignore next */cov_29sk20cu9j.b[3][0]++;
      cov_29sk20cu9j.s[16]++;

      length.encode.call(context, buf.length, wstream);
      /* istanbul ignore next */cov_29sk20cu9j.s[17]++;
      encode.bytes += length.encode.bytes;
    } else /* istanbul ignore next */{
      cov_29sk20cu9j.b[3][1]++;
    }

    cov_29sk20cu9j.s[18]++;
    if (isfunc) {
      /* istanbul ignore next */cov_29sk20cu9j.b[4][0]++;

      const expectedLength = /* istanbul ignore next */(cov_29sk20cu9j.s[19]++, length(context));

      /* istanbul ignore next */cov_29sk20cu9j.s[20]++;
      checkLengthType(expectedLength);
      /* istanbul ignore next */cov_29sk20cu9j.s[21]++;
      checkLength(expectedLength, buf.length);
    } else /* istanbul ignore next */{
      cov_29sk20cu9j.b[4][1]++;
    }

    cov_29sk20cu9j.s[22]++;
    wstream.writeBuffer(buf);
    /* istanbul ignore next */cov_29sk20cu9j.s[23]++;
    encode.bytes += buf.length;

    /* istanbul ignore next */cov_29sk20cu9j.s[24]++;
    if (isNull) {
      /* istanbul ignore next */cov_29sk20cu9j.b[5][0]++;
      cov_29sk20cu9j.s[25]++;

      wstream.writeUInt8(0);
      /* istanbul ignore next */cov_29sk20cu9j.s[26]++;
      encode.bytes += 1;
    } else /* istanbul ignore next */{
      cov_29sk20cu9j.b[5][1]++;
    }
  }

  /**
   * Read the buffer from the stream.
   * @param {DecodeStream} rstream
   * @returns {Buffer}
   */
  function decode(rstream) {
    /* istanbul ignore next */cov_29sk20cu9j.f[2]++;

    let size = /* istanbul ignore next */(cov_29sk20cu9j.s[27]++, 0);
    /* istanbul ignore next */cov_29sk20cu9j.s[28]++;
    decode.bytes = 0;

    // eslint-disable-next-line no-invalid-this
    const context = /* istanbul ignore next */(cov_29sk20cu9j.s[29]++, this);

    /* istanbul ignore next */cov_29sk20cu9j.s[30]++;
    if (isnum) {
      /* istanbul ignore next */cov_29sk20cu9j.b[6][0]++;
      cov_29sk20cu9j.s[31]++;

      size = length;
    } else {
        /* istanbul ignore next */cov_29sk20cu9j.b[6][1]++;
        cov_29sk20cu9j.s[32]++;
        if (istype) {
          /* istanbul ignore next */cov_29sk20cu9j.b[7][0]++;
          cov_29sk20cu9j.s[33]++;

          size = length.decode.call(context, rstream);
          /* istanbul ignore next */cov_29sk20cu9j.s[34]++;
          decode.bytes += length.decode.bytes;
          /* istanbul ignore next */cov_29sk20cu9j.s[35]++;
          checkLengthType(size);
        } else {
            /* istanbul ignore next */cov_29sk20cu9j.b[7][1]++;
            cov_29sk20cu9j.s[36]++;
            if (isfunc) {
              /* istanbul ignore next */cov_29sk20cu9j.b[8][0]++;
              cov_29sk20cu9j.s[37]++;

              size = length(context);

              /* istanbul ignore next */cov_29sk20cu9j.s[38]++;
              checkLengthType(size);
            } else {
                /* istanbul ignore next */cov_29sk20cu9j.b[8][1]++;
                cov_29sk20cu9j.s[39]++;
                if (isNull) {
                  /* istanbul ignore next */cov_29sk20cu9j.b[9][0]++;
                  cov_29sk20cu9j.s[40]++;

                  size = rstream.indexOf(0);

                  /* istanbul ignore next */cov_29sk20cu9j.s[41]++;
                  if (size === -1) {
                    /* istanbul ignore next */cov_29sk20cu9j.b[10][0]++;
                    cov_29sk20cu9j.s[42]++;

                    throw new NotEnoughDataError(rstream.length + 1, rstream.length);
                  } else /* istanbul ignore next */{
                    cov_29sk20cu9j.b[10][1]++;
                  }
                } else /* istanbul ignore next */{
                  cov_29sk20cu9j.b[9][1]++;
                }
              }
          }
      }const buf = /* istanbul ignore next */(cov_29sk20cu9j.s[43]++, rstream.readBuffer(size));
    /* istanbul ignore next */cov_29sk20cu9j.s[44]++;
    decode.bytes += size;

    /* istanbul ignore next */cov_29sk20cu9j.s[45]++;
    if (isNull) {
      /* istanbul ignore next */cov_29sk20cu9j.b[11][0]++;
      cov_29sk20cu9j.s[46]++;

      decode.bytes += 1;
      /* istanbul ignore next */cov_29sk20cu9j.s[47]++;
      rstream.consume(1);
    } else /* istanbul ignore next */{
      cov_29sk20cu9j.b[11][1]++;
    }

    cov_29sk20cu9j.s[48]++;
    return buf;
  }

  /**
   * Get the number bytes of an encoded buffer.
   * @param {Buffer} buf
   * @returns {number}
   */
  function encodingLength(buf) {
    /* istanbul ignore next */cov_29sk20cu9j.f[3]++;
    cov_29sk20cu9j.s[49]++;

    checkBuffer(buf);
    let size = /* istanbul ignore next */(cov_29sk20cu9j.s[50]++, 0);

    /* istanbul ignore next */cov_29sk20cu9j.s[51]++;
    if (isnum) {
      /* istanbul ignore next */cov_29sk20cu9j.b[12][0]++;
      cov_29sk20cu9j.s[52]++;

      return length;
    } else /* istanbul ignore next */{
      cov_29sk20cu9j.b[12][1]++;
    }

    cov_29sk20cu9j.s[53]++;
    if (isNull) {
      /* istanbul ignore next */cov_29sk20cu9j.b[13][0]++;
      cov_29sk20cu9j.s[54]++;

      size = 1;
    } else {
        /* istanbul ignore next */cov_29sk20cu9j.b[13][1]++;
        cov_29sk20cu9j.s[55]++;
        if (istype) {
          /* istanbul ignore next */cov_29sk20cu9j.b[14][0]++;
          cov_29sk20cu9j.s[56]++;

          size = length.encodingLength(buf.length);
        } else /* istanbul ignore next */{
          cov_29sk20cu9j.b[14][1]++;
        }
      } /* istanbul ignore next */cov_29sk20cu9j.s[57]++;
    return size + buf.length;
  }
}

/**
 * Check if item is a Buffer.
 * @param {any} buf
 * @private
 */
function checkBuffer(buf) {
  /* istanbul ignore next */cov_29sk20cu9j.f[4]++;
  cov_29sk20cu9j.s[58]++;

  if (!Buffer.isBuffer(buf)) {
    /* istanbul ignore next */cov_29sk20cu9j.b[15][0]++;
    cov_29sk20cu9j.s[59]++;

    throw new TypeError('Argument 1 should be a Buffer.');
  } else /* istanbul ignore next */{
    cov_29sk20cu9j.b[15][1]++;
  }
}

/**
 * Check the length of a Buffer to encode.
 * @param {number} requiredSize
 * @param {number} havingSize
 */
function checkLength(requiredSize, havingSize) {
  /* istanbul ignore next */cov_29sk20cu9j.f[5]++;
  cov_29sk20cu9j.s[60]++;

  if (requiredSize !== havingSize) {
    /* istanbul ignore next */cov_29sk20cu9j.b[16][0]++;
    cov_29sk20cu9j.s[61]++;

    throw new Error(`Buffer required length ${requiredSize} instead of ${havingSize}`);
  } else /* istanbul ignore next */{
    cov_29sk20cu9j.b[16][1]++;
  }
}

/**
 * Check if the length type is a number.
 * @param {any} length
 */
function checkLengthType(length) {
  /* istanbul ignore next */cov_29sk20cu9j.f[6]++;
  cov_29sk20cu9j.s[62]++;

  if (typeof length !== 'number') {
    /* istanbul ignore next */cov_29sk20cu9j.b[17][0]++;
    cov_29sk20cu9j.s[63]++;

    throw new TypeError('Length of a buffer should be a number.');
  } else /* istanbul ignore next */{
    cov_29sk20cu9j.b[17][1]++;
  }
}