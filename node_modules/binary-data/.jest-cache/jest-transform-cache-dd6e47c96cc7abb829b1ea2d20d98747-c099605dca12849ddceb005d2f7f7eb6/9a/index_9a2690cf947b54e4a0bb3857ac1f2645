5e7e41433b66e3af813e4c491c5372f2
'use strict';

var cov_1foi4dgh3a = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/index.js',
      hash = '77d3090993bcdb5a667359c3b8c087daa55552b0',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/index.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 21
        },
        end: {
          line: 3,
          column: 49
        }
      },
      '1': {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 36
        }
      },
      '2': {
        start: {
          line: 5,
          column: 15
        },
        end: {
          line: 5,
          column: 38
        }
      },
      '3': {
        start: {
          line: 6,
          column: 13
        },
        end: {
          line: 6,
          column: 34
        }
      },
      '4': {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 42
        }
      },
      '5': {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 38
        }
      },
      '6': {
        start: {
          line: 9,
          column: 16
        },
        end: {
          line: 9,
          column: 40
        }
      },
      '7': {
        start: {
          line: 10,
          column: 13
        },
        end: {
          line: 10,
          column: 34
        }
      },
      '8': {
        start: {
          line: 11,
          column: 15
        },
        end: {
          line: 11,
          column: 38
        }
      },
      '9': {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 12,
          column: 40
        }
      },
      '10': {
        start: {
          line: 13,
          column: 19
        },
        end: {
          line: 13,
          column: 40
        }
      },
      '11': {
        start: {
          line: 14,
          column: 27
        },
        end: {
          line: 14,
          column: 57
        }
      },
      '12': {
        start: {
          line: 15,
          column: 20
        },
        end: {
          line: 15,
          column: 46
        }
      },
      '13': {
        start: {
          line: 16,
          column: 27
        },
        end: {
          line: 16,
          column: 63
        }
      },
      '14': {
        start: {
          line: 18,
          column: 14
        },
        end: {
          line: 26,
          column: 1
        }
      },
      '15': {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 30,
          column: 1
        }
      },
      '16': {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 30
        }
      },
      '17': {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 32
        }
      },
      '18': {
        start: {
          line: 40,
          column: 17
        },
        end: {
          line: 44,
          column: 4
        }
      },
      '19': {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 46,
          column: 27
        }
      },
      '20': {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 47,
          column: 16
        }
      },
      '21': {
        start: {
          line: 56,
          column: 15
        },
        end: {
          line: 56,
          column: 19
        }
      },
      '22': {
        start: {
          line: 57,
          column: 19
        },
        end: {
          line: 57,
          column: 47
        }
      },
      '23': {
        start: {
          line: 59,
          column: 2
        },
        end: {
          line: 61,
          column: 3
        }
      },
      '24': {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 25
        }
      },
      '25': {
        start: {
          line: 63,
          column: 17
        },
        end: {
          line: 67,
          column: 4
        }
      },
      '26': {
        start: {
          line: 69,
          column: 2
        },
        end: {
          line: 69,
          column: 27
        }
      },
      '27': {
        start: {
          line: 71,
          column: 2
        },
        end: {
          line: 73,
          column: 3
        }
      },
      '28': {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 31
        }
      },
      '29': {
        start: {
          line: 75,
          column: 2
        },
        end: {
          line: 75,
          column: 16
        }
      },
      '30': {
        start: {
          line: 85,
          column: 2
        },
        end: {
          line: 94,
          column: 3
        }
      },
      '31': {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 86,
          column: 39
        }
      },
      '32': {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 28
        }
      },
      '33': {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 29
        }
      },
      '34': {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 18
        }
      },
      '35': {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 93,
          column: 14
        }
      },
      '36': {
        start: {
          line: 104,
          column: 2
        },
        end: {
          line: 104,
          column: 21
        }
      },
      '37': {
        start: {
          line: 106,
          column: 2
        },
        end: {
          line: 122,
          column: 3
        }
      },
      '38': {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      '39': {
        start: {
          line: 108,
          column: 26
        },
        end: {
          line: 108,
          column: 47
        }
      },
      '40': {
        start: {
          line: 109,
          column: 19
        },
        end: {
          line: 109,
          column: 53
        }
      },
      '41': {
        start: {
          line: 111,
          column: 6
        },
        end: {
          line: 111,
          column: 27
        }
      },
      '42': {
        start: {
          line: 112,
          column: 6
        },
        end: {
          line: 112,
          column: 22
        }
      },
      '43': {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 115,
          column: 9
        }
      },
      '44': {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      '45': {
        start: {
          line: 118,
          column: 6
        },
        end: {
          line: 118,
          column: 11
        }
      },
      '46': {
        start: {
          line: 120,
          column: 6
        },
        end: {
          line: 120,
          column: 16
        }
      },
      '47': {
        start: {
          line: 125,
          column: 0
        },
        end: {
          line: 143,
          column: 2
        }
      }
    },
    fnMap: {
      '0': {
        name: 'createEncodeStream',
        decl: {
          start: {
            line: 39,
            column: 9
          },
          end: {
            line: 39,
            column: 27
          }
        },
        loc: {
          start: {
            line: 39,
            column: 36
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 39
      },
      '1': {
        name: 'createDecodeStream',
        decl: {
          start: {
            line: 55,
            column: 9
          },
          end: {
            line: 55,
            column: 27
          }
        },
        loc: {
          start: {
            line: 55,
            column: 41
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 55
      },
      '2': {
        name: 'transformEncode',
        decl: {
          start: {
            line: 84,
            column: 9
          },
          end: {
            line: 84,
            column: 24
          }
        },
        loc: {
          start: {
            line: 84,
            column: 46
          },
          end: {
            line: 95,
            column: 1
          }
        },
        line: 84
      },
      '3': {
        name: 'transformDecode',
        decl: {
          start: {
            line: 103,
            column: 9
          },
          end: {
            line: 103,
            column: 24
          }
        },
        loc: {
          start: {
            line: 103,
            column: 46
          },
          end: {
            line: 123,
            column: 1
          }
        },
        line: 103
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 59,
            column: 2
          },
          end: {
            line: 61,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 59,
            column: 2
          },
          end: {
            line: 61,
            column: 3
          }
        }, {
          start: {
            line: 59,
            column: 2
          },
          end: {
            line: 61,
            column: 3
          }
        }],
        line: 59
      },
      '1': {
        loc: {
          start: {
            line: 71,
            column: 2
          },
          end: {
            line: 73,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 71,
            column: 2
          },
          end: {
            line: 73,
            column: 3
          }
        }, {
          start: {
            line: 71,
            column: 2
          },
          end: {
            line: 73,
            column: 3
          }
        }],
        line: 71
      },
      '2': {
        loc: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        }, {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        }],
        line: 117
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const BinaryStream = (cov_1foi4dgh3a.s[0]++, require('lib/binary-stream'));
const array = (cov_1foi4dgh3a.s[1]++, require('types/array'));
const buffer = (cov_1foi4dgh3a.s[2]++, require('types/buffer'));
const bool = (cov_1foi4dgh3a.s[3]++, require('types/bool'));
const reserved = (cov_1foi4dgh3a.s[4]++, require('types/reserved'));
const string = (cov_1foi4dgh3a.s[5]++, require('types/string'));
const numbers = (cov_1foi4dgh3a.s[6]++, require('types/numbers'));
const when = (cov_1foi4dgh3a.s[7]++, require('types/when'));
const select = (cov_1foi4dgh3a.s[8]++, require('types/select'));
const { encode } = (cov_1foi4dgh3a.s[9]++, require('lib/encode'));
const { decode } = (cov_1foi4dgh3a.s[10]++, require('lib/decode'));
const { encodingLength } = (cov_1foi4dgh3a.s[11]++, require('lib/encoding-length'));
const Transaction = (cov_1foi4dgh3a.s[12]++, require('lib/transaction'));
const NotEnoughDataError = (cov_1foi4dgh3a.s[13]++, require('lib/not-enough-data-error'));

const types = (cov_1foi4dgh3a.s[14]++, {
  array,
  bool,
  buffer,
  reserved,
  string,
  when,
  select
});

cov_1foi4dgh3a.s[15]++;
for (const type of Object.keys(numbers)) {
  cov_1foi4dgh3a.s[16]++;

  types[type] = numbers[type]; // eslint-disable-line security/detect-object-injection
}

const kschema = (cov_1foi4dgh3a.s[17]++, Symbol('schema'));

/**
 * Create transform stream to encode objects into Buffer.
 * @param {Object} [schema]
 * @returns {EncodeStream}
 */
function createEncodeStream(schema) {
  cov_1foi4dgh3a.f[0]++;

  const stream = (cov_1foi4dgh3a.s[18]++, new BinaryStream({
    readableObjectMode: false,
    writableObjectMode: true,
    transform: transformEncode
  }));

  cov_1foi4dgh3a.s[19]++;
  stream[kschema] = schema;
  cov_1foi4dgh3a.s[20]++;
  return stream;
}

/**
 * Create transform stream to decode binary data into object.
 * @param {Buffer|Object} [bufOrSchema]
 * @returns {DecodeStream}
 */
function createDecodeStream(bufOrSchema) {
  cov_1foi4dgh3a.f[1]++;

  let schema = (cov_1foi4dgh3a.s[21]++, null);
  const isBuffer = (cov_1foi4dgh3a.s[22]++, Buffer.isBuffer(bufOrSchema));

  cov_1foi4dgh3a.s[23]++;
  if (!isBuffer) {
    cov_1foi4dgh3a.b[0][0]++;
    cov_1foi4dgh3a.s[24]++;

    schema = bufOrSchema;
  } else {
    cov_1foi4dgh3a.b[0][1]++;
  }

  const stream = (cov_1foi4dgh3a.s[25]++, new BinaryStream({
    transform: transformDecode,
    readableObjectMode: true,
    writableObjectMode: false
  }));

  cov_1foi4dgh3a.s[26]++;
  stream[kschema] = schema;

  cov_1foi4dgh3a.s[27]++;
  if (isBuffer) {
    cov_1foi4dgh3a.b[1][0]++;
    cov_1foi4dgh3a.s[28]++;

    stream.append(bufOrSchema);
  } else {
    cov_1foi4dgh3a.b[1][1]++;
  }

  cov_1foi4dgh3a.s[29]++;
  return stream;
}

/**
 * The `transform` function for transform stream.
 * @param {*} chunk Any valid js data type.
 * @param {string} encoding
 * @param {Function} cb
 */
function transformEncode(chunk, encoding, cb) {
  cov_1foi4dgh3a.f[2]++;
  cov_1foi4dgh3a.s[30]++;

  try {
    cov_1foi4dgh3a.s[31]++;

    encode(chunk, this[kschema], this);

    const buf = (cov_1foi4dgh3a.s[32]++, this.slice());
    cov_1foi4dgh3a.s[33]++;
    this.consume(buf.length);

    cov_1foi4dgh3a.s[34]++;
    cb(null, buf);
  } catch (error) {
    cov_1foi4dgh3a.s[35]++;

    cb(error);
  }
}

/**
 * The `transform` function for transform stream.
 * @param {*} chunk Any valid js data type.
 * @param {string} encoding
 * @param {Function} cb
 */
function transformDecode(chunk, encoding, cb) {
  cov_1foi4dgh3a.f[3]++;
  cov_1foi4dgh3a.s[36]++;

  this.append(chunk);

  cov_1foi4dgh3a.s[37]++;
  try {
    cov_1foi4dgh3a.s[38]++;

    while (this.length > 0) {
      const transaction = (cov_1foi4dgh3a.s[39]++, new Transaction(this));
      const data = (cov_1foi4dgh3a.s[40]++, decode(transaction, this[kschema]));

      cov_1foi4dgh3a.s[41]++;
      transaction.commit();
      cov_1foi4dgh3a.s[42]++;
      this.push(data);
    }

    cov_1foi4dgh3a.s[43]++;
    cb();
  } catch (error) {
    cov_1foi4dgh3a.s[44]++;

    if (error instanceof NotEnoughDataError) {
      cov_1foi4dgh3a.b[2][0]++;
      cov_1foi4dgh3a.s[45]++;

      cb();
    } else {
      cov_1foi4dgh3a.b[2][1]++;
      cov_1foi4dgh3a.s[46]++;

      cb(error);
    }
  }
}

cov_1foi4dgh3a.s[47]++;
module.exports = {
  /* Main api */
  createEncodeStream,
  createDecodeStream,
  encode,
  decode,
  encodingLength,

  /* aliases */
  createEncode: createEncodeStream,
  createDecode: createDecodeStream,

  /* Data types */
  types,

  /* Re-export utils */
  BinaryStream,
  NotEnoughDataError
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,