{"version":3,"sources":["numbers.js"],"names":["types","require","describe","numberType","doublebe","test","value","writeDoubleBE","jest","fn","encode","expect","toHaveBeenCalledTimes","bytes","toEqual","readDoubleBE","mockImplementation","decode","encodingLength","doublele","writeDoubleLE","readDoubleLE","floatbe","writeFloatBE","readFloatBE","floatle","writeFloatLE","readFloatLE","int8","writeInt8","readInt8","uint8","writeUInt8","readUInt8","int16be","writeInt16BE","readInt16BE","uint16be","writeUInt16BE","readUInt16BE","int16le","writeInt16LE","readInt16LE","uint16le","writeUInt16LE","readUInt16LE","int32be","writeInt32BE","readInt32BE","uint32be","writeUInt32BE","readUInt32BE","int32le","writeInt32LE","readInt32LE","uint32le","writeUInt32LE","readUInt32LE","int24be","size","writeIntBE","toBeCalledWith","readIntBE","uint24be","writeUIntBE","readUIntBE","int24le","writeIntLE","readIntLE","uint24le","writeUIntLE","readUIntLE","int40be","uint40be","int40le","uint40le","int48be","uint48be","int48le","uint48le"],"mappings":"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","file":"numbers.js","sourcesContent":["'use strict';\n\n/* eslint-disable max-lines */\nconst types = require('types/numbers');\n\ndescribe('doublebe', () => {\n  const numberType = types.doublebe;\n\n  test('write', () => {\n    const value = 1;\n    const writeDoubleBE = jest.fn();\n\n    numberType.encode(value, { writeDoubleBE });\n\n    expect(writeDoubleBE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(8);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readDoubleBE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readDoubleBE })).toEqual(value);\n    expect(readDoubleBE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(8);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(8);\n  });\n});\n\ndescribe('doublele', () => {\n  const numberType = types.doublele;\n\n  test('write', () => {\n    const value = 1;\n    const writeDoubleLE = jest.fn();\n\n    numberType.encode(value, { writeDoubleLE });\n\n    expect(writeDoubleLE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(8);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readDoubleLE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readDoubleLE })).toEqual(value);\n    expect(readDoubleLE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(8);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(8);\n  });\n});\n\ndescribe('floatbe', () => {\n  const numberType = types.floatbe;\n\n  test('write', () => {\n    const value = 1;\n    const writeFloatBE = jest.fn();\n\n    numberType.encode(value, { writeFloatBE });\n\n    expect(writeFloatBE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(4);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readFloatBE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readFloatBE })).toEqual(value);\n    expect(readFloatBE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(4);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(4);\n  });\n});\n\ndescribe('floatle', () => {\n  const numberType = types.floatle;\n\n  test('write', () => {\n    const value = 1;\n    const writeFloatLE = jest.fn();\n\n    numberType.encode(value, { writeFloatLE });\n\n    expect(writeFloatLE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(4);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readFloatLE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readFloatLE })).toEqual(value);\n    expect(readFloatLE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(4);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(4);\n  });\n});\n\ndescribe('int8', () => {\n  const numberType = types.int8;\n\n  test('write', () => {\n    const value = 1;\n    const writeInt8 = jest.fn();\n\n    numberType.encode(value, { writeInt8 });\n\n    expect(writeInt8).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(1);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readInt8 = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readInt8 })).toEqual(value);\n    expect(readInt8).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(1);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(1);\n  });\n});\n\ndescribe('uint8', () => {\n  const numberType = types.uint8;\n\n  test('write', () => {\n    const value = 1;\n    const writeUInt8 = jest.fn();\n\n    numberType.encode(value, { writeUInt8 });\n\n    expect(writeUInt8).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(1);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUInt8 = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUInt8 })).toEqual(value);\n    expect(readUInt8).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(1);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(1);\n  });\n});\n\ndescribe('int16be', () => {\n  const numberType = types.int16be;\n\n  test('write', () => {\n    const value = 1;\n    const writeInt16BE = jest.fn();\n\n    numberType.encode(value, { writeInt16BE });\n\n    expect(writeInt16BE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(2);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readInt16BE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readInt16BE })).toEqual(value);\n    expect(readInt16BE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(2);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(2);\n  });\n});\n\ndescribe('uint16be', () => {\n  const numberType = types.uint16be;\n\n  test('write', () => {\n    const value = 1;\n    const writeUInt16BE = jest.fn();\n\n    numberType.encode(value, { writeUInt16BE });\n\n    expect(writeUInt16BE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(2);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUInt16BE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUInt16BE })).toEqual(value);\n    expect(readUInt16BE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(2);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(2);\n  });\n});\n\ndescribe('int16le', () => {\n  const numberType = types.int16le;\n\n  test('write', () => {\n    const value = 1;\n    const writeInt16LE = jest.fn();\n\n    numberType.encode(value, { writeInt16LE });\n\n    expect(writeInt16LE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(2);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readInt16LE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readInt16LE })).toEqual(value);\n    expect(readInt16LE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(2);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(2);\n  });\n});\n\ndescribe('uint16le', () => {\n  const numberType = types.uint16le;\n\n  test('write', () => {\n    const value = 1;\n    const writeUInt16LE = jest.fn();\n\n    numberType.encode(value, { writeUInt16LE });\n\n    expect(writeUInt16LE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(2);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUInt16LE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUInt16LE })).toEqual(value);\n    expect(readUInt16LE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(2);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(2);\n  });\n});\n\ndescribe('int32be', () => {\n  const numberType = types.int32be;\n\n  test('write', () => {\n    const value = 1;\n    const writeInt32BE = jest.fn();\n\n    numberType.encode(value, { writeInt32BE });\n\n    expect(writeInt32BE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(4);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readInt32BE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readInt32BE })).toEqual(value);\n    expect(readInt32BE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(4);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(4);\n  });\n});\n\ndescribe('uint32be', () => {\n  const numberType = types.uint32be;\n\n  test('write', () => {\n    const value = 1;\n    const writeUInt32BE = jest.fn();\n\n    numberType.encode(value, { writeUInt32BE });\n\n    expect(writeUInt32BE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(4);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUInt32BE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUInt32BE })).toEqual(value);\n    expect(readUInt32BE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(4);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(4);\n  });\n});\n\ndescribe('int32le', () => {\n  const numberType = types.int32le;\n\n  test('write', () => {\n    const value = 1;\n    const writeInt32LE = jest.fn();\n\n    numberType.encode(value, { writeInt32LE });\n\n    expect(writeInt32LE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(4);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readInt32LE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readInt32LE })).toEqual(value);\n    expect(readInt32LE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(4);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(4);\n  });\n});\n\ndescribe('uint32le', () => {\n  const numberType = types.uint32le;\n\n  test('write', () => {\n    const value = 1;\n    const writeUInt32LE = jest.fn();\n\n    numberType.encode(value, { writeUInt32LE });\n\n    expect(writeUInt32LE).toHaveBeenCalledTimes(1);\n    expect(numberType.encode.bytes).toEqual(4);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUInt32LE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUInt32LE })).toEqual(value);\n    expect(readUInt32LE).toHaveBeenCalledTimes(1);\n    expect(numberType.decode.bytes).toEqual(4);\n  });\n\n  test('size', () => {\n    expect(types.uint32le.encodingLength()).toEqual(4);\n  });\n});\n\ndescribe('int24be', () => {\n  const numberType = types.int24be;\n  const size = 3;\n\n  test('write', () => {\n    const value = 1;\n    const writeIntBE = jest.fn();\n\n    numberType.encode(value, { writeIntBE });\n\n    expect(writeIntBE).toHaveBeenCalledTimes(1);\n    expect(writeIntBE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readIntBE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readIntBE })).toEqual(value);\n    expect(readIntBE).toHaveBeenCalledTimes(1);\n    expect(readIntBE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('uint24be', () => {\n  const numberType = types.uint24be;\n  const size = 3;\n\n  test('write', () => {\n    const value = 1;\n    const writeUIntBE = jest.fn();\n\n    numberType.encode(value, { writeUIntBE });\n\n    expect(writeUIntBE).toHaveBeenCalledTimes(1);\n    expect(writeUIntBE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUIntBE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUIntBE })).toEqual(value);\n    expect(readUIntBE).toHaveBeenCalledTimes(1);\n    expect(readUIntBE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('int24le', () => {\n  const numberType = types.int24le;\n  const size = 3;\n\n  test('write', () => {\n    const value = 1;\n    const writeIntLE = jest.fn();\n\n    numberType.encode(value, { writeIntLE });\n\n    expect(writeIntLE).toHaveBeenCalledTimes(1);\n    expect(writeIntLE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readIntLE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readIntLE })).toEqual(value);\n    expect(readIntLE).toHaveBeenCalledTimes(1);\n    expect(readIntLE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('uint24le', () => {\n  const numberType = types.uint24le;\n  const size = 3;\n\n  test('write', () => {\n    const value = 1;\n    const writeUIntLE = jest.fn();\n\n    numberType.encode(value, { writeUIntLE });\n\n    expect(writeUIntLE).toHaveBeenCalledTimes(1);\n    expect(writeUIntLE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUIntLE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUIntLE })).toEqual(value);\n    expect(readUIntLE).toHaveBeenCalledTimes(1);\n    expect(readUIntLE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('int40be', () => {\n  const numberType = types.int40be;\n  const size = 5;\n\n  test('write', () => {\n    const value = 1;\n    const writeIntBE = jest.fn();\n\n    numberType.encode(value, { writeIntBE });\n\n    expect(writeIntBE).toHaveBeenCalledTimes(1);\n    expect(writeIntBE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readIntBE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readIntBE })).toEqual(value);\n    expect(readIntBE).toHaveBeenCalledTimes(1);\n    expect(readIntBE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('uint40be', () => {\n  const numberType = types.uint40be;\n  const size = 5;\n\n  test('write', () => {\n    const value = 1;\n    const writeUIntBE = jest.fn();\n\n    numberType.encode(value, { writeUIntBE });\n\n    expect(writeUIntBE).toHaveBeenCalledTimes(1);\n    expect(writeUIntBE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUIntBE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUIntBE })).toEqual(value);\n    expect(readUIntBE).toHaveBeenCalledTimes(1);\n    expect(readUIntBE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('int40le', () => {\n  const numberType = types.int40le;\n  const size = 5;\n\n  test('write', () => {\n    const value = 1;\n    const writeIntLE = jest.fn();\n\n    numberType.encode(value, { writeIntLE });\n\n    expect(writeIntLE).toHaveBeenCalledTimes(1);\n    expect(writeIntLE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readIntLE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readIntLE })).toEqual(value);\n    expect(readIntLE).toHaveBeenCalledTimes(1);\n    expect(readIntLE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('uint40le', () => {\n  const numberType = types.uint40le;\n  const size = 5;\n\n  test('write', () => {\n    const value = 1;\n    const writeUIntLE = jest.fn();\n\n    numberType.encode(value, { writeUIntLE });\n\n    expect(writeUIntLE).toHaveBeenCalledTimes(1);\n    expect(writeUIntLE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUIntLE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUIntLE })).toEqual(value);\n    expect(readUIntLE).toHaveBeenCalledTimes(1);\n    expect(readUIntLE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('int48be', () => {\n  const numberType = types.int48be;\n  const size = 6;\n\n  test('write', () => {\n    const value = 1;\n    const writeIntBE = jest.fn();\n\n    numberType.encode(value, { writeIntBE });\n\n    expect(writeIntBE).toHaveBeenCalledTimes(1);\n    expect(writeIntBE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readIntBE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readIntBE })).toEqual(value);\n    expect(readIntBE).toHaveBeenCalledTimes(1);\n    expect(readIntBE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('uint48be', () => {\n  const numberType = types.uint48be;\n  const size = 6;\n\n  test('write', () => {\n    const value = 1;\n    const writeUIntBE = jest.fn();\n\n    numberType.encode(value, { writeUIntBE });\n\n    expect(writeUIntBE).toHaveBeenCalledTimes(1);\n    expect(writeUIntBE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUIntBE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUIntBE })).toEqual(value);\n    expect(readUIntBE).toHaveBeenCalledTimes(1);\n    expect(readUIntBE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('int48le', () => {\n  const numberType = types.int48le;\n  const size = 6;\n\n  test('write', () => {\n    const value = 1;\n    const writeIntLE = jest.fn();\n\n    numberType.encode(value, { writeIntLE });\n\n    expect(writeIntLE).toHaveBeenCalledTimes(1);\n    expect(writeIntLE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readIntLE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readIntLE })).toEqual(value);\n    expect(readIntLE).toHaveBeenCalledTimes(1);\n    expect(readIntLE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n\ndescribe('uint48le', () => {\n  const numberType = types.uint48le;\n  const size = 6;\n\n  test('write', () => {\n    const value = 1;\n    const writeUIntLE = jest.fn();\n\n    numberType.encode(value, { writeUIntLE });\n\n    expect(writeUIntLE).toHaveBeenCalledTimes(1);\n    expect(writeUIntLE).toBeCalledWith(value, size);\n    expect(numberType.encode.bytes).toEqual(size);\n  });\n\n  test('read', () => {\n    const value = 1;\n    const readUIntLE = jest.fn().mockImplementation(() => value);\n\n    expect(numberType.decode({ readUIntLE })).toEqual(value);\n    expect(readUIntLE).toHaveBeenCalledTimes(1);\n    expect(readUIntLE).toBeCalledWith(size);\n    expect(numberType.decode.bytes).toEqual(size);\n  });\n\n  test('size', () => {\n    expect(numberType.encodingLength()).toEqual(size);\n  });\n});\n"]}