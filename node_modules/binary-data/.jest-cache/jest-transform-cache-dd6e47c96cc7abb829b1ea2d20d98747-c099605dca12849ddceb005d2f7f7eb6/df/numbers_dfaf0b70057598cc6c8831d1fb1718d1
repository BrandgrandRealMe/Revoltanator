e0681107873bbbd99256a4065f4ea806
'use strict';

/* istanbul ignore next */var cov_2hzim5xlr0 = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/numbers.js',
      hash = '6cf8b9506db35d07455b83f5030eb260bfc841c1',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/numbers.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 51
        }
      },
      '1': {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 32,
          column: 2
        }
      },
      '2': {
        start: {
          line: 43,
          column: 18
        },
        end: {
          line: 43,
          column: 34
        }
      },
      '3': {
        start: {
          line: 44,
          column: 19
        },
        end: {
          line: 44,
          column: 35
        }
      },
      '4': {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 51,
          column: 5
        }
      },
      '5': {
        start: {
          line: 53,
          column: 2
        },
        end: {
          line: 58,
          column: 5
        }
      },
      '6': {
        start: {
          line: 60,
          column: 2
        },
        end: {
          line: 64,
          column: 4
        }
      },
      '7': {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 61,
          column: 30
        }
      },
      '8': {
        start: {
          line: 76,
          column: 18
        },
        end: {
          line: 76,
          column: 34
        }
      },
      '9': {
        start: {
          line: 77,
          column: 19
        },
        end: {
          line: 77,
          column: 35
        }
      },
      '10': {
        start: {
          line: 79,
          column: 2
        },
        end: {
          line: 84,
          column: 5
        }
      },
      '11': {
        start: {
          line: 86,
          column: 2
        },
        end: {
          line: 91,
          column: 5
        }
      },
      '12': {
        start: {
          line: 93,
          column: 2
        },
        end: {
          line: 97,
          column: 4
        }
      },
      '13': {
        start: {
          line: 94,
          column: 26
        },
        end: {
          line: 94,
          column: 30
        }
      }
    },
    fnMap: {
      '0': {
        name: 'createFastStub',
        decl: {
          start: {
            line: 42,
            column: 9
          },
          end: {
            line: 42,
            column: 23
          }
        },
        loc: {
          start: {
            line: 42,
            column: 43
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 42
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 61,
            column: 20
          },
          end: {
            line: 61,
            column: 21
          }
        },
        loc: {
          start: {
            line: 61,
            column: 26
          },
          end: {
            line: 61,
            column: 30
          }
        },
        line: 61
      },
      '2': {
        name: 'createFastStubGeneric',
        decl: {
          start: {
            line: 75,
            column: 9
          },
          end: {
            line: 75,
            column: 30
          }
        },
        loc: {
          start: {
            line: 75,
            column: 50
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 75
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 94,
            column: 20
          },
          end: {
            line: 94,
            column: 21
          }
        },
        loc: {
          start: {
            line: 94,
            column: 26
          },
          end: {
            line: 94,
            column: 30
          }
        },
        line: 94
      }
    },
    branchMap: {},
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {},
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const createFunction = /* istanbul ignore next */(cov_2hzim5xlr0.s[0]++, require('generate-function'));

/* istanbul ignore next */cov_2hzim5xlr0.s[1]++;
module.exports = {
  doublebe: createFastStub(8, 'writeDoubleBE', 'readDoubleBE'),
  doublele: createFastStub(8, 'writeDoubleLE', 'readDoubleLE'),
  floatbe: createFastStub(4, 'writeFloatBE', 'readFloatBE'),
  floatle: createFastStub(4, 'writeFloatLE', 'readFloatLE'),
  int8: createFastStub(1, 'writeInt8', 'readInt8'),
  uint8: createFastStub(1, 'writeUInt8', 'readUInt8'),
  int16be: createFastStub(2, 'writeInt16BE', 'readInt16BE'),
  uint16be: createFastStub(2, 'writeUInt16BE', 'readUInt16BE'),
  int16le: createFastStub(2, 'writeInt16LE', 'readInt16LE'),
  uint16le: createFastStub(2, 'writeUInt16LE', 'readUInt16LE'),
  int32be: createFastStub(4, 'writeInt32BE', 'readInt32BE'),
  uint32be: createFastStub(4, 'writeUInt32BE', 'readUInt32BE'),
  int32le: createFastStub(4, 'writeInt32LE', 'readInt32LE'),
  uint32le: createFastStub(4, 'writeUInt32LE', 'readUInt32LE'),
  int24be: createFastStubGeneric(3, 'writeIntBE', 'readIntBE'),
  uint24be: createFastStubGeneric(3, 'writeUIntBE', 'readUIntBE'),
  int24le: createFastStubGeneric(3, 'writeIntLE', 'readIntLE'),
  uint24le: createFastStubGeneric(3, 'writeUIntLE', 'readUIntLE'),
  int40be: createFastStubGeneric(5, 'writeIntBE', 'readIntBE'),
  uint40be: createFastStubGeneric(5, 'writeUIntBE', 'readUIntBE'),
  int40le: createFastStubGeneric(5, 'writeIntLE', 'readIntLE'),
  uint40le: createFastStubGeneric(5, 'writeUIntLE', 'readUIntLE'),
  int48be: createFastStubGeneric(6, 'writeIntBE', 'readIntBE'),
  uint48be: createFastStubGeneric(6, 'writeUIntBE', 'readUIntBE'),
  int48le: createFastStubGeneric(6, 'writeIntLE', 'readIntLE'),
  uint48le: createFastStubGeneric(6, 'writeUIntLE', 'readUIntLE')
};

/**
 * Generate number type for provided the number of bytes.
 * @param {number} size
 * @param {string} write
 * @param {string} read
 * @returns {Object}
 * @private
 */
function createFastStub(size, write, read) {
  /* istanbul ignore next */cov_2hzim5xlr0.f[0]++;

  const genread = /* istanbul ignore next */(cov_2hzim5xlr0.s[2]++, createFunction());
  const genwrite = /* istanbul ignore next */(cov_2hzim5xlr0.s[3]++, createFunction());

  /* istanbul ignore next */cov_2hzim5xlr0.s[4]++;
  genread(`
    function decode_${read}(rstream) {
      decode_${read}.bytes = ${genread.formats.d(size)};
      return rstream.${read}()
    }
  `);

  /* istanbul ignore next */cov_2hzim5xlr0.s[5]++;
  genwrite(`
    function encode_${write}(value, wstream) {
      wstream.${write}(value);
      encode_${write}.bytes = ${genread.formats.d(size)};
    }
  `);

  /* istanbul ignore next */cov_2hzim5xlr0.s[6]++;
  return {
    encodingLength: () => {
      /* istanbul ignore next */cov_2hzim5xlr0.f[1]++;
      cov_2hzim5xlr0.s[7]++;
      return size;
    },
    encode: genwrite.toFunction(),
    decode: genread.toFunction()
  };
}

/**
 * Generate number type for provided the number of bytes.
 * @param {number} size
 * @param {string} write
 * @param {string} read
 * @returns {Object}
 * @private
 */
function createFastStubGeneric(size, write, read) {
  /* istanbul ignore next */cov_2hzim5xlr0.f[2]++;

  const genread = /* istanbul ignore next */(cov_2hzim5xlr0.s[8]++, createFunction());
  const genwrite = /* istanbul ignore next */(cov_2hzim5xlr0.s[9]++, createFunction());

  /* istanbul ignore next */cov_2hzim5xlr0.s[10]++;
  genread(`
    function decode_${read}(rstream) {
      decode_${read}.bytes = ${genread.formats.d(size)};
      return rstream.${read}(${genread.formats.d(size)})
    }
  `);

  /* istanbul ignore next */cov_2hzim5xlr0.s[11]++;
  genwrite(`
    function encode_${write}(value, wstream) {
      wstream.${write}(value, ${genread.formats.d(size)});
      encode_${write}.bytes = ${genread.formats.d(size)};
    }
  `);

  /* istanbul ignore next */cov_2hzim5xlr0.s[12]++;
  return {
    encodingLength: () => {
      /* istanbul ignore next */cov_2hzim5xlr0.f[3]++;
      cov_2hzim5xlr0.s[13]++;
      return size;
    },
    encode: genwrite.toFunction(),
    decode: genread.toFunction()
  };
}