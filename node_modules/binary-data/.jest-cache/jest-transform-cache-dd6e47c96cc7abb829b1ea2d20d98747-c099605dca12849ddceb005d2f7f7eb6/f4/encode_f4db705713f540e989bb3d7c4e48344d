e3fdae2432c5334e75bd584d0d9932b7
'use strict';

const BinaryStream = require('lib/binary-stream');

describe('encode fixed', () => {
  const suites = [
  /* Type, size, test value */
  ['DoubleBE', 8, Number.MAX_SAFE_INTEGER / 2], ['DoubleLE', 8, Number.MAX_SAFE_INTEGER / 2], ['FloatBE', 4, 0.5], ['FloatLE', 4, 0.5], ['Int8', 1, 127], ['UInt8', 1, 255], ['Int16BE', 2, 0x7fff - 1], ['Int16LE', 2, 0x7fff - 1], ['UInt16BE', 2, 0xffff - 1], ['UInt16LE', 2, 0xffff - 1], ['Int32BE', 4, 0x7fffffff - 1], ['Int32LE', 4, 0x7fffffff - 1], ['UInt32BE', 4, 0xffffffff - 1], ['UInt32LE', 4, 0xffffffff - 1]];

  for (const suite of suites) {
    const method = `write${suite[0]}`;
    const read = `read${suite[0]}`;

    // eslint-disable-next-line no-loop-func
    test(method, () => {
      const stream = new BinaryStream();
      stream[method](suite[2]);
      const buf = stream.slice();

      expect(stream.length).toBe(suite[1]);
      expect(buf[read](0)).toBe(suite[2]);
    });
  }
});

describe('encode custom', () => {
  const suites = [
  /* Type, size, test value */
  ['IntBE', 3, 0x7fffff - 1], ['UIntBE', 3, 0xffffff - 1], ['IntLE', 3, 0x7fffff - 1], ['UIntLE', 3, 0xffffff - 1]];

  for (const suite of suites) {
    const method = `write${suite[0]}`;
    const read = `read${suite[0]}`;

    // eslint-disable-next-line no-loop-func
    test(method, () => {
      const stream = new BinaryStream();
      stream[method](suite[2], suite[1]);
      const buf = stream.slice();

      expect(stream.length).toBe(suite[1]);
      expect(buf[read](0, suite[1])).toBe(suite[2]);
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuY29kZS5qcyJdLCJuYW1lcyI6WyJCaW5hcnlTdHJlYW0iLCJyZXF1aXJlIiwiZGVzY3JpYmUiLCJzdWl0ZXMiLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwic3VpdGUiLCJtZXRob2QiLCJyZWFkIiwidGVzdCIsInN0cmVhbSIsImJ1ZiIsInNsaWNlIiwiZXhwZWN0IiwibGVuZ3RoIiwidG9CZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsZUFBZUMsUUFBUSxtQkFBUixDQUFyQjs7QUFFQUMsU0FBUyxjQUFULEVBQXlCLE1BQU07QUFDN0IsUUFBTUMsU0FBUztBQUNiO0FBQ0EsR0FBQyxVQUFELEVBQWEsQ0FBYixFQUFnQkMsT0FBT0MsZ0JBQVAsR0FBMEIsQ0FBMUMsQ0FGYSxFQUdiLENBQUMsVUFBRCxFQUFhLENBQWIsRUFBZ0JELE9BQU9DLGdCQUFQLEdBQTBCLENBQTFDLENBSGEsRUFLYixDQUFDLFNBQUQsRUFBWSxDQUFaLEVBQWUsR0FBZixDQUxhLEVBTWIsQ0FBQyxTQUFELEVBQVksQ0FBWixFQUFlLEdBQWYsQ0FOYSxFQVFiLENBQUMsTUFBRCxFQUFTLENBQVQsRUFBWSxHQUFaLENBUmEsRUFTYixDQUFDLE9BQUQsRUFBVSxDQUFWLEVBQWEsR0FBYixDQVRhLEVBV2IsQ0FBQyxTQUFELEVBQVksQ0FBWixFQUFlLFNBQVMsQ0FBeEIsQ0FYYSxFQVliLENBQUMsU0FBRCxFQUFZLENBQVosRUFBZSxTQUFTLENBQXhCLENBWmEsRUFjYixDQUFDLFVBQUQsRUFBYSxDQUFiLEVBQWdCLFNBQVMsQ0FBekIsQ0FkYSxFQWViLENBQUMsVUFBRCxFQUFhLENBQWIsRUFBZ0IsU0FBUyxDQUF6QixDQWZhLEVBaUJiLENBQUMsU0FBRCxFQUFZLENBQVosRUFBZSxhQUFhLENBQTVCLENBakJhLEVBa0JiLENBQUMsU0FBRCxFQUFZLENBQVosRUFBZSxhQUFhLENBQTVCLENBbEJhLEVBb0JiLENBQUMsVUFBRCxFQUFhLENBQWIsRUFBZ0IsYUFBYSxDQUE3QixDQXBCYSxFQXFCYixDQUFDLFVBQUQsRUFBYSxDQUFiLEVBQWdCLGFBQWEsQ0FBN0IsQ0FyQmEsQ0FBZjs7QUF3QkEsT0FBSyxNQUFNQyxLQUFYLElBQW9CSCxNQUFwQixFQUE0QjtBQUMxQixVQUFNSSxTQUFVLFFBQU9ELE1BQU0sQ0FBTixDQUFTLEVBQWhDO0FBQ0EsVUFBTUUsT0FBUSxPQUFNRixNQUFNLENBQU4sQ0FBUyxFQUE3Qjs7QUFFQTtBQUNBRyxTQUFLRixNQUFMLEVBQWEsTUFBTTtBQUNqQixZQUFNRyxTQUFTLElBQUlWLFlBQUosRUFBZjtBQUNBVSxhQUFPSCxNQUFQLEVBQWVELE1BQU0sQ0FBTixDQUFmO0FBQ0EsWUFBTUssTUFBTUQsT0FBT0UsS0FBUCxFQUFaOztBQUVBQyxhQUFPSCxPQUFPSSxNQUFkLEVBQXNCQyxJQUF0QixDQUEyQlQsTUFBTSxDQUFOLENBQTNCO0FBQ0FPLGFBQU9GLElBQUlILElBQUosRUFBVSxDQUFWLENBQVAsRUFBcUJPLElBQXJCLENBQTBCVCxNQUFNLENBQU4sQ0FBMUI7QUFDRCxLQVBEO0FBUUQ7QUFDRixDQXZDRDs7QUF5Q0FKLFNBQVMsZUFBVCxFQUEwQixNQUFNO0FBQzlCLFFBQU1DLFNBQVM7QUFDYjtBQUNBLEdBQUMsT0FBRCxFQUFVLENBQVYsRUFBYSxXQUFXLENBQXhCLENBRmEsRUFHYixDQUFDLFFBQUQsRUFBVyxDQUFYLEVBQWMsV0FBVyxDQUF6QixDQUhhLEVBS2IsQ0FBQyxPQUFELEVBQVUsQ0FBVixFQUFhLFdBQVcsQ0FBeEIsQ0FMYSxFQU1iLENBQUMsUUFBRCxFQUFXLENBQVgsRUFBYyxXQUFXLENBQXpCLENBTmEsQ0FBZjs7QUFTQSxPQUFLLE1BQU1HLEtBQVgsSUFBb0JILE1BQXBCLEVBQTRCO0FBQzFCLFVBQU1JLFNBQVUsUUFBT0QsTUFBTSxDQUFOLENBQVMsRUFBaEM7QUFDQSxVQUFNRSxPQUFRLE9BQU1GLE1BQU0sQ0FBTixDQUFTLEVBQTdCOztBQUVBO0FBQ0FHLFNBQUtGLE1BQUwsRUFBYSxNQUFNO0FBQ2pCLFlBQU1HLFNBQVMsSUFBSVYsWUFBSixFQUFmO0FBQ0FVLGFBQU9ILE1BQVAsRUFBZUQsTUFBTSxDQUFOLENBQWYsRUFBeUJBLE1BQU0sQ0FBTixDQUF6QjtBQUNBLFlBQU1LLE1BQU1ELE9BQU9FLEtBQVAsRUFBWjs7QUFFQUMsYUFBT0gsT0FBT0ksTUFBZCxFQUFzQkMsSUFBdEIsQ0FBMkJULE1BQU0sQ0FBTixDQUEzQjtBQUNBTyxhQUFPRixJQUFJSCxJQUFKLEVBQVUsQ0FBVixFQUFhRixNQUFNLENBQU4sQ0FBYixDQUFQLEVBQStCUyxJQUEvQixDQUFvQ1QsTUFBTSxDQUFOLENBQXBDO0FBQ0QsS0FQRDtBQVFEO0FBQ0YsQ0F4QkQiLCJmaWxlIjoiZW5jb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBCaW5hcnlTdHJlYW0gPSByZXF1aXJlKCdsaWIvYmluYXJ5LXN0cmVhbScpO1xuXG5kZXNjcmliZSgnZW5jb2RlIGZpeGVkJywgKCkgPT4ge1xuICBjb25zdCBzdWl0ZXMgPSBbXG4gICAgLyogVHlwZSwgc2l6ZSwgdGVzdCB2YWx1ZSAqL1xuICAgIFsnRG91YmxlQkUnLCA4LCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAvIDJdLFxuICAgIFsnRG91YmxlTEUnLCA4LCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAvIDJdLFxuXG4gICAgWydGbG9hdEJFJywgNCwgMC41XSxcbiAgICBbJ0Zsb2F0TEUnLCA0LCAwLjVdLFxuXG4gICAgWydJbnQ4JywgMSwgMTI3XSxcbiAgICBbJ1VJbnQ4JywgMSwgMjU1XSxcblxuICAgIFsnSW50MTZCRScsIDIsIDB4N2ZmZiAtIDFdLFxuICAgIFsnSW50MTZMRScsIDIsIDB4N2ZmZiAtIDFdLFxuXG4gICAgWydVSW50MTZCRScsIDIsIDB4ZmZmZiAtIDFdLFxuICAgIFsnVUludDE2TEUnLCAyLCAweGZmZmYgLSAxXSxcblxuICAgIFsnSW50MzJCRScsIDQsIDB4N2ZmZmZmZmYgLSAxXSxcbiAgICBbJ0ludDMyTEUnLCA0LCAweDdmZmZmZmZmIC0gMV0sXG5cbiAgICBbJ1VJbnQzMkJFJywgNCwgMHhmZmZmZmZmZiAtIDFdLFxuICAgIFsnVUludDMyTEUnLCA0LCAweGZmZmZmZmZmIC0gMV0sXG4gIF07XG5cbiAgZm9yIChjb25zdCBzdWl0ZSBvZiBzdWl0ZXMpIHtcbiAgICBjb25zdCBtZXRob2QgPSBgd3JpdGUke3N1aXRlWzBdfWA7XG4gICAgY29uc3QgcmVhZCA9IGByZWFkJHtzdWl0ZVswXX1gO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgIHRlc3QobWV0aG9kLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdHJlYW0gPSBuZXcgQmluYXJ5U3RyZWFtKCk7XG4gICAgICBzdHJlYW1bbWV0aG9kXShzdWl0ZVsyXSk7XG4gICAgICBjb25zdCBidWYgPSBzdHJlYW0uc2xpY2UoKTtcblxuICAgICAgZXhwZWN0KHN0cmVhbS5sZW5ndGgpLnRvQmUoc3VpdGVbMV0pO1xuICAgICAgZXhwZWN0KGJ1ZltyZWFkXSgwKSkudG9CZShzdWl0ZVsyXSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5kZXNjcmliZSgnZW5jb2RlIGN1c3RvbScsICgpID0+IHtcbiAgY29uc3Qgc3VpdGVzID0gW1xuICAgIC8qIFR5cGUsIHNpemUsIHRlc3QgdmFsdWUgKi9cbiAgICBbJ0ludEJFJywgMywgMHg3ZmZmZmYgLSAxXSxcbiAgICBbJ1VJbnRCRScsIDMsIDB4ZmZmZmZmIC0gMV0sXG5cbiAgICBbJ0ludExFJywgMywgMHg3ZmZmZmYgLSAxXSxcbiAgICBbJ1VJbnRMRScsIDMsIDB4ZmZmZmZmIC0gMV0sXG4gIF07XG5cbiAgZm9yIChjb25zdCBzdWl0ZSBvZiBzdWl0ZXMpIHtcbiAgICBjb25zdCBtZXRob2QgPSBgd3JpdGUke3N1aXRlWzBdfWA7XG4gICAgY29uc3QgcmVhZCA9IGByZWFkJHtzdWl0ZVswXX1gO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgIHRlc3QobWV0aG9kLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdHJlYW0gPSBuZXcgQmluYXJ5U3RyZWFtKCk7XG4gICAgICBzdHJlYW1bbWV0aG9kXShzdWl0ZVsyXSwgc3VpdGVbMV0pO1xuICAgICAgY29uc3QgYnVmID0gc3RyZWFtLnNsaWNlKCk7XG5cbiAgICAgIGV4cGVjdChzdHJlYW0ubGVuZ3RoKS50b0JlKHN1aXRlWzFdKTtcbiAgICAgIGV4cGVjdChidWZbcmVhZF0oMCwgc3VpdGVbMV0pKS50b0JlKHN1aXRlWzJdKTtcbiAgICB9KTtcbiAgfVxufSk7XG4iXX0=