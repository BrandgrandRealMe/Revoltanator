{"version":3,"sources":["linked-list.js"],"names":["LinkedList","require","test","buf1","Buffer","from","buf2","list","push","expect","length","toEqual","count","first","last","head","next","tail","unshift","shift","buf3","sublist","slice","toBe","start","buffer"],"mappings":"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","file":"linked-list.js","sourcesContent":["'use strict';\n\nconst LinkedList = require('internal/linked-list');\n\ntest('push(buf)', () => {\n  const buf1 = Buffer.from([1, 2, 3, 4, 5]);\n  const buf2 = Buffer.from([6, 7, 8, 9, 10]);\n  const list = new LinkedList();\n\n  list.push(buf1);\n  list.push(buf2);\n\n  expect(list.length).toEqual(buf1.length + buf2.length);\n  expect(list.count).toEqual(2);\n  expect(list.first).toEqual(buf1);\n  expect(list.last).toEqual(buf2);\n  expect(list.head.next).toEqual(list.tail);\n});\n\ntest('unshift(buf)', () => {\n  const buf1 = Buffer.from([1, 2, 3, 4, 5]);\n  const buf2 = Buffer.from([6, 7, 8, 9, 10]);\n  const list = new LinkedList();\n\n  list.unshift(buf1);\n  list.unshift(buf2);\n\n  expect(list.length).toEqual(buf1.length + buf2.length);\n  expect(list.count).toEqual(2);\n  expect(list.first).toEqual(buf2);\n  expect(list.last).toEqual(buf1);\n  expect(list.head.next).toEqual(list.tail);\n});\n\ntest('shift(buf)', () => {\n  const buf1 = Buffer.from([1, 2, 3, 4, 5]);\n  const buf2 = Buffer.from([6, 7, 8, 9, 10]);\n  const list = new LinkedList();\n\n  list.push(buf1);\n  list.push(buf2);\n\n  expect(list.shift()).toEqual(buf1);\n  expect(list.count).toEqual(1);\n  expect(list.length).toEqual(buf2.length);\n  expect(list.first).toEqual(buf2);\n  expect(list.last).toEqual(buf2);\n\n  expect(list.shift()).toEqual(buf2);\n  expect(list.count).toEqual(0);\n  expect(list.length).toEqual(0);\n  expect(list.first).toEqual(null);\n  expect(list.last).toEqual(null);\n});\n\ntest('slice() the whole chunk', () => {\n  const list = new LinkedList();\n  const buf1 = Buffer.from([1, 2, 3, 4]);\n  const buf2 = Buffer.from([5, 6, 7, 8]);\n  const buf3 = Buffer.from([9, 10, 11, 12]);\n\n  list.push(buf1);\n  list.push(buf2);\n  list.push(buf3);\n\n  const sublist = list.slice(0, buf1.length);\n  expect(sublist.length).toEqual(buf1.length);\n  expect(sublist.count).toEqual(1);\n  expect(sublist.first).toBe(buf1);\n  expect(sublist.last).toBe(buf1);\n});\n\ntest('slice() first subset of a chunk', () => {\n  const list = new LinkedList();\n  const buf1 = Buffer.from([1, 2, 3, 4]);\n  const buf2 = Buffer.from([5, 6, 7, 8]);\n  const buf3 = Buffer.from([9, 10, 11, 12]);\n\n  list.push(buf1);\n  list.push(buf2);\n  list.push(buf3);\n\n  const length = buf2.length - 1;\n  const sublist = list.slice(buf1.length, buf1.length + length);\n\n  expect(sublist.length).toEqual(length);\n  expect(sublist.count).toEqual(1);\n  expect(sublist.first).toEqual(buf2.slice(0, length));\n  expect(sublist.last).toEqual(buf2.slice(0, length));\n});\n\ntest('slice() last subset of a chunk', () => {\n  const list = new LinkedList();\n  const buf1 = Buffer.from([1, 2, 3, 4]);\n  const buf2 = Buffer.from([5, 6, 7, 8]);\n  const buf3 = Buffer.from([9, 10, 11, 12]);\n\n  list.push(buf1);\n  list.push(buf2);\n  list.push(buf3);\n\n  const length = buf2.length - 1;\n  const start = buf1.length + 1;\n  const sublist = list.slice(start, start + length);\n\n  expect(sublist.length).toEqual(length);\n  expect(sublist.count).toEqual(1);\n  expect(sublist.first).toEqual(buf2.slice(1, buf2.length));\n  expect(sublist.last).toEqual(buf2.slice(1, buf2.length));\n});\n\ntest('slice() multiple chunks by borders', () => {\n  const list = new LinkedList();\n  const buf1 = Buffer.from([1, 2, 3, 4]);\n  const buf2 = Buffer.from([5, 6, 7, 8]);\n  const buf3 = Buffer.from([9, 10, 11, 12]);\n\n  list.push(buf1);\n  list.push(buf2);\n  list.push(buf3);\n\n  const length = buf1.length + buf2.length;\n  const sublist = list.slice(0, length);\n\n  expect(sublist.length).toEqual(length);\n  expect(sublist.count).toEqual(2);\n  expect(sublist.first).toBe(buf1);\n  expect(sublist.last).toBe(buf2);\n});\n\ntest('slice() subset of multiple chunks', () => {\n  const list = new LinkedList();\n  const buf1 = Buffer.from([1, 2, 3, 4]);\n  const buf2 = Buffer.from([5, 6, 7, 8]);\n  const buf3 = Buffer.from([9, 10, 11, 12]);\n\n  list.push(buf1);\n  list.push(buf2);\n  list.push(buf3);\n\n  const length = 4;\n  const start = 2;\n  const sublist = list.slice(start, start + length);\n\n  expect(sublist.length).toEqual(length);\n  expect(sublist.count).toEqual(2);\n  expect(sublist.first).toEqual(buf1.slice(2));\n  expect(sublist.last).toEqual(buf2.slice(0, 2));\n});\n\ntest('slice() subset of multiple chunks with the whole chunk', () => {\n  const list = new LinkedList();\n  const buf1 = Buffer.from([1, 2, 3, 4]);\n  const buf2 = Buffer.from([5, 6, 7, 8]);\n  const buf3 = Buffer.from([9, 10, 11, 12]);\n\n  list.push(buf1);\n  list.push(buf2);\n  list.push(buf3);\n\n  const length = 8;\n  const start = 2;\n  const sublist = list.slice(start, start + length);\n\n  expect(sublist.length).toEqual(length);\n  expect(sublist.count).toEqual(3);\n  expect(sublist.first).toEqual(buf1.slice(2));\n  expect(sublist.head.next.buffer).toBe(buf2);\n  expect(sublist.last).toEqual(buf3.slice(0, 2));\n});\n\ntest('slice() duplicate', () => {\n  const list = new LinkedList();\n  const buf1 = Buffer.from([1, 2]);\n  const buf2 = Buffer.from([5, 6, 7]);\n  const buf3 = Buffer.from([9, 10, 11, 12]);\n\n  list.push(buf1);\n  list.push(buf2);\n  list.push(buf3);\n\n  const length = buf1.length + buf2.length + buf3.length;\n  const sublist = list.slice(0, length);\n\n  expect(sublist.length).toEqual(list.length);\n  expect(sublist.count).toEqual(list.count);\n  expect(sublist.first).toBe(list.first);\n  expect(sublist.head.next.buffer).toBe(buf2);\n  expect(sublist.last).toBe(list.last);\n});\n"]}