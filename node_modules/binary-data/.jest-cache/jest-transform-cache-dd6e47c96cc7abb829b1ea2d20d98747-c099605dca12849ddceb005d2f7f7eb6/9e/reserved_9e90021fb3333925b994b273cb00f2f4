8865e123d090fe16b177522d77379223
'use strict';

/* istanbul ignore next */var cov_k0q7tey60 = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/reserved.js',
      hash = '0934630486bdc24b0bdd05aee7aac7f8527219ad',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/reserved.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 25
        },
        end: {
          line: 3,
          column: 46
        }
      },
      '1': {
        start: {
          line: 4,
          column: 25
        },
        end: {
          line: 4,
          column: 46
        }
      },
      '2': {
        start: {
          line: 5,
          column: 33
        },
        end: {
          line: 5,
          column: 63
        }
      },
      '3': {
        start: {
          line: 6,
          column: 31
        },
        end: {
          line: 6,
          column: 50
        }
      },
      '4': {
        start: {
          line: 7,
          column: 16
        },
        end: {
          line: 7,
          column: 43
        }
      },
      '5': {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 41
        }
      },
      '6': {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 26
        }
      },
      '7': {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 21,
          column: 3
        }
      },
      '8': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 46
        }
      },
      '9': {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 25,
          column: 3
        }
      },
      '10': {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 78
        }
      },
      '11': {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 32,
          column: 4
        }
      },
      '12': {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 40
        }
      },
      '13': {
        start: {
          line: 43,
          column: 18
        },
        end: {
          line: 43,
          column: 57
        }
      },
      '14': {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 47
        }
      },
      '15': {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 28
        }
      },
      '16': {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 33
        }
      },
      '17': {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 40
        }
      },
      '18': {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 21
        }
      },
      '19': {
        start: {
          line: 60,
          column: 18
        },
        end: {
          line: 60,
          column: 57
        }
      },
      '20': {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      '21': {
        start: {
          line: 63,
          column: 6
        },
        end: {
          line: 63,
          column: 30
        }
      },
      '22': {
        start: {
          line: 64,
          column: 6
        },
        end: {
          line: 64,
          column: 13
        }
      },
      '23': {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      '24': {
        start: {
          line: 68,
          column: 6
        },
        end: {
          line: 68,
          column: 43
        }
      },
      '25': {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 33
        }
      },
      '26': {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 28
        }
      },
      '27': {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 82,
          column: 21
        }
      },
      '28': {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 40
        }
      },
      '29': {
        start: {
          line: 87,
          column: 18
        },
        end: {
          line: 87,
          column: 57
        }
      },
      '30': {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      '31': {
        start: {
          line: 90,
          column: 6
        },
        end: {
          line: 90,
          column: 30
        }
      },
      '32': {
        start: {
          line: 91,
          column: 6
        },
        end: {
          line: 91,
          column: 13
        }
      },
      '33': {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 96,
          column: 5
        }
      },
      '34': {
        start: {
          line: 95,
          column: 6
        },
        end: {
          line: 95,
          column: 46
        }
      },
      '35': {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 98,
          column: 33
        }
      },
      '36': {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 99,
          column: 28
        }
      }
    },
    fnMap: {
      '0': {
        name: 'reserved',
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 17
          }
        },
        loc: {
          start: {
            line: 18,
            column: 34
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 18
      },
      '1': {
        name: 'encodingLength',
        decl: {
          start: {
            line: 39,
            column: 11
          },
          end: {
            line: 39,
            column: 25
          }
        },
        loc: {
          start: {
            line: 39,
            column: 33
          },
          end: {
            line: 49,
            column: 3
          }
        },
        line: 39
      },
      '2': {
        name: 'decode',
        decl: {
          start: {
            line: 55,
            column: 11
          },
          end: {
            line: 55,
            column: 17
          }
        },
        loc: {
          start: {
            line: 55,
            column: 27
          },
          end: {
            line: 73,
            column: 3
          }
        },
        line: 55
      },
      '3': {
        name: 'encode',
        decl: {
          start: {
            line: 81,
            column: 11
          },
          end: {
            line: 81,
            column: 17
          }
        },
        loc: {
          start: {
            line: 81,
            column: 34
          },
          end: {
            line: 100,
            column: 3
          }
        },
        line: 81
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 18,
            column: 32
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 18,
            column: 32
          }
        }],
        line: 18
      },
      '1': {
        loc: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        }, {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        }],
        line: 19
      },
      '2': {
        loc: {
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        }, {
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        }],
        line: 23
      },
      '3': {
        loc: {
          start: {
            line: 23,
            column: 6
          },
          end: {
            line: 23,
            column: 50
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 23,
            column: 6
          },
          end: {
            line: 23,
            column: 29
          }
        }, {
          start: {
            line: 23,
            column: 33
          },
          end: {
            line: 23,
            column: 50
          }
        }],
        line: 23
      },
      '4': {
        loc: {
          start: {
            line: 43,
            column: 18
          },
          end: {
            line: 43,
            column: 57
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 43,
            column: 37
          },
          end: {
            line: 43,
            column: 50
          }
        }, {
          start: {
            line: 43,
            column: 53
          },
          end: {
            line: 43,
            column: 57
          }
        }],
        line: 43
      },
      '5': {
        loc: {
          start: {
            line: 60,
            column: 18
          },
          end: {
            line: 60,
            column: 57
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 60,
            column: 37
          },
          end: {
            line: 60,
            column: 50
          }
        }, {
          start: {
            line: 60,
            column: 53
          },
          end: {
            line: 60,
            column: 57
          }
        }],
        line: 60
      },
      '6': {
        loc: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        }, {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        }],
        line: 62
      },
      '7': {
        loc: {
          start: {
            line: 87,
            column: 18
          },
          end: {
            line: 87,
            column: 57
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 87,
            column: 37
          },
          end: {
            line: 87,
            column: 50
          }
        }, {
          start: {
            line: 87,
            column: 53
          },
          end: {
            line: 87,
            column: 57
          }
        }],
        line: 87
      },
      '8': {
        loc: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        }, {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        }],
        line: 89
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const { decodeCommon } = /* istanbul ignore next */(cov_k0q7tey60.s[0]++, require('lib/decode'));
const { encodeCommon } = /* istanbul ignore next */(cov_k0q7tey60.s[1]++, require('lib/encode'));
const { encodingLengthCommon } = /* istanbul ignore next */(cov_k0q7tey60.s[2]++, require('lib/encoding-length'));
const { isType, isFunction } = /* istanbul ignore next */(cov_k0q7tey60.s[3]++, require('lib/util'));
const symbols = /* istanbul ignore next */(cov_k0q7tey60.s[4]++, require('internal/symbols'));
const Metadata = /* istanbul ignore next */(cov_k0q7tey60.s[5]++, require('internal/meta'));

/* istanbul ignore next */cov_k0q7tey60.s[6]++;
module.exports = reserved;

/**
 * Type for reserved data.
 * @param {Object} type Any builtin type or schema.
 * @param {number} size The number of reserved items.
 * @returns {Object}
 */
function reserved(type, size = /* istanbul ignore next */(cov_k0q7tey60.b[0][0]++, 1)) {
  /* istanbul ignore next */cov_k0q7tey60.f[0]++;
  cov_k0q7tey60.s[7]++;

  if (!isType(type)) {
    /* istanbul ignore next */cov_k0q7tey60.b[1][0]++;
    cov_k0q7tey60.s[8]++;

    throw new TypeError('Invalid data type.');
  } else /* istanbul ignore next */{
    cov_k0q7tey60.b[1][1]++;
  }

  cov_k0q7tey60.s[9]++;
  if ( /* istanbul ignore next */(cov_k0q7tey60.b[3][0]++, !Number.isInteger(size)) && /* istanbul ignore next */(cov_k0q7tey60.b[3][1]++, !isFunction(size))) {
    /* istanbul ignore next */cov_k0q7tey60.b[2][0]++;
    cov_k0q7tey60.s[10]++;

    throw new TypeError('Argument #2 should be a valid integer or function.');
  } else /* istanbul ignore next */{
    cov_k0q7tey60.b[2][1]++;
  }

  cov_k0q7tey60.s[11]++;
  return {
    [symbols.skip]: true,
    encodingLength,
    decode,
    encode
  };

  /**
   * Get the number of bytes to encode value.
   * @param {any} value
   * @returns {number}
   */
  function encodingLength(value) {
    /* istanbul ignore next */cov_k0q7tey60.f[1]++;

    // eslint-disable-next-line no-invalid-this
    const context = /* istanbul ignore next */(cov_k0q7tey60.s[12]++, Metadata.clone(this));

    const count = /* istanbul ignore next */(cov_k0q7tey60.s[13]++, isFunction(size) ? /* istanbul ignore next */(cov_k0q7tey60.b[4][0]++, size(context)) : /* istanbul ignore next */(cov_k0q7tey60.b[4][1]++, size));

    /* istanbul ignore next */cov_k0q7tey60.s[14]++;
    encodingLengthCommon(value, type, context);
    /* istanbul ignore next */cov_k0q7tey60.s[15]++;
    Metadata.clean(context);

    /* istanbul ignore next */cov_k0q7tey60.s[16]++;
    return context.bytes * count;
  }

  /**
   * Silently decode items.
   * @param {DecodeStream} rstream
   */
  function decode(rstream) {
    /* istanbul ignore next */cov_k0q7tey60.f[2]++;

    // eslint-disable-next-line no-invalid-this
    const context = /* istanbul ignore next */(cov_k0q7tey60.s[17]++, Metadata.clone(this));
    /* istanbul ignore next */cov_k0q7tey60.s[18]++;
    decode.bytes = 0;

    const count = /* istanbul ignore next */(cov_k0q7tey60.s[19]++, isFunction(size) ? /* istanbul ignore next */(cov_k0q7tey60.b[5][0]++, size(context)) : /* istanbul ignore next */(cov_k0q7tey60.b[5][1]++, size));

    /* istanbul ignore next */cov_k0q7tey60.s[20]++;
    if (count === 0) {
      /* istanbul ignore next */cov_k0q7tey60.b[6][0]++;
      cov_k0q7tey60.s[21]++;

      Metadata.clean(context);
      /* istanbul ignore next */cov_k0q7tey60.s[22]++;
      return;
    } else /* istanbul ignore next */{
      cov_k0q7tey60.b[6][1]++;
    }

    cov_k0q7tey60.s[23]++;
    for (let i = count; i > 0; i -= 1) {
      /* istanbul ignore next */cov_k0q7tey60.s[24]++;

      decodeCommon(rstream, type, context);
    }

    /* istanbul ignore next */cov_k0q7tey60.s[25]++;
    decode.bytes = context.bytes;
    /* istanbul ignore next */cov_k0q7tey60.s[26]++;
    Metadata.clean(context);
  }

  /**
   * Encode reserved data.
   * Fill with zeros the number of required bytes.
   * @param {any} value
   * @param {EncodeStream} wstream
   */
  function encode(value, wstream) {
    /* istanbul ignore next */cov_k0q7tey60.f[3]++;
    cov_k0q7tey60.s[27]++;

    encode.bytes = 0;

    // eslint-disable-next-line no-invalid-this
    const context = /* istanbul ignore next */(cov_k0q7tey60.s[28]++, Metadata.clone(this));

    const count = /* istanbul ignore next */(cov_k0q7tey60.s[29]++, isFunction(size) ? /* istanbul ignore next */(cov_k0q7tey60.b[7][0]++, size(context)) : /* istanbul ignore next */(cov_k0q7tey60.b[7][1]++, size));

    /* istanbul ignore next */cov_k0q7tey60.s[30]++;
    if (count === 0) {
      /* istanbul ignore next */cov_k0q7tey60.b[8][0]++;
      cov_k0q7tey60.s[31]++;

      Metadata.clean(context);
      /* istanbul ignore next */cov_k0q7tey60.s[32]++;
      return;
    } else /* istanbul ignore next */{
      cov_k0q7tey60.b[8][1]++;
    }

    cov_k0q7tey60.s[33]++;
    for (let i = count; i > 0; i -= 1) {
      /* istanbul ignore next */cov_k0q7tey60.s[34]++;

      encodeCommon(0, wstream, type, context);
    }

    /* istanbul ignore next */cov_k0q7tey60.s[35]++;
    encode.bytes = context.bytes;
    /* istanbul ignore next */cov_k0q7tey60.s[36]++;
    Metadata.clean(context);
  }
}