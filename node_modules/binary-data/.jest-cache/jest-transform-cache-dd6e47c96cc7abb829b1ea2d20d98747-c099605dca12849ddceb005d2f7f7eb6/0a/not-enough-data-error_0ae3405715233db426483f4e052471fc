9c6542861a8ee1f47b51de340c3697e2
'use strict';

/**
 * Represent an unexpected end of decode stream.
 */

/* istanbul ignore next */var cov_2m0z8wbfl1 = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/not-enough-data-error.js',
      hash = '0624dbbbf65242503ad732fffae89790737eafec',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/not-enough-data-error.js',
    statementMap: {
      '0': {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 18,
          column: 2
        }
      },
      '1': {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 80
        }
      },
      '2': {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 19
        }
      },
      '3': {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 37
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 12,
            column: 3
          }
        },
        loc: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 17,
            column: 3
          }
        },
        line: 12
      }
    },
    branchMap: {},
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    f: {
      '0': 0
    },
    b: {},
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

cov_2m0z8wbfl1.s[0]++;
module.exports = class NotEnoughDataError extends Error {
  /**
   * @class NotEnoughDataError
   * @param {number} expected The number of expected bytes.
   * @param {number} received The number of received bytes.
   */
  constructor(expected, received) {
    /* istanbul ignore next */cov_2m0z8wbfl1.f[0]++;

    const message = /* istanbul ignore next */(cov_2m0z8wbfl1.s[1]++, `requested ${expected} bytes but only ${received} available`);

    /* istanbul ignore next */cov_2m0z8wbfl1.s[2]++;
    super(message);
    /* istanbul ignore next */cov_2m0z8wbfl1.s[3]++;
    this.name = 'NotEnoughDataError';
  }
};