6416f0b38ba2fd06c3952cae9fc94a4c
'use strict';

/* istanbul ignore next */var cov_1z3b8bbzbd = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/binary-stream.js',
      hash = 'cc3da722223fbe28f06dc8608daff4d5811117e6',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/binary-stream.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 22
        },
        end: {
          line: 3,
          column: 39
        }
      },
      '1': {
        start: {
          line: 4,
          column: 23
        },
        end: {
          line: 4,
          column: 51
        }
      },
      '2': {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 50
        }
      },
      '3': {
        start: {
          line: 6,
          column: 27
        },
        end: {
          line: 6,
          column: 63
        }
      },
      '4': {
        start: {
          line: 8,
          column: 16
        },
        end: {
          line: 8,
          column: 32
        }
      },
      '5': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 19
        }
      },
      '6': {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 37
        }
      },
      '7': {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 25
        }
      },
      '8': {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 30
        }
      },
      '9': {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 28
        }
      },
      '10': {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 51,
          column: 30
        }
      },
      '11': {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 41
        }
      },
      '12': {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 31
        }
      },
      '13': {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 77,
          column: 54
        }
      },
      '14': {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 45
        }
      },
      '15': {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 98,
          column: 34
        }
      },
      '16': {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 35
        }
      },
      '17': {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 23
        }
      },
      '18': {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 15
        }
      },
      '19': {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 111,
          column: 23
        }
      },
      '20': {
        start: {
          line: 115,
          column: 25
        },
        end: {
          line: 130,
          column: 1
        }
      },
      '21': {
        start: {
          line: 132,
          column: 24
        },
        end: {
          line: 132,
          column: 78
        }
      },
      '22': {
        start: {
          line: 134,
          column: 0
        },
        end: {
          line: 150,
          column: 3
        }
      },
      '23': {
        start: {
          line: 135,
          column: 14
        },
        end: {
          line: 135,
          column: 30
        }
      },
      '24': {
        start: {
          line: 137,
          column: 2
        },
        end: {
          line: 147,
          column: 5
        }
      },
      '25': {
        start: {
          line: 149,
          column: 2
        },
        end: {
          line: 149,
          column: 66
        }
      },
      '26': {
        start: {
          line: 152,
          column: 0
        },
        end: {
          line: 166,
          column: 3
        }
      },
      '27': {
        start: {
          line: 153,
          column: 14
        },
        end: {
          line: 153,
          column: 30
        }
      },
      '28': {
        start: {
          line: 155,
          column: 2
        },
        end: {
          line: 163,
          column: 5
        }
      },
      '29': {
        start: {
          line: 165,
          column: 2
        },
        end: {
          line: 165,
          column: 66
        }
      },
      '30': {
        start: {
          line: 168,
          column: 26
        },
        end: {
          line: 183,
          column: 1
        }
      },
      '31': {
        start: {
          line: 185,
          column: 0
        },
        end: {
          line: 195,
          column: 3
        }
      },
      '32': {
        start: {
          line: 186,
          column: 14
        },
        end: {
          line: 186,
          column: 30
        }
      },
      '33': {
        start: {
          line: 188,
          column: 2
        },
        end: {
          line: 192,
          column: 5
        }
      },
      '34': {
        start: {
          line: 194,
          column: 2
        },
        end: {
          line: 194,
          column: 52
        }
      },
      '35': {
        start: {
          line: 197,
          column: 25
        },
        end: {
          line: 202,
          column: 1
        }
      },
      '36': {
        start: {
          line: 204,
          column: 0
        },
        end: {
          line: 214,
          column: 3
        }
      },
      '37': {
        start: {
          line: 205,
          column: 14
        },
        end: {
          line: 205,
          column: 30
        }
      },
      '38': {
        start: {
          line: 207,
          column: 2
        },
        end: {
          line: 211,
          column: 5
        }
      },
      '39': {
        start: {
          line: 213,
          column: 2
        },
        end: {
          line: 213,
          column: 52
        }
      },
      '40': {
        start: {
          line: 222,
          column: 2
        },
        end: {
          line: 224,
          column: 3
        }
      },
      '41': {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 223,
          column: 47
        }
      },
      '42': {
        start: {
          line: 227,
          column: 0
        },
        end: {
          line: 227,
          column: 30
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        loc: {
          start: {
            line: 19,
            column: 28
          },
          end: {
            line: 23,
            column: 3
          }
        },
        line: 19
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        },
        loc: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 30,
            column: 3
          }
        },
        line: 28
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 35,
            column: 2
          },
          end: {
            line: 35,
            column: 3
          }
        },
        loc: {
          start: {
            line: 35,
            column: 15
          },
          end: {
            line: 37,
            column: 3
          }
        },
        line: 35
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 42,
            column: 2
          },
          end: {
            line: 42,
            column: 3
          }
        },
        loc: {
          start: {
            line: 42,
            column: 14
          },
          end: {
            line: 44,
            column: 3
          }
        },
        line: 42
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 50,
            column: 2
          },
          end: {
            line: 50,
            column: 3
          }
        },
        loc: {
          start: {
            line: 50,
            column: 9
          },
          end: {
            line: 52,
            column: 3
          }
        },
        line: 50
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 59,
            column: 2
          },
          end: {
            line: 59,
            column: 3
          }
        },
        loc: {
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 61,
            column: 3
          }
        },
        line: 59
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 66,
            column: 2
          },
          end: {
            line: 66,
            column: 3
          }
        },
        loc: {
          start: {
            line: 66,
            column: 17
          },
          end: {
            line: 68,
            column: 3
          }
        },
        line: 66
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 76,
            column: 2
          },
          end: {
            line: 76,
            column: 3
          }
        },
        loc: {
          start: {
            line: 76,
            column: 33
          },
          end: {
            line: 78,
            column: 3
          }
        },
        line: 76
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 88,
            column: 2
          },
          end: {
            line: 88,
            column: 3
          }
        },
        loc: {
          start: {
            line: 88,
            column: 28
          },
          end: {
            line: 90,
            column: 3
          }
        },
        line: 88
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 97,
            column: 2
          },
          end: {
            line: 97,
            column: 3
          }
        },
        loc: {
          start: {
            line: 97,
            column: 19
          },
          end: {
            line: 104,
            column: 3
          }
        },
        line: 97
      },
      '10': {
        name: '(anonymous_10)',
        decl: {
          start: {
            line: 110,
            column: 2
          },
          end: {
            line: 110,
            column: 3
          }
        },
        loc: {
          start: {
            line: 110,
            column: 21
          },
          end: {
            line: 112,
            column: 3
          }
        },
        line: 110
      },
      '11': {
        name: '(anonymous_11)',
        decl: {
          start: {
            line: 134,
            column: 38
          },
          end: {
            line: 134,
            column: 39
          }
        },
        loc: {
          start: {
            line: 134,
            column: 48
          },
          end: {
            line: 150,
            column: 1
          }
        },
        line: 134
      },
      '12': {
        name: '(anonymous_12)',
        decl: {
          start: {
            line: 152,
            column: 24
          },
          end: {
            line: 152,
            column: 25
          }
        },
        loc: {
          start: {
            line: 152,
            column: 34
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 152
      },
      '13': {
        name: '(anonymous_13)',
        decl: {
          start: {
            line: 185,
            column: 26
          },
          end: {
            line: 185,
            column: 27
          }
        },
        loc: {
          start: {
            line: 185,
            column: 36
          },
          end: {
            line: 195,
            column: 1
          }
        },
        line: 185
      },
      '14': {
        name: '(anonymous_14)',
        decl: {
          start: {
            line: 204,
            column: 25
          },
          end: {
            line: 204,
            column: 26
          }
        },
        loc: {
          start: {
            line: 204,
            column: 35
          },
          end: {
            line: 214,
            column: 1
          }
        },
        line: 204
      },
      '15': {
        name: 'assertSize',
        decl: {
          start: {
            line: 221,
            column: 9
          },
          end: {
            line: 221,
            column: 19
          }
        },
        loc: {
          start: {
            line: 221,
            column: 34
          },
          end: {
            line: 225,
            column: 1
          }
        },
        line: 221
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 19,
            column: 14
          },
          end: {
            line: 19,
            column: 26
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 19,
            column: 24
          },
          end: {
            line: 19,
            column: 26
          }
        }],
        line: 19
      },
      '1': {
        loc: {
          start: {
            line: 88,
            column: 16
          },
          end: {
            line: 88,
            column: 26
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 88,
            column: 25
          },
          end: {
            line: 88,
            column: 26
          }
        }],
        line: 88
      },
      '2': {
        loc: {
          start: {
            line: 222,
            column: 2
          },
          end: {
            line: 224,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 222,
            column: 2
          },
          end: {
            line: 224,
            column: 3
          }
        }, {
          start: {
            line: 222,
            column: 2
          },
          end: {
            line: 224,
            column: 3
          }
        }],
        line: 222
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0
    },
    b: {
      '0': [0],
      '1': [0],
      '2': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const { Transform } = /* istanbul ignore next */(cov_1z3b8bbzbd.s[0]++, require('stream'));
const createFunction = /* istanbul ignore next */(cov_1z3b8bbzbd.s[1]++, require('generate-function'));
const BufferList = /* istanbul ignore next */(cov_1z3b8bbzbd.s[2]++, require('internal/buffer-list'));
const NotEnoughDataError = /* istanbul ignore next */(cov_1z3b8bbzbd.s[3]++, require('lib/not-enough-data-error'));

const kbuffer = /* istanbul ignore next */(cov_1z3b8bbzbd.s[4]++, Symbol('buffer'));

/**
 * Binary data queue.
 * Also represent a part of BufferList API.
 */
class BinaryStream extends /* istanbul ignore next */(Transform) {
  /**
   * @class Binary
   * @param {Object} options
   */
  constructor(options = /* istanbul ignore next */(cov_1z3b8bbzbd.b[0][0]++, {})) {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[0]++;
    cov_1z3b8bbzbd.s[5]++;

    super(options);

    /* istanbul ignore next */cov_1z3b8bbzbd.s[6]++;
    this[kbuffer] = new BufferList();
  }

  /**
   * @returns {BufferList}
   */
  get buffer() {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[1]++;
    cov_1z3b8bbzbd.s[7]++;

    return this[kbuffer];
  }

  /**
   * @returns {number}
   */
  get length() {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[2]++;
    cov_1z3b8bbzbd.s[8]++;

    return this.buffer.length;
  }

  /**
   * @param {Buffer} buf
   */
  append(buf) {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[3]++;
    cov_1z3b8bbzbd.s[9]++;

    this.buffer.append(buf);
  }

  /**
   * @param {number} i
   * @returns {number}
   */
  get(i) {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[4]++;
    cov_1z3b8bbzbd.s[10]++;

    return this.buffer.get(i);
  }

  /**
   * @param {number} [start]
   * @param {number} [end]
   * @returns {Buffer}
   */
  slice(start, end) {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[5]++;
    cov_1z3b8bbzbd.s[11]++;

    return this.buffer.slice(start, end);
  }

  /**
   * @param {number} bytes
   */
  consume(bytes) {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[6]++;
    cov_1z3b8bbzbd.s[12]++;

    this.buffer.consume(bytes);
  }

  /**
   * @param {string} encoding
   * @param {number} [start]
   * @param {number} [end]
   * @returns {string}
   */
  toString(encoding, start, end) {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[7]++;
    cov_1z3b8bbzbd.s[13]++;

    return this.buffer.toString(encoding, start, end);
  }

  /**
   * Returns the first (least) index of an element
   * within the list equal to the specified value,
   * or -1 if none is found.
   * @param {number} byte
   * @param {number} [offset]
   * @returns {number}
   */
  indexOf(byte, offset = /* istanbul ignore next */(cov_1z3b8bbzbd.b[1][0]++, 0)) {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[8]++;
    cov_1z3b8bbzbd.s[14]++;

    return this.buffer.indexOf(byte, offset);
  }

  /**
   * Read provided amount of bytes from stream.
   * @param {number} size
   * @returns {Buffer}
   */
  readBuffer(size) {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[9]++;
    cov_1z3b8bbzbd.s[15]++;

    assertSize(size, this.length);

    const buf = /* istanbul ignore next */(cov_1z3b8bbzbd.s[16]++, this.slice(0, size));
    /* istanbul ignore next */cov_1z3b8bbzbd.s[17]++;
    this.consume(size);

    /* istanbul ignore next */cov_1z3b8bbzbd.s[18]++;
    return buf;
  }

  /**
   * Write provided chunk to the stream.
   * @param {Buffer} chunk
   */
  writeBuffer(chunk) {
    /* istanbul ignore next */cov_1z3b8bbzbd.f[10]++;
    cov_1z3b8bbzbd.s[19]++;

    this.append(chunk);
  }
}

const fixedReadMethods = /* istanbul ignore next */(cov_1z3b8bbzbd.s[20]++, {
  readDoubleBE: 8,
  readDoubleLE: 8,
  readFloatBE: 4,
  readFloatLE: 4,
  readInt32BE: 4,
  readInt32LE: 4,
  readUInt32BE: 4,
  readUInt32LE: 4,
  readInt16BE: 2,
  readInt16LE: 2,
  readUInt16BE: 2,
  readUInt16LE: 2,
  readInt8: 1,
  readUInt8: 1
});

const metaReadMethods = /* istanbul ignore next */(cov_1z3b8bbzbd.s[21]++, ['readIntBE', 'readIntLE', 'readUIntBE', 'readUIntLE']);

/* istanbul ignore next */cov_1z3b8bbzbd.s[22]++;
Object.keys(fixedReadMethods).forEach(method => {
  /* istanbul ignore next */cov_1z3b8bbzbd.f[11]++;

  const gen = /* istanbul ignore next */(cov_1z3b8bbzbd.s[23]++, createFunction());

  /* istanbul ignore next */cov_1z3b8bbzbd.s[24]++;
  gen(`
    function binary_${method}() {
      const bytes = ${gen.formats.d(fixedReadMethods[method])};
      assertSize(bytes, this.length);

      const res = this.buffer.${method}(0);
      this.consume(bytes);

      return res;
    }
  `);

  /* istanbul ignore next */cov_1z3b8bbzbd.s[25]++;
  BinaryStream.prototype[method] = gen.toFunction({ assertSize });
});

/* istanbul ignore next */cov_1z3b8bbzbd.s[26]++;
metaReadMethods.forEach(method => {
  /* istanbul ignore next */cov_1z3b8bbzbd.f[12]++;

  const gen = /* istanbul ignore next */(cov_1z3b8bbzbd.s[27]++, createFunction());

  /* istanbul ignore next */cov_1z3b8bbzbd.s[28]++;
  gen(`
    function binary_${method}(size) {
      assertSize(size, this.length);

      const res = this.buffer.${method}(size, 0);
      this.consume(size);
      return res;
    }
  `);

  /* istanbul ignore next */cov_1z3b8bbzbd.s[29]++;
  BinaryStream.prototype[method] = gen.toFunction({ assertSize });
});

const fixedWriteMethods = /* istanbul ignore next */(cov_1z3b8bbzbd.s[30]++, ['writeDoubleBE', 'writeDoubleLE', 'writeFloatBE', 'writeFloatLE', 'writeInt32BE', 'writeInt32LE', 'writeUInt32BE', 'writeUInt32LE', 'writeInt16BE', 'writeInt16LE', 'writeUInt16BE', 'writeUInt16LE', 'writeInt8', 'writeUInt8']);

/* istanbul ignore next */cov_1z3b8bbzbd.s[31]++;
fixedWriteMethods.forEach(method => {
  /* istanbul ignore next */cov_1z3b8bbzbd.f[13]++;

  const gen = /* istanbul ignore next */(cov_1z3b8bbzbd.s[32]++, createFunction());

  /* istanbul ignore next */cov_1z3b8bbzbd.s[33]++;
  gen(`
    function binary_${method}(value) {
      this.buffer.${method}(value);
    }
  `);

  /* istanbul ignore next */cov_1z3b8bbzbd.s[34]++;
  BinaryStream.prototype[method] = gen.toFunction();
});

const metaWriteMethods = /* istanbul ignore next */(cov_1z3b8bbzbd.s[35]++, ['writeIntBE', 'writeIntLE', 'writeUIntBE', 'writeUIntLE']);

/* istanbul ignore next */cov_1z3b8bbzbd.s[36]++;
metaWriteMethods.forEach(method => {
  /* istanbul ignore next */cov_1z3b8bbzbd.f[14]++;

  const gen = /* istanbul ignore next */(cov_1z3b8bbzbd.s[37]++, createFunction());

  /* istanbul ignore next */cov_1z3b8bbzbd.s[38]++;
  gen(`
    function binary_${method}(value, size) {
      this.buffer.${method}(value, size);
    }
  `);

  /* istanbul ignore next */cov_1z3b8bbzbd.s[39]++;
  BinaryStream.prototype[method] = gen.toFunction();
});

/**
 * Check if stream is able to read requested amound of data.
 * @param {number} size Requested data size to read.
 * @param {number} length The number of bytes in stream.
 */
function assertSize(size, length) {
  /* istanbul ignore next */cov_1z3b8bbzbd.f[15]++;
  cov_1z3b8bbzbd.s[40]++;

  if (size > length) {
    /* istanbul ignore next */cov_1z3b8bbzbd.b[2][0]++;
    cov_1z3b8bbzbd.s[41]++;

    throw new NotEnoughDataError(size, length);
  } else /* istanbul ignore next */{
    cov_1z3b8bbzbd.b[2][1]++;
  }
}

/* istanbul ignore next */cov_1z3b8bbzbd.s[42]++;
module.exports = BinaryStream;