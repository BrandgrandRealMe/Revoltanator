dbefcb17d44f3e5871c82b5cca1116cc
'use strict';

const when = require('types/when');
const symbols = require('internal/symbols');

describe('when', () => {
  test('encode positive', () => {
    const childBytes = 3;
    const childValue = 12;
    const wstream = {};

    const childType = {
      encode: jest.fn().mockImplementation(() => {
        childType.encode.bytes = childBytes;
      }),
      decode() {}
    };

    const context = {};

    const type = when(() => true, childType);

    type.encode(childValue, wstream, context);

    expect(type.encode.bytes).toEqual(childBytes);
    expect(type[symbols.skip]).toEqual(false);
    expect(childType.encode).toHaveBeenCalledTimes(1);
  });

  test('encode negative', () => {
    const childBytes = 3;
    const childValue = 12;
    const wstream = {};

    const childType = {
      encode: jest.fn().mockImplementation(() => {
        childType.encode.bytes = childBytes;
      }),
      decode() {}
    };

    const context = {};

    const type = when(() => false, childType);

    type.encode(childValue, wstream, context);

    expect(type.encode.bytes).toEqual(0);
    expect(type[symbols.skip]).toEqual(true);
    expect(childType.encode).toHaveBeenCalledTimes(0);
  });

  test('encodingLength positive', () => {
    const value = 123;
    const bytes = 10;

    const childType = {
      decode() {},
      encode() {},
      encodingLength() {
        return bytes;
      }
    };

    const type = when(() => true, childType);

    expect(type.encodingLength(value)).toBe(bytes);
  });

  test('encodingLength negative', () => {
    const value = 123;
    const bytes = 10;

    const childType = {
      decode() {},
      encode() {},
      encodingLength() {
        return bytes;
      }
    };

    const type = when(() => false, childType);

    expect(type.encodingLength(value)).toBe(0);
  });

  test('decode positive', () => {
    const childBytes = 3;
    const childValue = 12;

    const childType = {
      decode: () => childValue,
      encode() {}
    };

    childType.decode.bytes = childBytes;

    const type = when(() => true, childType);

    expect(type.decode({})).toEqual(childValue);
    expect(type.decode.bytes).toEqual(childBytes);
    expect(type[symbols.skip]).toEqual(false);
  });

  test('decode negative', () => {
    const childBytes = 3;
    const childValue = 12;

    const childType = {
      decode: () => childValue,
      encode() {}
    };

    childType.decode.bytes = childBytes;

    const type = when(() => false, childType);

    expect(type.decode({})).toEqual(undefined);
    expect(type.decode.bytes).toEqual(0);
    expect(type[symbols.skip]).toEqual(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndoZW4uanMiXSwibmFtZXMiOlsid2hlbiIsInJlcXVpcmUiLCJzeW1ib2xzIiwiZGVzY3JpYmUiLCJ0ZXN0IiwiY2hpbGRCeXRlcyIsImNoaWxkVmFsdWUiLCJ3c3RyZWFtIiwiY2hpbGRUeXBlIiwiZW5jb2RlIiwiamVzdCIsImZuIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiYnl0ZXMiLCJkZWNvZGUiLCJjb250ZXh0IiwidHlwZSIsImV4cGVjdCIsInRvRXF1YWwiLCJza2lwIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidmFsdWUiLCJlbmNvZGluZ0xlbmd0aCIsInRvQmUiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLE9BQU9DLFFBQVEsWUFBUixDQUFiO0FBQ0EsTUFBTUMsVUFBVUQsUUFBUSxrQkFBUixDQUFoQjs7QUFFQUUsU0FBUyxNQUFULEVBQWlCLE1BQU07QUFDckJDLE9BQUssaUJBQUwsRUFBd0IsTUFBTTtBQUM1QixVQUFNQyxhQUFhLENBQW5CO0FBQ0EsVUFBTUMsYUFBYSxFQUFuQjtBQUNBLFVBQU1DLFVBQVUsRUFBaEI7O0FBRUEsVUFBTUMsWUFBWTtBQUNoQkMsY0FBUUMsS0FBS0MsRUFBTCxHQUFVQyxrQkFBVixDQUE2QixNQUFNO0FBQ3pDSixrQkFBVUMsTUFBVixDQUFpQkksS0FBakIsR0FBeUJSLFVBQXpCO0FBQ0QsT0FGTyxDQURRO0FBSWhCUyxlQUFTLENBQUU7QUFKSyxLQUFsQjs7QUFPQSxVQUFNQyxVQUFVLEVBQWhCOztBQUVBLFVBQU1DLE9BQU9oQixLQUFLLE1BQU0sSUFBWCxFQUFpQlEsU0FBakIsQ0FBYjs7QUFFQVEsU0FBS1AsTUFBTCxDQUFZSCxVQUFaLEVBQXdCQyxPQUF4QixFQUFpQ1EsT0FBakM7O0FBRUFFLFdBQU9ELEtBQUtQLE1BQUwsQ0FBWUksS0FBbkIsRUFBMEJLLE9BQTFCLENBQWtDYixVQUFsQztBQUNBWSxXQUFPRCxLQUFLZCxRQUFRaUIsSUFBYixDQUFQLEVBQTJC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LGNBQVEsTUFBTVIsVUFERTtBQUVoQkcsZUFBUyxDQUFFO0FBRkssS0FBbEI7O0FBS0FELGNBQVVNLE1BQVYsQ0FBaUJELEtBQWpCLEdBQXlCUixVQUF6Qjs7QUFFQSxVQUFNVyxPQUFPaEIsS0FBSyxNQUFNLEtBQVgsRUFBa0JRLFNBQWxCLENBQWI7O0FBRUFTLFdBQU9ELEtBQUtGLE1BQUwsQ0FBWSxFQUFaLENBQVAsRUFBd0JJLE9BQXhCLENBQWdDTSxTQUFoQztBQUNBUCxXQUFPRCxLQUFLRixNQUFMLENBQVlELEtBQW5CLEVBQTBCSyxPQUExQixDQUFrQyxDQUFsQztBQUNBRCxXQUFPRCxLQUFLZCxRQUFRaUIsSUFBYixDQUFQLEVBQTJCRCxPQUEzQixDQUFtQyxJQUFuQztBQUNELEdBaEJEO0FBaUJELENBcEhEIiwiZmlsZSI6IndoZW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHdoZW4gPSByZXF1aXJlKCd0eXBlcy93aGVuJyk7XG5jb25zdCBzeW1ib2xzID0gcmVxdWlyZSgnaW50ZXJuYWwvc3ltYm9scycpO1xuXG5kZXNjcmliZSgnd2hlbicsICgpID0+IHtcbiAgdGVzdCgnZW5jb2RlIHBvc2l0aXZlJywgKCkgPT4ge1xuICAgIGNvbnN0IGNoaWxkQnl0ZXMgPSAzO1xuICAgIGNvbnN0IGNoaWxkVmFsdWUgPSAxMjtcbiAgICBjb25zdCB3c3RyZWFtID0ge307XG5cbiAgICBjb25zdCBjaGlsZFR5cGUgPSB7XG4gICAgICBlbmNvZGU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICBjaGlsZFR5cGUuZW5jb2RlLmJ5dGVzID0gY2hpbGRCeXRlcztcbiAgICAgIH0pLFxuICAgICAgZGVjb2RlKCkge30sXG4gICAgfTtcblxuICAgIGNvbnN0IGNvbnRleHQgPSB7fTtcblxuICAgIGNvbnN0IHR5cGUgPSB3aGVuKCgpID0+IHRydWUsIGNoaWxkVHlwZSk7XG5cbiAgICB0eXBlLmVuY29kZShjaGlsZFZhbHVlLCB3c3RyZWFtLCBjb250ZXh0KTtcblxuICAgIGV4cGVjdCh0eXBlLmVuY29kZS5ieXRlcykudG9FcXVhbChjaGlsZEJ5dGVzKTtcbiAgICBleHBlY3QodHlwZVtzeW1ib2xzLnNraXBdKS50b0VxdWFsKGZhbHNlKTtcbiAgICBleHBlY3QoY2hpbGRUeXBlLmVuY29kZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICB0ZXN0KCdlbmNvZGUgbmVnYXRpdmUnLCAoKSA9PiB7XG4gICAgY29uc3QgY2hpbGRCeXRlcyA9IDM7XG4gICAgY29uc3QgY2hpbGRWYWx1ZSA9IDEyO1xuICAgIGNvbnN0IHdzdHJlYW0gPSB7fTtcblxuICAgIGNvbnN0IGNoaWxkVHlwZSA9IHtcbiAgICAgIGVuY29kZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIGNoaWxkVHlwZS5lbmNvZGUuYnl0ZXMgPSBjaGlsZEJ5dGVzO1xuICAgICAgfSksXG4gICAgICBkZWNvZGUoKSB7fSxcbiAgICB9O1xuXG4gICAgY29uc3QgY29udGV4dCA9IHt9O1xuXG4gICAgY29uc3QgdHlwZSA9IHdoZW4oKCkgPT4gZmFsc2UsIGNoaWxkVHlwZSk7XG5cbiAgICB0eXBlLmVuY29kZShjaGlsZFZhbHVlLCB3c3RyZWFtLCBjb250ZXh0KTtcblxuICAgIGV4cGVjdCh0eXBlLmVuY29kZS5ieXRlcykudG9FcXVhbCgwKTtcbiAgICBleHBlY3QodHlwZVtzeW1ib2xzLnNraXBdKS50b0VxdWFsKHRydWUpO1xuICAgIGV4cGVjdChjaGlsZFR5cGUuZW5jb2RlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMCk7XG4gIH0pO1xuXG4gIHRlc3QoJ2VuY29kaW5nTGVuZ3RoIHBvc2l0aXZlJywgKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gMTIzO1xuICAgIGNvbnN0IGJ5dGVzID0gMTA7XG5cbiAgICBjb25zdCBjaGlsZFR5cGUgPSB7XG4gICAgICBkZWNvZGUoKSB7fSxcbiAgICAgIGVuY29kZSgpIHt9LFxuICAgICAgZW5jb2RpbmdMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IHR5cGUgPSB3aGVuKCgpID0+IHRydWUsIGNoaWxkVHlwZSk7XG5cbiAgICBleHBlY3QodHlwZS5lbmNvZGluZ0xlbmd0aCh2YWx1ZSkpLnRvQmUoYnl0ZXMpO1xuICB9KTtcblxuICB0ZXN0KCdlbmNvZGluZ0xlbmd0aCBuZWdhdGl2ZScsICgpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IDEyMztcbiAgICBjb25zdCBieXRlcyA9IDEwO1xuXG4gICAgY29uc3QgY2hpbGRUeXBlID0ge1xuICAgICAgZGVjb2RlKCkge30sXG4gICAgICBlbmNvZGUoKSB7fSxcbiAgICAgIGVuY29kaW5nTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCB0eXBlID0gd2hlbigoKSA9PiBmYWxzZSwgY2hpbGRUeXBlKTtcblxuICAgIGV4cGVjdCh0eXBlLmVuY29kaW5nTGVuZ3RoKHZhbHVlKSkudG9CZSgwKTtcbiAgfSk7XG5cbiAgdGVzdCgnZGVjb2RlIHBvc2l0aXZlJywgKCkgPT4ge1xuICAgIGNvbnN0IGNoaWxkQnl0ZXMgPSAzO1xuICAgIGNvbnN0IGNoaWxkVmFsdWUgPSAxMjtcblxuICAgIGNvbnN0IGNoaWxkVHlwZSA9IHtcbiAgICAgIGRlY29kZTogKCkgPT4gY2hpbGRWYWx1ZSxcbiAgICAgIGVuY29kZSgpIHt9LFxuICAgIH07XG5cbiAgICBjaGlsZFR5cGUuZGVjb2RlLmJ5dGVzID0gY2hpbGRCeXRlcztcblxuICAgIGNvbnN0IHR5cGUgPSB3aGVuKCgpID0+IHRydWUsIGNoaWxkVHlwZSk7XG5cbiAgICBleHBlY3QodHlwZS5kZWNvZGUoe30pKS50b0VxdWFsKGNoaWxkVmFsdWUpO1xuICAgIGV4cGVjdCh0eXBlLmRlY29kZS5ieXRlcykudG9FcXVhbChjaGlsZEJ5dGVzKTtcbiAgICBleHBlY3QodHlwZVtzeW1ib2xzLnNraXBdKS50b0VxdWFsKGZhbHNlKTtcbiAgfSk7XG5cbiAgdGVzdCgnZGVjb2RlIG5lZ2F0aXZlJywgKCkgPT4ge1xuICAgIGNvbnN0IGNoaWxkQnl0ZXMgPSAzO1xuICAgIGNvbnN0IGNoaWxkVmFsdWUgPSAxMjtcblxuICAgIGNvbnN0IGNoaWxkVHlwZSA9IHtcbiAgICAgIGRlY29kZTogKCkgPT4gY2hpbGRWYWx1ZSxcbiAgICAgIGVuY29kZSgpIHt9LFxuICAgIH07XG5cbiAgICBjaGlsZFR5cGUuZGVjb2RlLmJ5dGVzID0gY2hpbGRCeXRlcztcblxuICAgIGNvbnN0IHR5cGUgPSB3aGVuKCgpID0+IGZhbHNlLCBjaGlsZFR5cGUpO1xuXG4gICAgZXhwZWN0KHR5cGUuZGVjb2RlKHt9KSkudG9FcXVhbCh1bmRlZmluZWQpO1xuICAgIGV4cGVjdCh0eXBlLmRlY29kZS5ieXRlcykudG9FcXVhbCgwKTtcbiAgICBleHBlY3QodHlwZVtzeW1ib2xzLnNraXBdKS50b0VxdWFsKHRydWUpO1xuICB9KTtcbn0pO1xuIl19