d67a68c49a04c57c6f8592b30218ad61
'use strict';

/* istanbul ignore next */var cov_2iez4kv9qc = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/decode.js',
      hash = 'bde8cb381213db8c6bf6c86f11db403fd636e706',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/decode.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 45
        },
        end: {
          line: 3,
          column: 64
        }
      },
      '1': {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 49
        }
      },
      '2': {
        start: {
          line: 5,
          column: 16
        },
        end: {
          line: 5,
          column: 43
        }
      },
      '3': {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 41
        }
      },
      '4': {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 11,
          column: 2
        }
      },
      '5': {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 28
        }
      },
      '6': {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 25,
          column: 3
        }
      },
      '7': {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 38
        }
      },
      '8': {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 33
        }
      },
      '9': {
        start: {
          line: 27,
          column: 15
        },
        end: {
          line: 27,
          column: 29
        }
      },
      '10': {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 28,
          column: 62
        }
      },
      '11': {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 30,
          column: 28
        }
      },
      '12': {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 31,
          column: 23
        }
      },
      '13': {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 33,
          column: 15
        }
      },
      '14': {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 48,
          column: 3
        }
      },
      '15': {
        start: {
          line: 45,
          column: 18
        },
        end: {
          line: 45,
          column: 57
        }
      },
      '16': {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 53
        }
      },
      '17': {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 17
        }
      },
      '18': {
        start: {
          line: 50,
          column: 2
        },
        end: {
          line: 50,
          column: 51
        }
      },
      '19': {
        start: {
          line: 61,
          column: 2
        },
        end: {
          line: 61,
          column: 23
        }
      },
      '20': {
        start: {
          line: 63,
          column: 15
        },
        end: {
          line: 63,
          column: 34
        }
      },
      '21': {
        start: {
          line: 65,
          column: 2
        },
        end: {
          line: 70,
          column: 3
        }
      },
      '22': {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 21
        }
      },
      '23': {
        start: {
          line: 67,
          column: 4
        },
        end: {
          line: 67,
          column: 24
        }
      },
      '24': {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 24
        }
      },
      '25': {
        start: {
          line: 72,
          column: 15
        },
        end: {
          line: 72,
          column: 34
        }
      },
      '26': {
        start: {
          line: 74,
          column: 2
        },
        end: {
          line: 92,
          column: 3
        }
      },
      '27': {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 23
        }
      },
      '28': {
        start: {
          line: 76,
          column: 17
        },
        end: {
          line: 76,
          column: 28
        }
      },
      '29': {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      '30': {
        start: {
          line: 79,
          column: 6
        },
        end: {
          line: 79,
          column: 52
        }
      },
      '31': {
        start: {
          line: 80,
          column: 6
        },
        end: {
          line: 80,
          column: 26
        }
      },
      '32': {
        start: {
          line: 81,
          column: 6
        },
        end: {
          line: 81,
          column: 15
        }
      },
      '33': {
        start: {
          line: 84,
          column: 18
        },
        end: {
          line: 84,
          column: 49
        }
      },
      '34': {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 45
        }
      },
      '35': {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      '36': {
        start: {
          line: 88,
          column: 6
        },
        end: {
          line: 88,
          column: 15
        }
      },
      '37': {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 22
        }
      },
      '38': {
        start: {
          line: 94,
          column: 2
        },
        end: {
          line: 94,
          column: 14
        }
      },
      '39': {
        start: {
          line: 103,
          column: 2
        },
        end: {
          line: 105,
          column: 3
        }
      },
      '40': {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 65
        }
      }
    },
    fnMap: {
      '0': {
        name: 'decode',
        decl: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 15
          }
        },
        loc: {
          start: {
            line: 19,
            column: 39
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 19
      },
      '1': {
        name: 'decodeCommon',
        decl: {
          start: {
            line: 43,
            column: 9
          },
          end: {
            line: 43,
            column: 21
          }
        },
        loc: {
          start: {
            line: 43,
            column: 51
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 43
      },
      '2': {
        name: 'decodeSchema',
        decl: {
          start: {
            line: 60,
            column: 9
          },
          end: {
            line: 60,
            column: 21
          }
        },
        loc: {
          start: {
            line: 60,
            column: 45
          },
          end: {
            line: 95,
            column: 1
          }
        },
        line: 60
      },
      '3': {
        name: 'assertSchema',
        decl: {
          start: {
            line: 102,
            column: 9
          },
          end: {
            line: 102,
            column: 21
          }
        },
        loc: {
          start: {
            line: 102,
            column: 30
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 102
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        }, {
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        }],
        line: 22
      },
      '1': {
        loc: {
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        }, {
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        }],
        line: 44
      },
      '2': {
        loc: {
          start: {
            line: 65,
            column: 2
          },
          end: {
            line: 70,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 65,
            column: 2
          },
          end: {
            line: 70,
            column: 3
          }
        }, {
          start: {
            line: 65,
            column: 2
          },
          end: {
            line: 70,
            column: 3
          }
        }],
        line: 65
      },
      '3': {
        loc: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }],
        line: 78
      },
      '4': {
        loc: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        }, {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        }],
        line: 87
      },
      '5': {
        loc: {
          start: {
            line: 103,
            column: 2
          },
          end: {
            line: 105,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 103,
            column: 2
          },
          end: {
            line: 105,
            column: 3
          }
        }, {
          start: {
            line: 103,
            column: 2
          },
          end: {
            line: 105,
            column: 3
          }
        }],
        line: 103
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const { isType, isUserType, isDecodeType } = /* istanbul ignore next */(cov_2iez4kv9qc.s[0]++, require('lib/util'));
const BinaryStream = /* istanbul ignore next */(cov_2iez4kv9qc.s[1]++, require('lib/binary-stream'));
const symbols = /* istanbul ignore next */(cov_2iez4kv9qc.s[2]++, require('internal/symbols'));
const Metadata = /* istanbul ignore next */(cov_2iez4kv9qc.s[3]++, require('internal/meta'));

/* istanbul ignore next */cov_2iez4kv9qc.s[4]++;
module.exports = {
  decode,
  decodeCommon
};

/**
 * Decode any data from provided stream using schema.
 * @param {BinaryStream} rstream Read stream to decode.
 * @param {Object} typeOrSchema Builtin data type or schema.
 * @returns {*}
 */
function decode(rstream, typeOrSchema) {
  /* istanbul ignore next */cov_2iez4kv9qc.f[0]++;

  let decodeStream = /* istanbul ignore next */(cov_2iez4kv9qc.s[5]++, rstream);

  /* istanbul ignore next */cov_2iez4kv9qc.s[6]++;
  if (Buffer.isBuffer(rstream)) {
    /* istanbul ignore next */cov_2iez4kv9qc.b[0][0]++;
    cov_2iez4kv9qc.s[7]++;

    decodeStream = new BinaryStream();
    /* istanbul ignore next */cov_2iez4kv9qc.s[8]++;
    decodeStream.append(rstream);
  } else /* istanbul ignore next */{
    cov_2iez4kv9qc.b[0][1]++;
  }

  const meta = /* istanbul ignore next */(cov_2iez4kv9qc.s[9]++, new Metadata());
  const value = /* istanbul ignore next */(cov_2iez4kv9qc.s[10]++, decodeCommon(decodeStream, typeOrSchema, meta));

  /* istanbul ignore next */cov_2iez4kv9qc.s[11]++;
  decode.bytes = meta.bytes;
  /* istanbul ignore next */cov_2iez4kv9qc.s[12]++;
  Metadata.clean(meta);

  /* istanbul ignore next */cov_2iez4kv9qc.s[13]++;
  return value;
}

/**
 * @private
 * @param {BinaryStream|Buffer} rstream
 * @param {Object} typeOrSchema
 * @param {Metadata} meta
 * @returns {*}
 */
function decodeCommon(rstream, typeOrSchema, meta) {
  /* istanbul ignore next */cov_2iez4kv9qc.f[1]++;
  cov_2iez4kv9qc.s[14]++;

  if (isType(typeOrSchema)) {
    /* istanbul ignore next */cov_2iez4kv9qc.b[1][0]++;

    const value = /* istanbul ignore next */(cov_2iez4kv9qc.s[15]++, typeOrSchema.decode.call(meta, rstream));
    /* istanbul ignore next */cov_2iez4kv9qc.s[16]++;
    meta[symbols.bytes] += typeOrSchema.decode.bytes;
    /* istanbul ignore next */cov_2iez4kv9qc.s[17]++;
    return value;
  } else /* istanbul ignore next */{
    cov_2iez4kv9qc.b[1][1]++;
  }

  cov_2iez4kv9qc.s[18]++;
  return decodeSchema(rstream, typeOrSchema, meta);
}

/**
 * @private
 * @param {BinaryStream} rstream
 * @param {Object} schema
 * @param {Metadata} meta
 * @returns {Object}
 */
function decodeSchema(rstream, schema, meta) {
  /* istanbul ignore next */cov_2iez4kv9qc.f[2]++;
  cov_2iez4kv9qc.s[19]++;

  assertSchema(schema);

  const node = /* istanbul ignore next */(cov_2iez4kv9qc.s[20]++, Object.create(null));

  /* istanbul ignore next */cov_2iez4kv9qc.s[21]++;
  if (meta.node === undefined) {
    /* istanbul ignore next */cov_2iez4kv9qc.b[2][0]++;
    cov_2iez4kv9qc.s[22]++;

    meta.node = node;
    /* istanbul ignore next */cov_2iez4kv9qc.s[23]++;
    meta.current = node;
  } else {
    /* istanbul ignore next */cov_2iez4kv9qc.b[2][1]++;
    cov_2iez4kv9qc.s[24]++;

    meta.current = node;
  }

  const keys = /* istanbul ignore next */(cov_2iez4kv9qc.s[25]++, Object.keys(schema));

  /* istanbul ignore next */cov_2iez4kv9qc.s[26]++;
  for (let i = 0; i < keys.length; i += 1) {
    const key = /* istanbul ignore next */(cov_2iez4kv9qc.s[27]++, keys[i]);
    const type = /* istanbul ignore next */(cov_2iez4kv9qc.s[28]++, schema[key]);

    /* istanbul ignore next */cov_2iez4kv9qc.s[29]++;
    if (!isDecodeType(type)) {
      /* istanbul ignore next */cov_2iez4kv9qc.b[3][0]++;
      cov_2iez4kv9qc.s[30]++;

      node[key] = decodeSchema(rstream, type, meta);
      /* istanbul ignore next */cov_2iez4kv9qc.s[31]++;
      meta.current = node;
      /* istanbul ignore next */cov_2iez4kv9qc.s[32]++;
      continue; // eslint-disable-line no-continue
    } else /* istanbul ignore next */{
      cov_2iez4kv9qc.b[3][1]++;
    }

    const value = /* istanbul ignore next */(cov_2iez4kv9qc.s[33]++, type.decode.call(meta, rstream));
    /* istanbul ignore next */cov_2iez4kv9qc.s[34]++;
    meta[symbols.bytes] += type.decode.bytes;

    /* istanbul ignore next */cov_2iez4kv9qc.s[35]++;
    if (type[symbols.skip] === true) {
      /* istanbul ignore next */cov_2iez4kv9qc.b[4][0]++;
      cov_2iez4kv9qc.s[36]++;

      continue; // eslint-disable-line no-continue
    } else /* istanbul ignore next */{
      cov_2iez4kv9qc.b[4][1]++;
    }

    cov_2iez4kv9qc.s[37]++;
    node[key] = value;
  }

  /* istanbul ignore next */cov_2iez4kv9qc.s[38]++;
  return node;
}

/**
 * Check if argument is schema.
 * @param {Object} schema
 * @private
 */
function assertSchema(schema) {
  /* istanbul ignore next */cov_2iez4kv9qc.f[3]++;
  cov_2iez4kv9qc.s[39]++;

  if (!isUserType(schema)) {
    /* istanbul ignore next */cov_2iez4kv9qc.b[5][0]++;
    cov_2iez4kv9qc.s[40]++;

    throw new TypeError('Argument #2 should be a plain object.');
  } else /* istanbul ignore next */{
    cov_2iez4kv9qc.b[5][1]++;
  }
}