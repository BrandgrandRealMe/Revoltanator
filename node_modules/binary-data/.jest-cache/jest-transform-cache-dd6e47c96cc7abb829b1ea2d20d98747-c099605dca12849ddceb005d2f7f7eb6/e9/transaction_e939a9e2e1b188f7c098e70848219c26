104bb929b462b772da6240440198748c
'use strict';

const BinaryStream = require('lib/binary-stream');
const Transaction = require('lib/transaction');
const NotEnoughDataError = require('lib/not-enough-data-error');

test('shoud work', () => {
  const stream = new BinaryStream();

  stream.buffer.writeUInt8(10);
  stream.buffer.writeUInt16BE(111);
  stream.buffer.writeUInt32BE(1e5);

  const size = stream.length;
  const bytes = 1 + 2 + 4;

  const transaction = new Transaction(stream);
  expect(transaction.length).toEqual(size);

  expect(transaction.readUInt8()).toEqual(10);
  expect(transaction.readUInt16BE()).toEqual(111);
  expect(transaction.readUInt32BE()).toEqual(1e5);

  expect(stream.length).toEqual(size);
  expect(transaction.length).toEqual(size);

  transaction.commit();
  expect(stream.length).toEqual(size - bytes);
});

test('should read buffer', () => {
  const stream = new BinaryStream();
  const transaction = new Transaction(stream);

  stream.append(Buffer.from([1, 2, 3, 4]));
  stream.append(Buffer.from([1, 2, 3, 4, 9]));

  const size = stream.length;
  expect(transaction.length).toEqual(size);

  expect(transaction.indexOf(3)).toBe(2);
  expect(transaction.readBuffer(3)).toEqual(Buffer.from([1, 2, 3]));
  expect(transaction.get(0)).toEqual(4);
  expect(transaction.indexOf(3)).toBe(3);
  expect(transaction.readBuffer(5)).toEqual(Buffer.from([4, 1, 2, 3, 4]));

  expect(stream.length).toEqual(size);
  expect(transaction.length).toEqual(size);

  transaction.commit();
  expect(stream.length).toEqual(size - 8);
});

test('should have `bl` methods', () => {
  const stream = new BinaryStream();
  const transaction = new Transaction(stream);
  const buffer = Buffer.from([1, 2, 3, 4]);

  transaction.append(buffer);
  expect(stream.length).toEqual(buffer.length);

  expect(transaction.slice(0, 2)).toEqual(buffer.slice(0, 2));
  expect(transaction.toString('hex')).toEqual(buffer.toString('hex'));
});

test('should emit NotEnoughDataError', () => {
  const stream = new BinaryStream();
  const transaction = new Transaction(stream);

  expect(() => transaction.readUIntBE(2)).toThrowError(NotEnoughDataError);

  transaction.append(Buffer.alloc(2));
  expect(() => transaction.readBuffer(3)).toThrowError(NotEnoughDataError);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zYWN0aW9uLmpzIl0sIm5hbWVzIjpbIkJpbmFyeVN0cmVhbSIsInJlcXVpcmUiLCJUcmFuc2FjdGlvbiIsIk5vdEVub3VnaERhdGFFcnJvciIsInRlc3QiLCJzdHJlYW0iLCJidWZmZXIiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyQkUiLCJzaXplIiwibGVuZ3RoIiwiYnl0ZXMiLCJ0cmFuc2FjdGlvbiIsImV4cGVjdCIsInRvRXF1YWwiLCJyZWFkVUludDgiLCJyZWFkVUludDE2QkUiLCJyZWFkVUludDMyQkUiLCJjb21taXQiLCJhcHBlbmQiLCJCdWZmZXIiLCJmcm9tIiwiaW5kZXhPZiIsInRvQmUiLCJyZWFkQnVmZmVyIiwiZ2V0Iiwic2xpY2UiLCJ0b1N0cmluZyIsInJlYWRVSW50QkUiLCJ0b1Rocm93RXJyb3IiLCJhbGxvYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsZUFBZUMsUUFBUSxtQkFBUixDQUFyQjtBQUNBLE1BQU1DLGNBQWNELFFBQVEsaUJBQVIsQ0FBcEI7QUFDQSxNQUFNRSxxQkFBcUJGLFFBQVEsMkJBQVIsQ0FBM0I7O0FBRUFHLEtBQUssWUFBTCxFQUFtQixNQUFNO0FBQ3ZCLFFBQU1DLFNBQVMsSUFBSUwsWUFBSixFQUFmOztBQUVBSyxTQUFPQyxNQUFQLENBQWNDLFVBQWQsQ0FBeUIsRUFBekI7QUFDQUYsU0FBT0MsTUFBUCxDQUFjRSxhQUFkLENBQTRCLEdBQTVCO0FBQ0FILFNBQU9DLE1BQVAsQ0FBY0csYUFBZCxDQUE0QixHQUE1Qjs7QUFFQSxRQUFNQyxPQUFPTCxPQUFPTSxNQUFwQjtBQUNBLFFBQU1DLFFBQVEsSUFBSSxDQUFKLEdBQVEsQ0FBdEI7O0FBRUEsUUFBTUMsY0FBYyxJQUFJWCxXQUFKLENBQWdCRyxNQUFoQixDQUFwQjtBQUNBUyxTQUFPRCxZQUFZRixNQUFuQixFQUEyQkksT0FBM0IsQ0FBbUNMLElBQW5DOztBQUVBSSxTQUFPRCxZQUFZRyxTQUFaLEVBQVAsRUFBZ0NELE9BQWhDLENBQXdDLEVBQXhDO0FBQ0FELFNBQU9ELFlBQVlJLFlBQVosRUFBUCxFQUFtQ0YsT0FBbkMsQ0FBMkMsR0FBM0M7QUFDQUQsU0FBT0QsWUFBWUssWUFBWixFQUFQLEVBQW1DSCxPQUFuQyxDQUEyQyxHQUEzQzs7QUFFQUQsU0FBT1QsT0FBT00sTUFBZCxFQUFzQkksT0FBdEIsQ0FBOEJMLElBQTlCO0FBQ0FJLFNBQU9ELFlBQVlGLE1BQW5CLEVBQTJCSSxPQUEzQixDQUFtQ0wsSUFBbkM7O0FBRUFHLGNBQVlNLE1BQVo7QUFDQUwsU0FBT1QsT0FBT00sTUFBZCxFQUFzQkksT0FBdEIsQ0FBOEJMLE9BQU9FLEtBQXJDO0FBQ0QsQ0F0QkQ7O0FBd0JBUixLQUFLLG9CQUFMLEVBQTJCLE1BQU07QUFDL0IsUUFBTUMsU0FBUyxJQUFJTCxZQUFKLEVBQWY7QUFDQSxRQUFNYSxjQUFjLElBQUlYLFdBQUosQ0FBZ0JHLE1BQWhCLENBQXBCOztBQUVBQSxTQUFPZSxNQUFQLENBQWNDLE9BQU9DLElBQVAsQ0FBWSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBWixDQUFkO0FBQ0FqQixTQUFPZSxNQUFQLENBQWNDLE9BQU9DLElBQVAsQ0FBWSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiLENBQVosQ0FBZDs7QUFFQSxRQUFNWixPQUFPTCxPQUFPTSxNQUFwQjtBQUNBRyxTQUFPRCxZQUFZRixNQUFuQixFQUEyQkksT0FBM0IsQ0FBbUNMLElBQW5DOztBQUVBSSxTQUFPRCxZQUFZVSxPQUFaLENBQW9CLENBQXBCLENBQVAsRUFBK0JDLElBQS9CLENBQW9DLENBQXBDO0FBQ0FWLFNBQU9ELFlBQVlZLFVBQVosQ0FBdUIsQ0FBdkIsQ0FBUCxFQUFrQ1YsT0FBbEMsQ0FBMENNLE9BQU9DLElBQVAsQ0FBWSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFaLENBQTFDO0FBQ0FSLFNBQU9ELFlBQVlhLEdBQVosQ0FBZ0IsQ0FBaEIsQ0FBUCxFQUEyQlgsT0FBM0IsQ0FBbUMsQ0FBbkM7QUFDQUQsU0FBT0QsWUFBWVUsT0FBWixDQUFvQixDQUFwQixDQUFQLEVBQStCQyxJQUEvQixDQUFvQyxDQUFwQztBQUNBVixTQUFPRCxZQUFZWSxVQUFaLENBQXVCLENBQXZCLENBQVAsRUFBa0NWLE9BQWxDLENBQTBDTSxPQUFPQyxJQUFQLENBQVksQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixDQUFaLENBQTFDOztBQUVBUixTQUFPVCxPQUFPTSxNQUFkLEVBQXNCSSxPQUF0QixDQUE4QkwsSUFBOUI7QUFDQUksU0FBT0QsWUFBWUYsTUFBbkIsRUFBMkJJLE9BQTNCLENBQW1DTCxJQUFuQzs7QUFFQUcsY0FBWU0sTUFBWjtBQUNBTCxTQUFPVCxPQUFPTSxNQUFkLEVBQXNCSSxPQUF0QixDQUE4QkwsT0FBTyxDQUFyQztBQUNELENBckJEOztBQXVCQU4sS0FBSywwQkFBTCxFQUFpQyxNQUFNO0FBQ3JDLFFBQU1DLFNBQVMsSUFBSUwsWUFBSixFQUFmO0FBQ0EsUUFBTWEsY0FBYyxJQUFJWCxXQUFKLENBQWdCRyxNQUFoQixDQUFwQjtBQUNBLFFBQU1DLFNBQVNlLE9BQU9DLElBQVAsQ0FBWSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FBWixDQUFmOztBQUVBVCxjQUFZTyxNQUFaLENBQW1CZCxNQUFuQjtBQUNBUSxTQUFPVCxPQUFPTSxNQUFkLEVBQXNCSSxPQUF0QixDQUE4QlQsT0FBT0ssTUFBckM7O0FBRUFHLFNBQU9ELFlBQVljLEtBQVosQ0FBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsQ0FBUCxFQUFnQ1osT0FBaEMsQ0FBd0NULE9BQU9xQixLQUFQLENBQWEsQ0FBYixFQUFnQixDQUFoQixDQUF4QztBQUNBYixTQUFPRCxZQUFZZSxRQUFaLENBQXFCLEtBQXJCLENBQVAsRUFBb0NiLE9BQXBDLENBQTRDVCxPQUFPc0IsUUFBUCxDQUFnQixLQUFoQixDQUE1QztBQUNELENBVkQ7O0FBWUF4QixLQUFLLGdDQUFMLEVBQXVDLE1BQU07QUFDM0MsUUFBTUMsU0FBUyxJQUFJTCxZQUFKLEVBQWY7QUFDQSxRQUFNYSxjQUFjLElBQUlYLFdBQUosQ0FBZ0JHLE1BQWhCLENBQXBCOztBQUVBUyxTQUFPLE1BQU1ELFlBQVlnQixVQUFaLENBQXVCLENBQXZCLENBQWIsRUFBd0NDLFlBQXhDLENBQXFEM0Isa0JBQXJEOztBQUVBVSxjQUFZTyxNQUFaLENBQW1CQyxPQUFPVSxLQUFQLENBQWEsQ0FBYixDQUFuQjtBQUNBakIsU0FBTyxNQUFNRCxZQUFZWSxVQUFaLENBQXVCLENBQXZCLENBQWIsRUFBd0NLLFlBQXhDLENBQXFEM0Isa0JBQXJEO0FBQ0QsQ0FSRCIsImZpbGUiOiJ0cmFuc2FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgQmluYXJ5U3RyZWFtID0gcmVxdWlyZSgnbGliL2JpbmFyeS1zdHJlYW0nKTtcbmNvbnN0IFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnbGliL3RyYW5zYWN0aW9uJyk7XG5jb25zdCBOb3RFbm91Z2hEYXRhRXJyb3IgPSByZXF1aXJlKCdsaWIvbm90LWVub3VnaC1kYXRhLWVycm9yJyk7XG5cbnRlc3QoJ3Nob3VkIHdvcmsnLCAoKSA9PiB7XG4gIGNvbnN0IHN0cmVhbSA9IG5ldyBCaW5hcnlTdHJlYW0oKTtcblxuICBzdHJlYW0uYnVmZmVyLndyaXRlVUludDgoMTApO1xuICBzdHJlYW0uYnVmZmVyLndyaXRlVUludDE2QkUoMTExKTtcbiAgc3RyZWFtLmJ1ZmZlci53cml0ZVVJbnQzMkJFKDFlNSk7XG5cbiAgY29uc3Qgc2l6ZSA9IHN0cmVhbS5sZW5ndGg7XG4gIGNvbnN0IGJ5dGVzID0gMSArIDIgKyA0O1xuXG4gIGNvbnN0IHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKHN0cmVhbSk7XG4gIGV4cGVjdCh0cmFuc2FjdGlvbi5sZW5ndGgpLnRvRXF1YWwoc2l6ZSk7XG5cbiAgZXhwZWN0KHRyYW5zYWN0aW9uLnJlYWRVSW50OCgpKS50b0VxdWFsKDEwKTtcbiAgZXhwZWN0KHRyYW5zYWN0aW9uLnJlYWRVSW50MTZCRSgpKS50b0VxdWFsKDExMSk7XG4gIGV4cGVjdCh0cmFuc2FjdGlvbi5yZWFkVUludDMyQkUoKSkudG9FcXVhbCgxZTUpO1xuXG4gIGV4cGVjdChzdHJlYW0ubGVuZ3RoKS50b0VxdWFsKHNpemUpO1xuICBleHBlY3QodHJhbnNhY3Rpb24ubGVuZ3RoKS50b0VxdWFsKHNpemUpO1xuXG4gIHRyYW5zYWN0aW9uLmNvbW1pdCgpO1xuICBleHBlY3Qoc3RyZWFtLmxlbmd0aCkudG9FcXVhbChzaXplIC0gYnl0ZXMpO1xufSk7XG5cbnRlc3QoJ3Nob3VsZCByZWFkIGJ1ZmZlcicsICgpID0+IHtcbiAgY29uc3Qgc3RyZWFtID0gbmV3IEJpbmFyeVN0cmVhbSgpO1xuICBjb25zdCB0cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbihzdHJlYW0pO1xuXG4gIHN0cmVhbS5hcHBlbmQoQnVmZmVyLmZyb20oWzEsIDIsIDMsIDRdKSk7XG4gIHN0cmVhbS5hcHBlbmQoQnVmZmVyLmZyb20oWzEsIDIsIDMsIDQsIDldKSk7XG5cbiAgY29uc3Qgc2l6ZSA9IHN0cmVhbS5sZW5ndGg7XG4gIGV4cGVjdCh0cmFuc2FjdGlvbi5sZW5ndGgpLnRvRXF1YWwoc2l6ZSk7XG5cbiAgZXhwZWN0KHRyYW5zYWN0aW9uLmluZGV4T2YoMykpLnRvQmUoMik7XG4gIGV4cGVjdCh0cmFuc2FjdGlvbi5yZWFkQnVmZmVyKDMpKS50b0VxdWFsKEJ1ZmZlci5mcm9tKFsxLCAyLCAzXSkpO1xuICBleHBlY3QodHJhbnNhY3Rpb24uZ2V0KDApKS50b0VxdWFsKDQpO1xuICBleHBlY3QodHJhbnNhY3Rpb24uaW5kZXhPZigzKSkudG9CZSgzKTtcbiAgZXhwZWN0KHRyYW5zYWN0aW9uLnJlYWRCdWZmZXIoNSkpLnRvRXF1YWwoQnVmZmVyLmZyb20oWzQsIDEsIDIsIDMsIDRdKSk7XG5cbiAgZXhwZWN0KHN0cmVhbS5sZW5ndGgpLnRvRXF1YWwoc2l6ZSk7XG4gIGV4cGVjdCh0cmFuc2FjdGlvbi5sZW5ndGgpLnRvRXF1YWwoc2l6ZSk7XG5cbiAgdHJhbnNhY3Rpb24uY29tbWl0KCk7XG4gIGV4cGVjdChzdHJlYW0ubGVuZ3RoKS50b0VxdWFsKHNpemUgLSA4KTtcbn0pO1xuXG50ZXN0KCdzaG91bGQgaGF2ZSBgYmxgIG1ldGhvZHMnLCAoKSA9PiB7XG4gIGNvbnN0IHN0cmVhbSA9IG5ldyBCaW5hcnlTdHJlYW0oKTtcbiAgY29uc3QgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oc3RyZWFtKTtcbiAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oWzEsIDIsIDMsIDRdKTtcblxuICB0cmFuc2FjdGlvbi5hcHBlbmQoYnVmZmVyKTtcbiAgZXhwZWN0KHN0cmVhbS5sZW5ndGgpLnRvRXF1YWwoYnVmZmVyLmxlbmd0aCk7XG5cbiAgZXhwZWN0KHRyYW5zYWN0aW9uLnNsaWNlKDAsIDIpKS50b0VxdWFsKGJ1ZmZlci5zbGljZSgwLCAyKSk7XG4gIGV4cGVjdCh0cmFuc2FjdGlvbi50b1N0cmluZygnaGV4JykpLnRvRXF1YWwoYnVmZmVyLnRvU3RyaW5nKCdoZXgnKSk7XG59KTtcblxudGVzdCgnc2hvdWxkIGVtaXQgTm90RW5vdWdoRGF0YUVycm9yJywgKCkgPT4ge1xuICBjb25zdCBzdHJlYW0gPSBuZXcgQmluYXJ5U3RyZWFtKCk7XG4gIGNvbnN0IHRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKHN0cmVhbSk7XG5cbiAgZXhwZWN0KCgpID0+IHRyYW5zYWN0aW9uLnJlYWRVSW50QkUoMikpLnRvVGhyb3dFcnJvcihOb3RFbm91Z2hEYXRhRXJyb3IpO1xuXG4gIHRyYW5zYWN0aW9uLmFwcGVuZChCdWZmZXIuYWxsb2MoMikpO1xuICBleHBlY3QoKCkgPT4gdHJhbnNhY3Rpb24ucmVhZEJ1ZmZlcigzKSkudG9UaHJvd0Vycm9yKE5vdEVub3VnaERhdGFFcnJvcik7XG59KTtcbiJdfQ==