a1e0a6c49525d6b35fdcc2f889700028
'use strict';

/* istanbul ignore next */var cov_24qejd0d9f = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/internal/meta.js',
      hash = '75aac449ad81ce0951e6f3d356d1358b1ca0b60c',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/internal/meta.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 16
        },
        end: {
          line: 3,
          column: 43
        }
      },
      '1': {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 57,
          column: 2
        }
      },
      '2': {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 28
        }
      },
      '3': {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 26
        }
      },
      '4': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 29
        }
      },
      '5': {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 31
        }
      },
      '6': {
        start: {
          line: 37,
          column: 17
        },
        end: {
          line: 37,
          column: 31
        }
      },
      '7': {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      '8': {
        start: {
          line: 40,
          column: 6
        },
        end: {
          line: 40,
          column: 32
        }
      },
      '9': {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 41,
          column: 38
        }
      },
      '10': {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 16
        }
      },
      '11': {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      '12': {
        start: {
          line: 53,
          column: 6
        },
        end: {
          line: 53,
          column: 32
        }
      },
      '13': {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 54,
          column: 35
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 12,
            column: 3
          }
        },
        loc: {
          start: {
            line: 12,
            column: 16
          },
          end: {
            line: 21,
            column: 3
          }
        },
        line: 12
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        },
        loc: {
          start: {
            line: 27,
            column: 14
          },
          end: {
            line: 29,
            column: 3
          }
        },
        line: 27
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        },
        loc: {
          start: {
            line: 36,
            column: 25
          },
          end: {
            line: 45,
            column: 3
          }
        },
        line: 36
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 51,
            column: 3
          }
        },
        loc: {
          start: {
            line: 51,
            column: 25
          },
          end: {
            line: 56,
            column: 3
          }
        },
        line: 51
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        }, {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        }],
        line: 39
      },
      '1': {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        }, {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        }],
        line: 52
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const symbols = /* istanbul ignore next */(cov_24qejd0d9f.s[0]++, require('internal/symbols'));

/**
 * Store extended info between encode/decode calls.
 */
/* istanbul ignore next */cov_24qejd0d9f.s[1]++;
module.exports = class Metadata {
  /**
   * @class Metadata
   */
  constructor() {
    /* istanbul ignore next */cov_24qejd0d9f.f[0]++;
    cov_24qejd0d9f.s[2]++;

    // The number of bytes are processed.
    this[symbols.bytes] = 0;

    // Root node.
    /* istanbul ignore next */cov_24qejd0d9f.s[3]++;
    this.node = undefined;

    // Current node.
    /* istanbul ignore next */cov_24qejd0d9f.s[4]++;
    this.current = undefined;
  }

  /**
   * The number of bytes are processed.
   * @returns {number}
   */
  get bytes() {
    /* istanbul ignore next */cov_24qejd0d9f.f[1]++;
    cov_24qejd0d9f.s[5]++;

    return this[symbols.bytes];
  }

  /**
   * Clone provided metadata.
   * @param {Metadata} metadata
   * @returns {Metadata}
   */
  static clone(metadata) {
    /* istanbul ignore next */cov_24qejd0d9f.f[2]++;

    const meta = /* istanbul ignore next */(cov_24qejd0d9f.s[6]++, new Metadata());

    /* istanbul ignore next */cov_24qejd0d9f.s[7]++;
    if (metadata instanceof Metadata) {
      /* istanbul ignore next */cov_24qejd0d9f.b[0][0]++;
      cov_24qejd0d9f.s[8]++;

      meta.node = metadata.node;
      /* istanbul ignore next */cov_24qejd0d9f.s[9]++;
      meta.current = metadata.current;
    } else /* istanbul ignore next */{
      cov_24qejd0d9f.b[0][1]++;
    }

    cov_24qejd0d9f.s[10]++;
    return meta;
  }

  /**
   * Remove internal references to processed nodes.
   * @param {Metadata} metadata
   */
  static clean(metadata) {
    /* istanbul ignore next */cov_24qejd0d9f.f[3]++;
    cov_24qejd0d9f.s[11]++;

    if (metadata instanceof Metadata) {
      /* istanbul ignore next */cov_24qejd0d9f.b[1][0]++;
      cov_24qejd0d9f.s[12]++;

      metadata.node = undefined;
      /* istanbul ignore next */cov_24qejd0d9f.s[13]++;
      metadata.current = undefined;
    } else /* istanbul ignore next */{
      cov_24qejd0d9f.b[1][1]++;
    }
  }
};