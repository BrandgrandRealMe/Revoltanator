d4cac1a82e1de5faadb539801fa9d1ac
'use strict';

/* istanbul ignore next */var cov_1a938iqz3j = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/string.js',
      hash = '122e94b420a325efbeea5cd3b5f7d58d12e18ea0',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/string.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 19
        },
        end: {
          line: 3,
          column: 38
        }
      },
      '1': {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 4,
          column: 63
        }
      },
      '2': {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 24
        }
      },
      '3': {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 17,
          column: 3
        }
      },
      '4': {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 63
        }
      },
      '5': {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 25,
          column: 3
        }
      },
      '6': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 24,
          column: 6
        }
      },
      '7': {
        start: {
          line: 23,
          column: 28
        },
        end: {
          line: 23,
          column: 34
        }
      },
      '8': {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 33,
          column: 3
        }
      },
      '9': {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 32,
          column: 6
        }
      },
      '10': {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 49,
          column: 3
        }
      },
      '11': {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 48,
          column: 6
        }
      },
      '12': {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 54
        }
      },
      '13': {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 65,
          column: 3
        }
      },
      '14': {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 64,
          column: 6
        }
      },
      '15': {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 50
        }
      },
      '16': {
        start: {
          line: 67,
          column: 2
        },
        end: {
          line: 67,
          column: 54
        }
      },
      '17': {
        start: {
          line: 76,
          column: 2
        },
        end: {
          line: 83,
          column: 4
        }
      },
      '18': {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 55
        }
      },
      '19': {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 79,
          column: 29
        }
      },
      '20': {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 25
        }
      },
      '21': {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 82,
          column: 34
        }
      },
      '22': {
        start: {
          line: 92,
          column: 2
        },
        end: {
          line: 104,
          column: 4
        }
      },
      '23': {
        start: {
          line: 93,
          column: 18
        },
        end: {
          line: 93,
          column: 36
        }
      },
      '24': {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 97,
          column: 5
        }
      },
      '25': {
        start: {
          line: 96,
          column: 6
        },
        end: {
          line: 96,
          column: 71
        }
      },
      '26': {
        start: {
          line: 99,
          column: 26
        },
        end: {
          line: 99,
          column: 35
        }
      },
      '27': {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 49
        }
      },
      '28': {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 33
        }
      },
      '29': {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 44
        }
      },
      '30': {
        start: {
          line: 114,
          column: 2
        },
        end: {
          line: 125,
          column: 4
        }
      },
      '31': {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 115,
          column: 29
        }
      },
      '32': {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 119,
          column: 5
        }
      },
      '33': {
        start: {
          line: 118,
          column: 6
        },
        end: {
          line: 118,
          column: 68
        }
      },
      '34': {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 44
        }
      },
      '35': {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 123,
          column: 29
        }
      },
      '36': {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 124,
          column: 30
        }
      },
      '37': {
        start: {
          line: 135,
          column: 2
        },
        end: {
          line: 140,
          column: 4
        }
      },
      '38': {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 40
        }
      },
      '39': {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 24
        }
      },
      '40': {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 139,
          column: 34
        }
      },
      '41': {
        start: {
          line: 150,
          column: 2
        },
        end: {
          line: 162,
          column: 4
        }
      },
      '42': {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 151,
          column: 29
        }
      },
      '43': {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 24
        }
      },
      '44': {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 155,
          column: 75
        }
      },
      '45': {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 156,
          column: 37
        }
      },
      '46': {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 44
        }
      },
      '47': {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 160,
          column: 29
        }
      },
      '48': {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 161,
          column: 31
        }
      },
      '49': {
        start: {
          line: 172,
          column: 2
        },
        end: {
          line: 183,
          column: 4
        }
      },
      '50': {
        start: {
          line: 173,
          column: 17
        },
        end: {
          line: 173,
          column: 48
        }
      },
      '51': {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 177,
          column: 5
        }
      },
      '52': {
        start: {
          line: 176,
          column: 6
        },
        end: {
          line: 176,
          column: 66
        }
      },
      '53': {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 40
        }
      },
      '54': {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 180,
          column: 50
        }
      },
      '55': {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 182,
          column: 34
        }
      },
      '56': {
        start: {
          line: 193,
          column: 2
        },
        end: {
          line: 197,
          column: 4
        }
      },
      '57': {
        start: {
          line: 194,
          column: 17
        },
        end: {
          line: 194,
          column: 51
        }
      },
      '58': {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 196,
          column: 44
        }
      },
      '59': {
        start: {
          line: 207,
          column: 2
        },
        end: {
          line: 220,
          column: 4
        }
      },
      '60': {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 208,
          column: 21
        }
      },
      '61': {
        start: {
          line: 210,
          column: 20
        },
        end: {
          line: 210,
          column: 24
        }
      },
      '62': {
        start: {
          line: 212,
          column: 27
        },
        end: {
          line: 212,
          column: 44
        }
      },
      '63': {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 55
        }
      },
      '64': {
        start: {
          line: 215,
          column: 4
        },
        end: {
          line: 215,
          column: 36
        }
      },
      '65': {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 216,
          column: 44
        }
      },
      '66': {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 218,
          column: 29
        }
      },
      '67': {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 219,
          column: 31
        }
      },
      '68': {
        start: {
          line: 230,
          column: 2
        },
        end: {
          line: 238,
          column: 4
        }
      },
      '69': {
        start: {
          line: 231,
          column: 17
        },
        end: {
          line: 231,
          column: 31
        }
      },
      '70': {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 232,
          column: 26
        }
      },
      '71': {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 40
        }
      },
      '72': {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 235,
          column: 24
        }
      },
      '73': {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 237,
          column: 34
        }
      },
      '74': {
        start: {
          line: 245,
          column: 2
        },
        end: {
          line: 247,
          column: 3
        }
      },
      '75': {
        start: {
          line: 246,
          column: 4
        },
        end: {
          line: 246,
          column: 66
        }
      },
      '76': {
        start: {
          line: 255,
          column: 2
        },
        end: {
          line: 259,
          column: 3
        }
      },
      '77': {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 258,
          column: 6
        }
      }
    },
    fnMap: {
      '0': {
        name: 'string',
        decl: {
          start: {
            line: 14,
            column: 9
          },
          end: {
            line: 14,
            column: 15
          }
        },
        loc: {
          start: {
            line: 14,
            column: 44
          },
          end: {
            line: 68,
            column: 1
          }
        },
        line: 14
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 23,
            column: 22
          },
          end: {
            line: 23,
            column: 23
          }
        },
        loc: {
          start: {
            line: 23,
            column: 28
          },
          end: {
            line: 23,
            column: 34
          }
        },
        line: 23
      },
      '2': {
        name: 'encodeNullString',
        decl: {
          start: {
            line: 75,
            column: 9
          },
          end: {
            line: 75,
            column: 25
          }
        },
        loc: {
          start: {
            line: 75,
            column: 36
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 75
      },
      '3': {
        name: 'encode',
        decl: {
          start: {
            line: 76,
            column: 18
          },
          end: {
            line: 76,
            column: 24
          }
        },
        loc: {
          start: {
            line: 76,
            column: 41
          },
          end: {
            line: 83,
            column: 3
          }
        },
        line: 76
      },
      '4': {
        name: 'decodeNullString',
        decl: {
          start: {
            line: 91,
            column: 9
          },
          end: {
            line: 91,
            column: 25
          }
        },
        loc: {
          start: {
            line: 91,
            column: 36
          },
          end: {
            line: 105,
            column: 1
          }
        },
        line: 91
      },
      '5': {
        name: 'decode',
        decl: {
          start: {
            line: 92,
            column: 18
          },
          end: {
            line: 92,
            column: 24
          }
        },
        loc: {
          start: {
            line: 92,
            column: 34
          },
          end: {
            line: 104,
            column: 3
          }
        },
        line: 92
      },
      '6': {
        name: 'encodeFixedString',
        decl: {
          start: {
            line: 113,
            column: 9
          },
          end: {
            line: 113,
            column: 26
          }
        },
        loc: {
          start: {
            line: 113,
            column: 43
          },
          end: {
            line: 126,
            column: 1
          }
        },
        line: 113
      },
      '7': {
        name: 'encode',
        decl: {
          start: {
            line: 114,
            column: 18
          },
          end: {
            line: 114,
            column: 24
          }
        },
        loc: {
          start: {
            line: 114,
            column: 41
          },
          end: {
            line: 125,
            column: 3
          }
        },
        line: 114
      },
      '8': {
        name: 'decodeFixedString',
        decl: {
          start: {
            line: 134,
            column: 9
          },
          end: {
            line: 134,
            column: 26
          }
        },
        loc: {
          start: {
            line: 134,
            column: 43
          },
          end: {
            line: 141,
            column: 1
          }
        },
        line: 134
      },
      '9': {
        name: 'decode',
        decl: {
          start: {
            line: 135,
            column: 18
          },
          end: {
            line: 135,
            column: 24
          }
        },
        loc: {
          start: {
            line: 135,
            column: 34
          },
          end: {
            line: 140,
            column: 3
          }
        },
        line: 135
      },
      '10': {
        name: 'encodeSizePrefixedString',
        decl: {
          start: {
            line: 149,
            column: 9
          },
          end: {
            line: 149,
            column: 33
          }
        },
        loc: {
          start: {
            line: 149,
            column: 50
          },
          end: {
            line: 163,
            column: 1
          }
        },
        line: 149
      },
      '11': {
        name: 'encode',
        decl: {
          start: {
            line: 150,
            column: 18
          },
          end: {
            line: 150,
            column: 24
          }
        },
        loc: {
          start: {
            line: 150,
            column: 41
          },
          end: {
            line: 162,
            column: 3
          }
        },
        line: 150
      },
      '12': {
        name: 'decodeSizePrefixedString',
        decl: {
          start: {
            line: 171,
            column: 9
          },
          end: {
            line: 171,
            column: 33
          }
        },
        loc: {
          start: {
            line: 171,
            column: 50
          },
          end: {
            line: 184,
            column: 1
          }
        },
        line: 171
      },
      '13': {
        name: 'decode',
        decl: {
          start: {
            line: 172,
            column: 18
          },
          end: {
            line: 172,
            column: 24
          }
        },
        loc: {
          start: {
            line: 172,
            column: 34
          },
          end: {
            line: 183,
            column: 3
          }
        },
        line: 172
      },
      '14': {
        name: 'encodingLengthSizePrefixedString',
        decl: {
          start: {
            line: 192,
            column: 9
          },
          end: {
            line: 192,
            column: 41
          }
        },
        loc: {
          start: {
            line: 192,
            column: 58
          },
          end: {
            line: 198,
            column: 1
          }
        },
        line: 192
      },
      '15': {
        name: 'encodingLength',
        decl: {
          start: {
            line: 193,
            column: 18
          },
          end: {
            line: 193,
            column: 32
          }
        },
        loc: {
          start: {
            line: 193,
            column: 40
          },
          end: {
            line: 197,
            column: 3
          }
        },
        line: 193
      },
      '16': {
        name: 'encodeCallback',
        decl: {
          start: {
            line: 206,
            column: 9
          },
          end: {
            line: 206,
            column: 23
          }
        },
        loc: {
          start: {
            line: 206,
            column: 44
          },
          end: {
            line: 221,
            column: 1
          }
        },
        line: 206
      },
      '17': {
        name: 'encode',
        decl: {
          start: {
            line: 207,
            column: 18
          },
          end: {
            line: 207,
            column: 24
          }
        },
        loc: {
          start: {
            line: 207,
            column: 41
          },
          end: {
            line: 220,
            column: 3
          }
        },
        line: 207
      },
      '18': {
        name: 'decodeCallback',
        decl: {
          start: {
            line: 229,
            column: 9
          },
          end: {
            line: 229,
            column: 23
          }
        },
        loc: {
          start: {
            line: 229,
            column: 44
          },
          end: {
            line: 239,
            column: 1
          }
        },
        line: 229
      },
      '19': {
        name: 'decode',
        decl: {
          start: {
            line: 230,
            column: 18
          },
          end: {
            line: 230,
            column: 24
          }
        },
        loc: {
          start: {
            line: 230,
            column: 34
          },
          end: {
            line: 238,
            column: 3
          }
        },
        line: 230
      },
      '20': {
        name: 'checkLengthType',
        decl: {
          start: {
            line: 244,
            column: 9
          },
          end: {
            line: 244,
            column: 24
          }
        },
        loc: {
          start: {
            line: 244,
            column: 33
          },
          end: {
            line: 248,
            column: 1
          }
        },
        line: 244
      },
      '21': {
        name: 'checkLength',
        decl: {
          start: {
            line: 254,
            column: 9
          },
          end: {
            line: 254,
            column: 20
          }
        },
        loc: {
          start: {
            line: 254,
            column: 47
          },
          end: {
            line: 260,
            column: 1
          }
        },
        line: 254
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 14,
            column: 24
          },
          end: {
            line: 14,
            column: 42
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 14,
            column: 35
          },
          end: {
            line: 14,
            column: 42
          }
        }],
        line: 14
      },
      '1': {
        loc: {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 17,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 17,
            column: 3
          }
        }, {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 17,
            column: 3
          }
        }],
        line: 15
      },
      '2': {
        loc: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        }, {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        }],
        line: 19
      },
      '3': {
        loc: {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        }, {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        }],
        line: 27
      },
      '4': {
        loc: {
          start: {
            line: 35,
            column: 2
          },
          end: {
            line: 49,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 35,
            column: 2
          },
          end: {
            line: 49,
            column: 3
          }
        }, {
          start: {
            line: 35,
            column: 2
          },
          end: {
            line: 49,
            column: 3
          }
        }],
        line: 35
      },
      '5': {
        loc: {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 65,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 65,
            column: 3
          }
        }, {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 65,
            column: 3
          }
        }],
        line: 51
      },
      '6': {
        loc: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        }, {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        }],
        line: 95
      },
      '7': {
        loc: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        }, {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        }],
        line: 117
      },
      '8': {
        loc: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        }, {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        }],
        line: 175
      },
      '9': {
        loc: {
          start: {
            line: 245,
            column: 2
          },
          end: {
            line: 247,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 245,
            column: 2
          },
          end: {
            line: 247,
            column: 3
          }
        }, {
          start: {
            line: 245,
            column: 2
          },
          end: {
            line: 247,
            column: 3
          }
        }],
        line: 245
      },
      '10': {
        loc: {
          start: {
            line: 255,
            column: 2
          },
          end: {
            line: 259,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 255,
            column: 2
          },
          end: {
            line: 259,
            column: 3
          }
        }, {
          start: {
            line: 255,
            column: 2
          },
          end: {
            line: 259,
            column: 3
          }
        }],
        line: 255
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0,
      '48': 0,
      '49': 0,
      '50': 0,
      '51': 0,
      '52': 0,
      '53': 0,
      '54': 0,
      '55': 0,
      '56': 0,
      '57': 0,
      '58': 0,
      '59': 0,
      '60': 0,
      '61': 0,
      '62': 0,
      '63': 0,
      '64': 0,
      '65': 0,
      '66': 0,
      '67': 0,
      '68': 0,
      '69': 0,
      '70': 0,
      '71': 0,
      '72': 0,
      '73': 0,
      '74': 0,
      '75': 0,
      '76': 0,
      '77': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0
    },
    b: {
      '0': [0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0],
      '10': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const { isType } = /* istanbul ignore next */(cov_1a938iqz3j.s[0]++, require('lib/util'));
const NotEnoughDataError = /* istanbul ignore next */(cov_1a938iqz3j.s[1]++, require('lib/not-enough-data-error'));

/* istanbul ignore next */cov_1a938iqz3j.s[2]++;
module.exports = string;

/**
 * Type for strings.
 * @param {Object|number|null} length The number of bytes or type for size-prefixed strings.
 * @param {string} encoding
 * @returns {Object}
 */
function string(length, encoding = /* istanbul ignore next */(cov_1a938iqz3j.b[0][0]++, 'ascii')) {
  /* istanbul ignore next */cov_1a938iqz3j.f[0]++;
  cov_1a938iqz3j.s[3]++;

  if (!Buffer.isEncoding(encoding)) {
    /* istanbul ignore next */cov_1a938iqz3j.b[1][0]++;
    cov_1a938iqz3j.s[4]++;

    throw new Error('Argument #2 should be an encoding name.');
  } else /* istanbul ignore next */{
    cov_1a938iqz3j.b[1][1]++;
  }

  cov_1a938iqz3j.s[5]++;
  if (typeof length === 'number') {
    /* istanbul ignore next */cov_1a938iqz3j.b[2][0]++;
    cov_1a938iqz3j.s[6]++;

    return {
      encode: encodeFixedString(length, encoding),
      decode: decodeFixedString(length, encoding),
      encodingLength: () => {
        /* istanbul ignore next */cov_1a938iqz3j.f[1]++;
        cov_1a938iqz3j.s[7]++;
        return length;
      }
    };
  } else /* istanbul ignore next */{
    cov_1a938iqz3j.b[2][1]++;
  }

  cov_1a938iqz3j.s[8]++;
  if (isType(length)) {
    /* istanbul ignore next */cov_1a938iqz3j.b[3][0]++;
    cov_1a938iqz3j.s[9]++;

    return {
      encode: encodeSizePrefixedString(length, encoding),
      decode: decodeSizePrefixedString(length, encoding),
      encodingLength: encodingLengthSizePrefixedString(length, encoding)
    };
  } else /* istanbul ignore next */{
    cov_1a938iqz3j.b[3][1]++;
  }

  cov_1a938iqz3j.s[10]++;
  if (length === null) {
    /* istanbul ignore next */cov_1a938iqz3j.b[4][0]++;
    cov_1a938iqz3j.s[11]++;

    return {
      encode: encodeNullString(encoding),
      decode: decodeNullString(encoding),

      /**
       * Get the number bytes to encode provided string.
       * @param {string} value
       * @returns {number}
       */
      encodingLength(value) {
        /* istanbul ignore next */cov_1a938iqz3j.s[12]++;

        return Buffer.byteLength(value, encoding) + 1;
      }
    };
  } else /* istanbul ignore next */{
    cov_1a938iqz3j.b[4][1]++;
  }

  cov_1a938iqz3j.s[13]++;
  if (typeof length === 'function') {
    /* istanbul ignore next */cov_1a938iqz3j.b[5][0]++;
    cov_1a938iqz3j.s[14]++;

    return {
      encode: encodeCallback(length, encoding),
      decode: decodeCallback(length, encoding),

      /**
       * Get the number bytes to encode provided string.
       * @param {string} value
       * @returns {number}
       */
      encodingLength(value) {
        /* istanbul ignore next */cov_1a938iqz3j.s[15]++;

        return Buffer.byteLength(value, encoding);
      }
    };
  } else /* istanbul ignore next */{
    cov_1a938iqz3j.b[5][1]++;
  }

  cov_1a938iqz3j.s[16]++;
  throw new TypeError('Unknown type of argument #1.');
}

/**
 * Encode null-terminated string.
 * @param {string} encoding
 * @returns {Function}
 */
function encodeNullString(encoding) {
  /* istanbul ignore next */cov_1a938iqz3j.f[2]++;
  cov_1a938iqz3j.s[17]++;

  return function encode(value, wstream) {
    /* istanbul ignore next */cov_1a938iqz3j.f[3]++;

    const buf = /* istanbul ignore next */(cov_1a938iqz3j.s[18]++, Buffer.from(value.toString(), encoding));

    /* istanbul ignore next */cov_1a938iqz3j.s[19]++;
    wstream.writeBuffer(buf);
    /* istanbul ignore next */cov_1a938iqz3j.s[20]++;
    wstream.writeInt8(0);

    /* istanbul ignore next */cov_1a938iqz3j.s[21]++;
    encode.bytes = buf.length + 1;
  };
}

/**
 * Decode null-terminated string.
 * @param {string} encoding
 * @returns {Function}
 */
function decodeNullString(encoding) {
  /* istanbul ignore next */cov_1a938iqz3j.f[4]++;
  cov_1a938iqz3j.s[22]++;

  return function decode(rstream) {
    /* istanbul ignore next */cov_1a938iqz3j.f[5]++;

    const bytes = /* istanbul ignore next */(cov_1a938iqz3j.s[23]++, rstream.indexOf(0));

    /* istanbul ignore next */cov_1a938iqz3j.s[24]++;
    if (bytes === -1) {
      /* istanbul ignore next */cov_1a938iqz3j.b[6][0]++;
      cov_1a938iqz3j.s[25]++;

      throw new NotEnoughDataError(rstream.length + 1, rstream.length);
    } else /* istanbul ignore next */{
      cov_1a938iqz3j.b[6][1]++;
    }

    const bytesWithNull = /* istanbul ignore next */(cov_1a938iqz3j.s[26]++, bytes + 1);
    const buf = /* istanbul ignore next */(cov_1a938iqz3j.s[27]++, rstream.readBuffer(bytesWithNull));
    /* istanbul ignore next */cov_1a938iqz3j.s[28]++;
    decode.bytes = bytesWithNull;

    /* istanbul ignore next */cov_1a938iqz3j.s[29]++;
    return buf.toString(encoding, 0, bytes);
  };
}

/**
 * Encode fixed-length string.
 * @param {number} size The length of the string.
 * @param {string} encoding
 * @returns {Function}
 */
function encodeFixedString(size, encoding) {
  /* istanbul ignore next */cov_1a938iqz3j.f[6]++;
  cov_1a938iqz3j.s[30]++;

  return function encode(value, wstream) {
    /* istanbul ignore next */cov_1a938iqz3j.f[7]++;
    cov_1a938iqz3j.s[31]++;

    value = value.toString(); // eslint-disable-line no-param-reassign

    /* istanbul ignore next */cov_1a938iqz3j.s[32]++;
    if (Buffer.byteLength(value, encoding) !== size) {
      /* istanbul ignore next */cov_1a938iqz3j.b[7][0]++;
      cov_1a938iqz3j.s[33]++;

      throw new Error(`Size of string should be ${size} in bytes.`);
    } else /* istanbul ignore next */{
      cov_1a938iqz3j.b[7][1]++;
    }

    const buf = /* istanbul ignore next */(cov_1a938iqz3j.s[34]++, Buffer.from(value, encoding));

    /* istanbul ignore next */cov_1a938iqz3j.s[35]++;
    wstream.writeBuffer(buf);
    /* istanbul ignore next */cov_1a938iqz3j.s[36]++;
    encode.bytes = buf.length;
  };
}

/**
 * Decode fixed-length string.
 * @param {number} size The length of the string.
 * @param {string} encoding
 * @returns {Function}
 */
function decodeFixedString(size, encoding) {
  /* istanbul ignore next */cov_1a938iqz3j.f[8]++;
  cov_1a938iqz3j.s[37]++;

  return function decode(rstream) {
    /* istanbul ignore next */cov_1a938iqz3j.f[9]++;

    const buf = /* istanbul ignore next */(cov_1a938iqz3j.s[38]++, rstream.readBuffer(size));
    /* istanbul ignore next */cov_1a938iqz3j.s[39]++;
    decode.bytes = size;

    /* istanbul ignore next */cov_1a938iqz3j.s[40]++;
    return buf.toString(encoding);
  };
}

/**
 * Encode size-prefixed string.
 * @param {Object} type Number type.
 * @param {string} encoding
 * @returns {number}
 */
function encodeSizePrefixedString(type, encoding) {
  /* istanbul ignore next */cov_1a938iqz3j.f[10]++;
  cov_1a938iqz3j.s[41]++;

  return function encode(value, wstream) {
    /* istanbul ignore next */cov_1a938iqz3j.f[11]++;
    cov_1a938iqz3j.s[42]++;

    value = value.toString(); // eslint-disable-line no-param-reassign

    const context = /* istanbul ignore next */(cov_1a938iqz3j.s[43]++, this);

    /* istanbul ignore next */cov_1a938iqz3j.s[44]++;
    type.encode.call(context, Buffer.byteLength(value, encoding), wstream);
    /* istanbul ignore next */cov_1a938iqz3j.s[45]++;
    encode.bytes = type.encode.bytes;

    const buf = /* istanbul ignore next */(cov_1a938iqz3j.s[46]++, Buffer.from(value, encoding));

    /* istanbul ignore next */cov_1a938iqz3j.s[47]++;
    wstream.writeBuffer(buf);
    /* istanbul ignore next */cov_1a938iqz3j.s[48]++;
    encode.bytes += buf.length;
  };
}

/**
 * Decode size-prefixed string.
 * @param {Object} type Number type.
 * @param {string} encoding
 * @returns {number}
 */
function decodeSizePrefixedString(type, encoding) {
  /* istanbul ignore next */cov_1a938iqz3j.f[12]++;
  cov_1a938iqz3j.s[49]++;

  return function decode(rstream) {
    /* istanbul ignore next */cov_1a938iqz3j.f[13]++;

    const size = /* istanbul ignore next */(cov_1a938iqz3j.s[50]++, type.decode.call(this, rstream));

    /* istanbul ignore next */cov_1a938iqz3j.s[51]++;
    if (typeof size !== 'number') {
      /* istanbul ignore next */cov_1a938iqz3j.b[8][0]++;
      cov_1a938iqz3j.s[52]++;

      throw new TypeError('Size of a string should be a number.');
    } else /* istanbul ignore next */{
      cov_1a938iqz3j.b[8][1]++;
    }

    const buf = /* istanbul ignore next */(cov_1a938iqz3j.s[53]++, rstream.readBuffer(size));
    /* istanbul ignore next */cov_1a938iqz3j.s[54]++;
    decode.bytes = type.decode.bytes + buf.length;

    /* istanbul ignore next */cov_1a938iqz3j.s[55]++;
    return buf.toString(encoding);
  };
}

/**
 * Get the number of bytes of size-prefixed string.
 * @param {Object} type Number type.
 * @param {string} encoding
 * @returns {number}
 */
function encodingLengthSizePrefixedString(type, encoding) {
  /* istanbul ignore next */cov_1a938iqz3j.f[14]++;
  cov_1a938iqz3j.s[56]++;

  return function encodingLength(value) {
    /* istanbul ignore next */cov_1a938iqz3j.f[15]++;

    const size = /* istanbul ignore next */(cov_1a938iqz3j.s[57]++, Buffer.byteLength(value, encoding));

    /* istanbul ignore next */cov_1a938iqz3j.s[58]++;
    return type.encodingLength(size) + size;
  };
}

/**
 * Encode the string with dynamic evaluated size.
 * @param {Function} callback Function that returns a number.
 * @param {string} encoding
 * @returns {number}
 */
function encodeCallback(callback, encoding) {
  /* istanbul ignore next */cov_1a938iqz3j.f[16]++;
  cov_1a938iqz3j.s[59]++;

  return function encode(value, wstream) {
    /* istanbul ignore next */cov_1a938iqz3j.f[17]++;
    cov_1a938iqz3j.s[60]++;

    encode.bytes = 0;

    const context = /* istanbul ignore next */(cov_1a938iqz3j.s[61]++, this);

    const expectedLength = /* istanbul ignore next */(cov_1a938iqz3j.s[62]++, callback(context));
    const buf = /* istanbul ignore next */(cov_1a938iqz3j.s[63]++, Buffer.from(value.toString(), encoding));

    /* istanbul ignore next */cov_1a938iqz3j.s[64]++;
    checkLengthType(expectedLength);
    /* istanbul ignore next */cov_1a938iqz3j.s[65]++;
    checkLength(expectedLength, buf.length);

    /* istanbul ignore next */cov_1a938iqz3j.s[66]++;
    wstream.writeBuffer(buf);
    /* istanbul ignore next */cov_1a938iqz3j.s[67]++;
    encode.bytes += buf.length;
  };
}

/**
 * Decode the string with dynamic evaluated size.
 * @param {Function} callback Function that returns a number.
 * @param {string} encoding
 * @returns {number}
 */
function decodeCallback(callback, encoding) {
  /* istanbul ignore next */cov_1a938iqz3j.f[18]++;
  cov_1a938iqz3j.s[68]++;

  return function decode(rstream) {
    /* istanbul ignore next */cov_1a938iqz3j.f[19]++;

    const size = /* istanbul ignore next */(cov_1a938iqz3j.s[69]++, callback(this));
    /* istanbul ignore next */cov_1a938iqz3j.s[70]++;
    checkLengthType(size);

    const buf = /* istanbul ignore next */(cov_1a938iqz3j.s[71]++, rstream.readBuffer(size));
    /* istanbul ignore next */cov_1a938iqz3j.s[72]++;
    decode.bytes = size;

    /* istanbul ignore next */cov_1a938iqz3j.s[73]++;
    return buf.toString(encoding);
  };
}

/**
 * @param {any} length
 */
function checkLengthType(length) {
  /* istanbul ignore next */cov_1a938iqz3j.f[20]++;
  cov_1a938iqz3j.s[74]++;

  if (typeof length !== 'number') {
    /* istanbul ignore next */cov_1a938iqz3j.b[9][0]++;
    cov_1a938iqz3j.s[75]++;

    throw new TypeError('Length of a buffer should be a number.');
  } else /* istanbul ignore next */{
    cov_1a938iqz3j.b[9][1]++;
  }
}

/**
 * @param {number} requiredSize
 * @param {number} havingSize
 */
function checkLength(requiredSize, havingSize) {
  /* istanbul ignore next */cov_1a938iqz3j.f[21]++;
  cov_1a938iqz3j.s[76]++;

  if (requiredSize !== havingSize) {
    /* istanbul ignore next */cov_1a938iqz3j.b[10][0]++;
    cov_1a938iqz3j.s[77]++;

    throw new Error(`Buffer required length ${requiredSize} instead of ${havingSize}`);
  } else /* istanbul ignore next */{
    cov_1a938iqz3j.b[10][1]++;
  }
}