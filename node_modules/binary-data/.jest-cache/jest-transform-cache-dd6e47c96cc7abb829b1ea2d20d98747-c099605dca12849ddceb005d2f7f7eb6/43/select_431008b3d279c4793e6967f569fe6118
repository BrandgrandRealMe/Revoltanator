a3450d41be315101460b82b43362501f
'use strict';

/* istanbul ignore next */var cov_1edq2hgid4 = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/select.js',
      hash = 'f611e50e9ee552629c175f25545b6f3a0653cf2c',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/select.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 16
        },
        end: {
          line: 3,
          column: 43
        }
      },
      '1': {
        start: {
          line: 4,
          column: 25
        },
        end: {
          line: 4,
          column: 46
        }
      },
      '2': {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 41
        }
      },
      '3': {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 24
        }
      },
      '4': {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 18,
          column: 3
        }
      },
      '5': {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 71
        }
      },
      '6': {
        start: {
          line: 20,
          column: 17
        },
        end: {
          line: 24,
          column: 3
        }
      },
      '7': {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 26,
          column: 16
        }
      },
      '8': {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 21
        }
      },
      '9': {
        start: {
          line: 36,
          column: 20
        },
        end: {
          line: 36,
          column: 40
        }
      },
      '10': {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 51,
          column: 5
        }
      },
      '11': {
        start: {
          line: 40,
          column: 27
        },
        end: {
          line: 40,
          column: 63
        }
      },
      '12': {
        start: {
          line: 42,
          column: 6
        },
        end: {
          line: 44,
          column: 7
        }
      },
      '13': {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 17
        }
      },
      '14': {
        start: {
          line: 46,
          column: 6
        },
        end: {
          line: 46,
          column: 35
        }
      },
      '15': {
        start: {
          line: 47,
          column: 6
        },
        end: {
          line: 47,
          column: 30
        }
      },
      '16': {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 49,
          column: 35
        }
      },
      '17': {
        start: {
          line: 50,
          column: 6
        },
        end: {
          line: 50,
          column: 26
        }
      },
      '18': {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 32
        }
      }
    },
    fnMap: {
      '0': {
        name: 'select',
        decl: {
          start: {
            line: 15,
            column: 9
          },
          end: {
            line: 15,
            column: 15
          }
        },
        loc: {
          start: {
            line: 15,
            column: 30
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 15
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 22,
            column: 12
          },
          end: {
            line: 22,
            column: 13
          }
        },
        loc: {
          start: {
            line: 22,
            column: 18
          },
          end: {
            line: 22,
            column: 20
          }
        },
        line: 22
      },
      '2': {
        name: 'decode',
        decl: {
          start: {
            line: 34,
            column: 11
          },
          end: {
            line: 34,
            column: 17
          }
        },
        loc: {
          start: {
            line: 34,
            column: 27
          },
          end: {
            line: 54,
            column: 3
          }
        },
        line: 34
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 16,
            column: 2
          },
          end: {
            line: 18,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 16,
            column: 2
          },
          end: {
            line: 18,
            column: 3
          }
        }, {
          start: {
            line: 16,
            column: 2
          },
          end: {
            line: 18,
            column: 3
          }
        }],
        line: 16
      },
      '1': {
        loc: {
          start: {
            line: 42,
            column: 6
          },
          end: {
            line: 44,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 42,
            column: 6
          },
          end: {
            line: 44,
            column: 7
          }
        }, {
          start: {
            line: 42,
            column: 6
          },
          end: {
            line: 44,
            column: 7
          }
        }],
        line: 42
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const symbols = /* istanbul ignore next */(cov_1edq2hgid4.s[0]++, require('internal/symbols'));
const { decodeCommon } = /* istanbul ignore next */(cov_1edq2hgid4.s[1]++, require('lib/decode'));
const Metadata = /* istanbul ignore next */(cov_1edq2hgid4.s[2]++, require('internal/meta'));

/* istanbul ignore next */cov_1edq2hgid4.s[3]++;
module.exports = select;

/**
 * Type for multiple conditions.
 * Works almost like `switch` operator.
 * @param {...any} whenTypes The `when` type.
 * @returns {Object}
 */
function select(...whenTypes) {
  /* istanbul ignore next */cov_1edq2hgid4.f[0]++;
  cov_1edq2hgid4.s[4]++;

  if (whenTypes.length === 0) {
    /* istanbul ignore next */cov_1edq2hgid4.b[0][0]++;
    cov_1edq2hgid4.s[5]++;

    throw new TypeError('You should set at least one condition type.');
  } else /* istanbul ignore next */{
    cov_1edq2hgid4.b[0][1]++;
  }

  const result = /* istanbul ignore next */(cov_1edq2hgid4.s[6]++, {
    decode,
    encode: () => {
      /* istanbul ignore next */cov_1edq2hgid4.f[1]++;
    },
    [symbols.skip]: true
  });

  /* istanbul ignore next */cov_1edq2hgid4.s[7]++;
  return result;

  /* eslint-disable consistent-return */
  /**
   * Decode data using a first success contifion.
   * @param {DecodeStream} rstream
   * @returns {any}
   */
  function decode(rstream) {
    /* istanbul ignore next */cov_1edq2hgid4.f[2]++;
    cov_1edq2hgid4.s[8]++;

    decode.bytes = 0;
    const context = /* istanbul ignore next */(cov_1edq2hgid4.s[9]++, Metadata.clone(this)); // eslint-disable-line no-invalid-this

    /* istanbul ignore next */cov_1edq2hgid4.s[10]++;
    for (const when of whenTypes) {
      // eslint-disable-next-line no-invalid-this
      const probalyValue = /* istanbul ignore next */(cov_1edq2hgid4.s[11]++, decodeCommon(rstream, when, context));

      /* istanbul ignore next */cov_1edq2hgid4.s[12]++;
      if (when[symbols.skip] === true) {
        /* istanbul ignore next */cov_1edq2hgid4.b[1][0]++;
        cov_1edq2hgid4.s[13]++;

        continue; // eslint-disable-line no-continue
      } else /* istanbul ignore next */{
        cov_1edq2hgid4.b[1][1]++;
      }

      cov_1edq2hgid4.s[14]++;
      decode.bytes = context.bytes;
      /* istanbul ignore next */cov_1edq2hgid4.s[15]++;
      Metadata.clean(context);

      /* istanbul ignore next */cov_1edq2hgid4.s[16]++;
      result[symbols.skip] = false;
      /* istanbul ignore next */cov_1edq2hgid4.s[17]++;
      return probalyValue;
    }

    /* istanbul ignore next */cov_1edq2hgid4.s[18]++;
    result[symbols.skip] = true;
  }
  /* eslint-enable consistent-return */
}