148d1f8a21374ddabfe6693b595692ce
'use strict';

const reserved = require('types/reserved');
const { encode } = require('lib/encode');
const BinaryStream = require('lib/binary-stream');

describe('encode', () => {
  test('should encode objects using schema', () => {
    const wstream = new BinaryStream();

    const schema = {
      a: {
        encode: jest.fn()
      },
      b: {
        encode: jest.fn()
      }
    };

    const object = {
      a: 100,
      b: 200
    };

    schema.a.encode.bytes = 10;
    schema.b.encode.bytes = 33;

    encode(object, wstream, schema);

    expect(schema.a.encode).toHaveBeenCalledTimes(1);
    expect(schema.b.encode).toHaveBeenCalledTimes(1);
    expect(encode.bytes).toEqual(schema.a.encode.bytes + schema.b.encode.bytes);
  });

  test('should encode reserved fields', () => {
    const wstream = new BinaryStream();

    const bytes1 = 33;
    const bytes2 = 10;

    const itemType = {
      encode: jest.fn(),
      decode() {}
    };

    itemType.encode.bytes = bytes1;

    const schema = {
      a: {
        encode: jest.fn()
      },
      b: reserved(itemType, 1)
    };

    const object = {
      a: 100
    };

    schema.a.encode.bytes = bytes2;

    encode(object, wstream, schema);

    expect(schema.a.encode).toBeCalled();
    expect(itemType.encode).toBeCalled();
    expect(encode.bytes).toEqual(bytes1 + bytes2);
  });

  test('each field should be a valid type', () => {
    const wstream = new BinaryStream();

    const schema = {
      a: null
    };

    const expectedError = 'Argument `schema` should be a plain object.';

    expect(() => encode({}, wstream, schema)).toThrow(expectedError);
  });

  test('schema should be a plain object', () => {
    const wstream = new BinaryStream();
    const expectedError = 'Argument `schema` should be a plain object.';

    expect(() => encode({}, wstream, 123)).toThrow(expectedError);
    expect(() => encode({}, wstream, '123')).toThrow(expectedError);
    expect(() => encode({}, wstream, /.+/)).toThrow(expectedError);
  });

  test('should encode nexted objects', () => {
    const wstream = new BinaryStream();

    const encodeFn = jest.fn();

    const schema = {
      a: {
        b: {
          encode: encodeFn
        }
      },
      c: {
        encode: encodeFn
      }
    };

    const object = {
      a: {
        b: 100
      },
      c: 100
    };

    encodeFn.bytes = 10;

    encode(object, wstream, schema);
    expect(encodeFn).toHaveBeenCalledTimes(2);
    expect(encode.bytes).toEqual(encodeFn.bytes * 2);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuY29kZS5qcyJdLCJuYW1lcyI6WyJyZXNlcnZlZCIsInJlcXVpcmUiLCJlbmNvZGUiLCJCaW5hcnlTdHJlYW0iLCJkZXNjcmliZSIsInRlc3QiLCJ3c3RyZWFtIiwic2NoZW1hIiwiYSIsImplc3QiLCJmbiIsImIiLCJvYmplY3QiLCJieXRlcyIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvRXF1YWwiLCJieXRlczEiLCJieXRlczIiLCJpdGVtVHlwZSIsImRlY29kZSIsInRvQmVDYWxsZWQiLCJleHBlY3RlZEVycm9yIiwidG9UaHJvdyIsImVuY29kZUZuIiwiYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsV0FBV0MsUUFBUSxnQkFBUixDQUFqQjtBQUNBLE1BQU0sRUFBRUMsTUFBRixLQUFhRCxRQUFRLFlBQVIsQ0FBbkI7QUFDQSxNQUFNRSxlQUFlRixRQUFRLG1CQUFSLENBQXJCOztBQUVBRyxTQUFTLFFBQVQsRUFBbUIsTUFBTTtBQUN2QkMsT0FBSyxvQ0FBTCxFQUEyQyxNQUFNO0FBQy9DLFVBQU1DLFVBQVUsSUFBSUgsWUFBSixFQUFoQjs7QUFFQSxVQUFNSSxTQUFTO0FBQ2JDLFNBQUc7QUFDRE4sZ0JBQVFPLEtBQUtDLEVBQUw7QUFEUCxPQURVO0FBSWJDLFNBQUc7QUFDRFQsZ0JBQVFPLEtBQUtDLEVBQUw7QUFEUDtBQUpVLEtBQWY7O0FBU0EsVUFBTUUsU0FBUztBQUNiSixTQUFHLEdBRFU7QUFFYkcsU0FBRztBQUZVLEtBQWY7O0FBS0FKLFdBQU9DLENBQVAsQ0FBU04sTUFBVCxDQUFnQlcsS0FBaEIsR0FBd0IsRUFBeEI7QUFDQU4sV0FBT0ksQ0FBUCxDQUFTVCxNQUFULENBQWdCVyxLQUFoQixHQUF3QixFQUF4Qjs7QUFFQVgsV0FBT1UsTUFBUCxFQUFlTixPQUFmLEVBQXdCQyxNQUF4Qjs7QUFFQU8sV0FBT1AsT0FBT0MsQ0FBUCxDQUFTTixNQUFoQixFQUF3QmEscUJBQXhCLENBQThDLENBQTlDO0FB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RUFBcUJHLE9BQXJCLENBQTZCUSxTQUFTWCxLQUFULEdBQWlCLENBQTlDO0FBQ0QsR0E1QkQ7QUE2QkQsQ0EvR0QiLCJmaWxlIjoiZW5jb2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCByZXNlcnZlZCA9IHJlcXVpcmUoJ3R5cGVzL3Jlc2VydmVkJyk7XG5jb25zdCB7IGVuY29kZSB9ID0gcmVxdWlyZSgnbGliL2VuY29kZScpO1xuY29uc3QgQmluYXJ5U3RyZWFtID0gcmVxdWlyZSgnbGliL2JpbmFyeS1zdHJlYW0nKTtcblxuZGVzY3JpYmUoJ2VuY29kZScsICgpID0+IHtcbiAgdGVzdCgnc2hvdWxkIGVuY29kZSBvYmplY3RzIHVzaW5nIHNjaGVtYScsICgpID0+IHtcbiAgICBjb25zdCB3c3RyZWFtID0gbmV3IEJpbmFyeVN0cmVhbSgpO1xuXG4gICAgY29uc3Qgc2NoZW1hID0ge1xuICAgICAgYToge1xuICAgICAgICBlbmNvZGU6IGplc3QuZm4oKSxcbiAgICAgIH0sXG4gICAgICBiOiB7XG4gICAgICAgIGVuY29kZTogamVzdC5mbigpLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgY29uc3Qgb2JqZWN0ID0ge1xuICAgICAgYTogMTAwLFxuICAgICAgYjogMjAwLFxuICAgIH07XG5cbiAgICBzY2hlbWEuYS5lbmNvZGUuYnl0ZXMgPSAxMDtcbiAgICBzY2hlbWEuYi5lbmNvZGUuYnl0ZXMgPSAzMztcblxuICAgIGVuY29kZShvYmplY3QsIHdzdHJlYW0sIHNjaGVtYSk7XG5cbiAgICBleHBlY3Qoc2NoZW1hLmEuZW5jb2RlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KHNjaGVtYS5iLmVuY29kZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChlbmNvZGUuYnl0ZXMpLnRvRXF1YWwoc2NoZW1hLmEuZW5jb2RlLmJ5dGVzICsgc2NoZW1hLmIuZW5jb2RlLmJ5dGVzKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2hvdWxkIGVuY29kZSByZXNlcnZlZCBmaWVsZHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3N0cmVhbSA9IG5ldyBCaW5hcnlTdHJlYW0oKTtcblxuICAgIGNvbnN0IGJ5dGVzMSA9IDMzO1xuICAgIGNvbnN0IGJ5dGVzMiA9IDEwO1xuXG4gICAgY29uc3QgaXRlbVR5cGUgPSB7XG4gICAgICBlbmNvZGU6IGplc3QuZm4oKSxcbiAgICAgIGRlY29kZSgpIHt9LFxuICAgIH07XG5cbiAgICBpdGVtVHlwZS5lbmNvZGUuYnl0ZXMgPSBieXRlczE7XG5cbiAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICBhOiB7XG4gICAgICAgIGVuY29kZTogamVzdC5mbigpLFxuICAgICAgfSxcbiAgICAgIGI6IHJlc2VydmVkKGl0ZW1UeXBlLCAxKSxcbiAgICB9O1xuXG4gICAgY29uc3Qgb2JqZWN0ID0ge1xuICAgICAgYTogMTAwLFxuICAgIH07XG5cbiAgICBzY2hlbWEuYS5lbmNvZGUuYnl0ZXMgPSBieXRlczI7XG5cbiAgICBlbmNvZGUob2JqZWN0LCB3c3RyZWFtLCBzY2hlbWEpO1xuXG4gICAgZXhwZWN0KHNjaGVtYS5hLmVuY29kZSkudG9CZUNhbGxlZCgpO1xuICAgIGV4cGVjdChpdGVtVHlwZS5lbmNvZGUpLnRvQmVDYWxsZWQoKTtcbiAgICBleHBlY3QoZW5jb2RlLmJ5dGVzKS50b0VxdWFsKGJ5dGVzMSArIGJ5dGVzMik7XG4gIH0pO1xuXG4gIHRlc3QoJ2VhY2ggZmllbGQgc2hvdWxkIGJlIGEgdmFsaWQgdHlwZScsICgpID0+IHtcbiAgICBjb25zdCB3c3RyZWFtID0gbmV3IEJpbmFyeVN0cmVhbSgpO1xuXG4gICAgY29uc3Qgc2NoZW1hID0ge1xuICAgICAgYTogbnVsbCxcbiAgICB9O1xuXG4gICAgY29uc3QgZXhwZWN0ZWRFcnJvciA9ICdBcmd1bWVudCBgc2NoZW1hYCBzaG91bGQgYmUgYSBwbGFpbiBvYmplY3QuJztcblxuICAgIGV4cGVjdCgoKSA9PiBlbmNvZGUoe30sIHdzdHJlYW0sIHNjaGVtYSkpLnRvVGhyb3coZXhwZWN0ZWRFcnJvcik7XG4gIH0pO1xuXG4gIHRlc3QoJ3NjaGVtYSBzaG91bGQgYmUgYSBwbGFpbiBvYmplY3QnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3N0cmVhbSA9IG5ldyBCaW5hcnlTdHJlYW0oKTtcbiAgICBjb25zdCBleHBlY3RlZEVycm9yID0gJ0FyZ3VtZW50IGBzY2hlbWFgIHNob3VsZCBiZSBhIHBsYWluIG9iamVjdC4nO1xuXG4gICAgZXhwZWN0KCgpID0+IGVuY29kZSh7fSwgd3N0cmVhbSwgMTIzKSkudG9UaHJvdyhleHBlY3RlZEVycm9yKTtcbiAgICBleHBlY3QoKCkgPT4gZW5jb2RlKHt9LCB3c3RyZWFtLCAnMTIzJykpLnRvVGhyb3coZXhwZWN0ZWRFcnJvcik7XG4gICAgZXhwZWN0KCgpID0+IGVuY29kZSh7fSwgd3N0cmVhbSwgLy4rLykpLnRvVGhyb3coZXhwZWN0ZWRFcnJvcik7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBlbmNvZGUgbmV4dGVkIG9iamVjdHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3N0cmVhbSA9IG5ldyBCaW5hcnlTdHJlYW0oKTtcblxuICAgIGNvbnN0IGVuY29kZUZuID0gamVzdC5mbigpO1xuXG4gICAgY29uc3Qgc2NoZW1hID0ge1xuICAgICAgYToge1xuICAgICAgICBiOiB7XG4gICAgICAgICAgZW5jb2RlOiBlbmNvZGVGbixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBjOiB7XG4gICAgICAgIGVuY29kZTogZW5jb2RlRm4sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBvYmplY3QgPSB7XG4gICAgICBhOiB7XG4gICAgICAgIGI6IDEwMCxcbiAgICAgIH0sXG4gICAgICBjOiAxMDAsXG4gICAgfTtcblxuICAgIGVuY29kZUZuLmJ5dGVzID0gMTA7XG5cbiAgICBlbmNvZGUob2JqZWN0LCB3c3RyZWFtLCBzY2hlbWEpO1xuICAgIGV4cGVjdChlbmNvZGVGbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgIGV4cGVjdChlbmNvZGUuYnl0ZXMpLnRvRXF1YWwoZW5jb2RlRm4uYnl0ZXMgKiAyKTtcbiAgfSk7XG59KTtcbiJdfQ==