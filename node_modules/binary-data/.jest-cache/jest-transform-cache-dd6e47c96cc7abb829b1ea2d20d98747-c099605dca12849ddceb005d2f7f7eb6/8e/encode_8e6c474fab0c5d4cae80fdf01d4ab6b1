7a56928ab11a2d10e3ad4072cf9b1fc3
'use strict';

const reserved = require('types/reserved');
const { encode } = require('lib/encode');

describe('encode', () => {
  test('should encode objects using schema', () => {
    const wstream = {};

    const schema = {
      a: {
        encode: jest.fn()
      },
      b: {
        encode: jest.fn()
      }
    };

    const object = {
      a: 100,
      b: 200
    };

    schema.a.encode.bytes = 10;
    schema.b.encode.bytes = 33;

    encode(object, wstream, schema);

    expect(schema.a.encode).toHaveBeenCalledTimes(1);
    expect(schema.b.encode).toHaveBeenCalledTimes(1);
    expect(encode.bytes).toEqual(schema.a.encode.bytes + schema.b.encode.bytes);
  });

  test('should encode reserved fields', () => {
    const wstream = {};

    const bytes1 = 33;
    const bytes2 = 10;

    const itemType = {
      encode: jest.fn(),
      decode() {}
    };

    itemType.encode.bytes = bytes1;

    const schema = {
      a: {
        encode: jest.fn()
      },
      b: reserved(itemType, 1)
    };

    const object = {
      a: 100
    };

    schema.a.encode.bytes = bytes2;

    encode(object, wstream, schema);

    expect(schema.a.encode).toBeCalled();
    expect(itemType.encode).toBeCalled();
    expect(encode.bytes).toEqual(bytes1 + bytes2);
  });

  test('each field should be a valid type', () => {
    const wstream = {};

    const schema = {
      a: null
    };

    const expectedError = 'Argument `schema` should be a plain object.';

    expect(() => encode({}, wstream, schema)).toThrow(expectedError);
  });

  test('schema should be a plain object', () => {
    const wstream = {};
    const expectedError = 'Argument `schema` should be a plain object.';

    expect(() => encode({}, wstream, 123)).toThrow(expectedError);
    expect(() => encode({}, wstream, '123')).toThrow(expectedError);
    expect(() => encode({}, wstream, /.+/)).toThrow(expectedError);
  });

  test('should encode nexted objects', () => {
    const wstream = {};

    const encodeFn = jest.fn();

    const schema = {
      a: {
        b: {
          encode: encodeFn
        }
      },
      c: {
        encode: encodeFn
      }
    };

    const object = {
      a: {
        b: 100
      },
      c: 100
    };

    encodeFn.bytes = 10;

    encode(object, wstream, schema);
    expect(encodeFn).toHaveBeenCalledTimes(2);
    expect(encode.bytes).toEqual(encodeFn.bytes * 2);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuY29kZS5qcyJdLCJuYW1lcyI6WyJyZXNlcnZlZCIsInJlcXVpcmUiLCJlbmNvZGUiLCJkZXNjcmliZSIsInRlc3QiLCJ3c3RyZWFtIiwic2NoZW1hIiwiYSIsImplc3QiLCJmbiIsImIiLCJvYmplY3QiLCJieXRlcyIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsInRvRXF1YWwiLCJieXRlczEiLCJieXRlczIiLCJpdGVtVHlwZSIsImRlY29kZSIsInRvQmVDYWxsZWQiLCJleHBlY3RlZEVycm9yIiwidG9UaHJvdyIsImVuY29kZUZuIiwiYyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsV0FBV0MsUUFBUSxnQkFBUixDQUFqQjtBQUNBLE1BQU0sRUFBRUMsTUFBRixLQUFhRCxRQUFRLFlBQVIsQ0FBbkI7O0FBRUFFLFNBQVMsUUFBVCxFQUFtQixNQUFNO0FBQ3ZCQyxPQUFLLG9DQUFMLEVBQTJDLE1BQU07QUFDL0MsVUFBTUMsVUFBVSxFQUFoQjs7QUFFQSxVQUFNQyxTQUFTO0FBQ2JDLFNBQUc7QUFDREwsZ0JBQVFNLEtBQUtDLEVBQUw7QUFEUCxPQURVO0FBSWJDLFNBQUc7QUFDRFIsZ0JBQVFNLEtBQUtDLEVBQUw7QUFEUDtBQUpVLEtBQWY7O0FBU0EsVUFBTUUsU0FBUztBQUNiSixTQUFHLEdBRFU7QUFFYkcsU0FBRztBQUZVLEtBQWY7O0FBS0FKLFdBQU9DLENBQVAsQ0FBU0wsTUFBVCxDQUFnQlUsS0FBaEIsR0FBd0IsRUFBeEI7QUFDQU4sV0FBT0ksQ0FBUCxDQUFTUixNQUFULENBQWdCVSxLQUFoQixHQUF3QixFQUF4Qjs7QUFFQVYsV0FBT1MsTUFBUCxFQUFlTixPQUFmLEVBQXdCQyxNQUF4Qjs7QUFFQU8sV0FBT1AsT0FBT0MsQ0FBUCxDQUFTTCxNQUFoQixFQUF3QlkscUJBQXhCLENBQThDLENBQTlDO0FBQ0FELFdBQU9QLE9BQU9JLENBQVAsQ0FBU1IsTUFBaEIsRUFBd0JZLHFCQUF4QixDQUE4QyxDQUE5QztB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J3VzZSBzdHJpY3QnO1xuXG5jb25zdCByZXNlcnZlZCA9IHJlcXVpcmUoJ3R5cGVzL3Jlc2VydmVkJyk7XG5jb25zdCB7IGVuY29kZSB9ID0gcmVxdWlyZSgnbGliL2VuY29kZScpO1xuXG5kZXNjcmliZSgnZW5jb2RlJywgKCkgPT4ge1xuICB0ZXN0KCdzaG91bGQgZW5jb2RlIG9iamVjdHMgdXNpbmcgc2NoZW1hJywgKCkgPT4ge1xuICAgIGNvbnN0IHdzdHJlYW0gPSB7fTtcblxuICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgIGE6IHtcbiAgICAgICAgZW5jb2RlOiBqZXN0LmZuKCksXG4gICAgICB9LFxuICAgICAgYjoge1xuICAgICAgICBlbmNvZGU6IGplc3QuZm4oKSxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IG9iamVjdCA9IHtcbiAgICAgIGE6IDEwMCxcbiAgICAgIGI6IDIwMCxcbiAgICB9O1xuXG4gICAgc2NoZW1hLmEuZW5jb2RlLmJ5dGVzID0gMTA7XG4gICAgc2NoZW1hLmIuZW5jb2RlLmJ5dGVzID0gMzM7XG5cbiAgICBlbmNvZGUob2JqZWN0LCB3c3RyZWFtLCBzY2hlbWEpO1xuXG4gICAgZXhwZWN0KHNjaGVtYS5hLmVuY29kZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChzY2hlbWEuYi5lbmNvZGUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QoZW5jb2RlLmJ5dGVzKS50b0VxdWFsKHNjaGVtYS5hLmVuY29kZS5ieXRlcyArIHNjaGVtYS5iLmVuY29kZS5ieXRlcyk7XG4gIH0pO1xuXG4gIHRlc3QoJ3Nob3VsZCBlbmNvZGUgcmVzZXJ2ZWQgZmllbGRzJywgKCkgPT4ge1xuICAgIGNvbnN0IHdzdHJlYW0gPSB7fTtcblxuICAgIGNvbnN0IGJ5dGVzMSA9IDMzO1xuICAgIGNvbnN0IGJ5dGVzMiA9IDEwO1xuXG4gICAgY29uc3QgaXRlbVR5cGUgPSB7XG4gICAgICBlbmNvZGU6IGplc3QuZm4oKSxcbiAgICAgIGRlY29kZSgpIHt9LFxuICAgIH07XG5cbiAgICBpdGVtVHlwZS5lbmNvZGUuYnl0ZXMgPSBieXRlczE7XG5cbiAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICBhOiB7XG4gICAgICAgIGVuY29kZTogamVzdC5mbigpLFxuICAgICAgfSxcbiAgICAgIGI6IHJlc2VydmVkKGl0ZW1UeXBlLCAxKSxcbiAgICB9O1xuXG4gICAgY29uc3Qgb2JqZWN0ID0ge1xuICAgICAgYTogMTAwLFxuICAgIH07XG5cbiAgICBzY2hlbWEuYS5lbmNvZGUuYnl0ZXMgPSBieXRlczI7XG5cbiAgICBlbmNvZGUob2JqZWN0LCB3c3RyZWFtLCBzY2hlbWEpO1xuXG4gICAgZXhwZWN0KHNjaGVtYS5hLmVuY29kZSkudG9CZUNhbGxlZCgpO1xuICAgIGV4cGVjdChpdGVtVHlwZS5lbmNvZGUpLnRvQmVDYWxsZWQoKTtcbiAgICBleHBlY3QoZW5jb2RlLmJ5dGVzKS50b0VxdWFsKGJ5dGVzMSArIGJ5dGVzMik7XG4gIH0pO1xuXG4gIHRlc3QoJ2VhY2ggZmllbGQgc2hvdWxkIGJlIGEgdmFsaWQgdHlwZScsICgpID0+IHtcbiAgICBjb25zdCB3c3RyZWFtID0ge307XG5cbiAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICBhOiBudWxsLFxuICAgIH07XG5cbiAgICBjb25zdCBleHBlY3RlZEVycm9yID0gJ0FyZ3VtZW50IGBzY2hlbWFgIHNob3VsZCBiZSBhIHBsYWluIG9iamVjdC4nO1xuXG4gICAgZXhwZWN0KCgpID0+IGVuY29kZSh7fSwgd3N0cmVhbSwgc2NoZW1hKSkudG9UaHJvdyhleHBlY3RlZEVycm9yKTtcbiAgfSk7XG5cbiAgdGVzdCgnc2NoZW1hIHNob3VsZCBiZSBhIHBsYWluIG9iamVjdCcsICgpID0+IHtcbiAgICBjb25zdCB3c3RyZWFtID0ge307XG4gICAgY29uc3QgZXhwZWN0ZWRFcnJvciA9ICdBcmd1bWVudCBgc2NoZW1hYCBzaG91bGQgYmUgYSBwbGFpbiBvYmplY3QuJztcblxuICAgIGV4cGVjdCgoKSA9PiBlbmNvZGUoe30sIHdzdHJlYW0sIDEyMykpLnRvVGhyb3coZXhwZWN0ZWRFcnJvcik7XG4gICAgZXhwZWN0KCgpID0+IGVuY29kZSh7fSwgd3N0cmVhbSwgJzEyMycpKS50b1Rocm93KGV4cGVjdGVkRXJyb3IpO1xuICAgIGV4cGVjdCgoKSA9PiBlbmNvZGUoe30sIHdzdHJlYW0sIC8uKy8pKS50b1Rocm93KGV4cGVjdGVkRXJyb3IpO1xuICB9KTtcblxuICB0ZXN0KCdzaG91bGQgZW5jb2RlIG5leHRlZCBvYmplY3RzJywgKCkgPT4ge1xuICAgIGNvbnN0IHdzdHJlYW0gPSB7fTtcblxuICAgIGNvbnN0IGVuY29kZUZuID0gamVzdC5mbigpO1xuXG4gICAgY29uc3Qgc2NoZW1hID0ge1xuICAgICAgYToge1xuICAgICAgICBiOiB7XG4gICAgICAgICAgZW5jb2RlOiBlbmNvZGVGbixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBjOiB7XG4gICAgICAgIGVuY29kZTogZW5jb2RlRm4sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBvYmplY3QgPSB7XG4gICAgICBhOiB7XG4gICAgICAgIGI6IDEwMCxcbiAgICAgIH0sXG4gICAgICBjOiAxMDAsXG4gICAgfTtcblxuICAgIGVuY29kZUZuLmJ5dGVzID0gMTA7XG5cbiAgICBlbmNvZGUob2JqZWN0LCB3c3RyZWFtLCBzY2hlbWEpO1xuICAgIGV4cGVjdChlbmNvZGVGbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgIGV4cGVjdChlbmNvZGUuYnl0ZXMpLnRvRXF1YWwoZW5jb2RlRm4uYnl0ZXMgKiAyKTtcbiAgfSk7XG59KTtcbiJdfQ==