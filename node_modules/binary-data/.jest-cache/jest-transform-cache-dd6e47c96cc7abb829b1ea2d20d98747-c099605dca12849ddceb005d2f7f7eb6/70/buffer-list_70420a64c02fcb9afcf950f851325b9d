dc6068b65fc6434f285d030069fe2dec
'use strict';

const BufferList = require('internal/buffer-list');

test('append()', () => {
  const bl = new BufferList();
  const buf1 = Buffer.from([1, 2, 3, 4, 5]);
  const buf2 = Buffer.from([6, 7, 8, 9]);

  bl.append(buf1);
  expect(bl.length).toEqual(buf1.length);

  bl.append([buf1, buf2]);
  expect(bl.length).toEqual(buf1.length * 2 + buf2.length);
});

test('consume(bytes)', () => {
  const bl = new BufferList();
  const buf1 = Buffer.from([1, 2, 3, 4, 5]);
  const buf2 = Buffer.from([6, 7, 8, 9]);

  bl.append([buf1, buf2]);
  bl.consume(2);

  expect(bl.length).toEqual(buf1.length + buf2.length - 2);
  expect(bl.offset).toEqual(2);

  bl.consume(3);
  expect(bl.offset).toEqual(0);
  expect(bl.length).toEqual(buf2.length);
});

test('append() after consume()', () => {
  const bl = new BufferList();
  const buf1 = Buffer.from([1, 2, 3, 4, 5]);
  const buf2 = Buffer.from([6, 7, 8, 9]);

  bl.append(buf1);
  bl.consume(2);
  bl.append(buf2);

  expect(bl.offset).toEqual(0);
  expect(bl.length).toEqual(buf1.length + buf2.length - 2);
});

test('get(i)', () => {
  const bl = new BufferList();
  const buf1 = Buffer.from([1, 2, 3, 4, 5]);
  const buf2 = Buffer.from([6, 7, 8, 9]);

  bl.append([buf1, buf2]);

  expect(bl.get(0)).toEqual(buf1[0]);
  expect(bl.get(bl.length - 1)).toEqual(buf2[3]);
  expect(bl.get(-1)).toEqual(buf2[3]);
  expect(bl.get(bl.length + 1)).toEqual(buf1[1]);

  bl.consume(2);

  expect(bl.get(0)).toEqual(buf1[2]);
  expect(bl.get(bl.length - 1)).toEqual(buf2[3]);
  expect(bl.get(-1)).toEqual(buf2[3]);
  expect(bl.get(bl.length + 1)).toEqual(buf1[3]);
});

test('indexOf(i)', () => {
  const bl = new BufferList();
  const buf1 = Buffer.from([1, 2, 3, 4, 5]);
  const buf2 = Buffer.from([6, 7, 8, 0]);

  bl.append([buf1, buf2]);

  expect(bl.indexOf(1)).toBe(0);
  expect(bl.indexOf(3)).toBe(2);
  expect(bl.indexOf(5)).toBe(4);
  expect(bl.indexOf(8)).toBe(7);
  expect(bl.indexOf(0)).toBe(8);

  bl.consume(2);
  expect(bl.indexOf(5)).toBe(2);
  expect(bl.indexOf(8)).toBe(5);
  expect(bl.indexOf(0)).toBe(6);

  expect(() => bl.indexOf(-1)).toThrow('Invalid argument 1');
  expect(() => bl.indexOf(300)).toThrow('Invalid argument 1');
  expect(() => bl.indexOf(null)).toThrow('Invalid argument 1');
});

test('indexOf(i, offset)', () => {
  const bl = new BufferList();
  const buf1 = Buffer.from([1, 2, 3, 4, 5]);
  const buf2 = Buffer.from([6, 7, 8, 9]);

  bl.append([buf1, buf2]);

  expect(bl.indexOf(3, 2)).toBe(2);
  expect(bl.indexOf(8, 2)).toBe(7);
  expect(bl.indexOf(8, 6)).toBe(7);
  expect(bl.indexOf(9, 2)).toBe(8);
  expect(bl.indexOf(9, 6)).toBe(8);

  bl.consume(2);
  expect(bl.indexOf(8, 2)).toBe(5);
  expect(bl.indexOf(8, 4)).toBe(5);
});

test('indexOf(i, offset) multiple', () => {
  const bl = new BufferList();
  const buf1 = Buffer.from([1, 2, 0, 4, 5]);
  const buf2 = Buffer.from([6, 7, 8, 0]);

  bl.append([buf1, buf2]);

  expect(bl.indexOf(0, 2)).toBe(2);
  expect(bl.indexOf(0, 6)).toBe(8);

  bl.consume(2);
  expect(bl.indexOf(0, 0)).toBe(0);
  expect(bl.indexOf(0, 4)).toBe(6);
});

test('indexOf() index - offset = -1', () => {
  const buf = Buffer.from([1, 2, 3, 4, 5, 6, 0, 7, 8, 9, 10, 64, 21, 0]);
  const bl = new BufferList();

  bl.append(buf);

  expect(bl.indexOf(0)).toBe(6);
  bl.consume(7);
  expect(bl.indexOf(0)).toBe(6);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1ZmZlci1saXN0LmpzIl0sIm5hbWVzIjpbIkJ1ZmZlckxpc3QiLCJyZXF1aXJlIiwidGVzdCIsImJsIiwiYnVmMSIsIkJ1ZmZlciIsImZyb20iLCJidWYyIiwiYXBwZW5kIiwiZXhwZWN0IiwibGVuZ3RoIiwidG9FcXVhbCIsImNvbnN1bWUiLCJvZmZzZXQiLCJnZXQiLCJpbmRleE9mIiwidG9CZSIsInRvVGhyb3ciLCJidWYiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLGFBQWFDLFFBQVEsc0JBQVIsQ0FBbkI7O0FBRUFDLEtBQUssVUFBTCxFQUFpQixNQUFNO0FBQ3JCLFFBQU1DLEtBQUssSUFBSUgsVUFBSixFQUFYO0FBQ0EsUUFBTUksT0FBT0MsT0FBT0MsSUFBUCxDQUFZLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsQ0FBWixDQUFiO0FBQ0EsUUFBTUMsT0FBT0YsT0FBT0MsSUFBUCxDQUFZLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUFaLENBQWI7O0FBRUFILEtBQUdLLE1BQUgsQ0FBVUosSUFBVjtBQUNBSyxTQUFPTixHQUFHTyxNQUFWLEVBQWtCQyxPQUFsQixDQUEwQlAsS0FBS00sTUFBL0I7O0FBRUFQLEtBQUdLLE1BQUgsQ0FBVSxDQUFDSixJQUFELEVBQU9HLElBQVAsQ0FBVjtBQUNBRSxTQUFPTixHQUFHTyxNQUFWLEVBQWtCQyxPQUFsQixDQUEwQlAsS0FBS00sTUFBTCxHQUFjLENBQWQsR0FBa0JILEtBQUtHLE1BQWpEO0FBQ0QsQ0FWRDs7QUFZQVIsS0FBSyxnQkFBTCxFQUF1QixNQUFNO0FBQzNCLFFBQU1DLEtBQUssSUFBSUgsVUFBSixFQUFYO0FBQ0EsUUFBTUksT0FBT0MsT0FBT0MsSUFBUCxDQUFZLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsQ0FBWixDQUFiO0FBQ0EsUUFBTUMsT0FBT0Ys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QWIsRUFBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUIsQ0FBekIsRUFBNEIsQ0FBNUIsRUFBK0IsRUFBL0IsRUFBbUMsRUFBbkMsRUFBdUMsRUFBdkMsRUFBMkMsQ0FBM0MsQ0FBWixDQUFaO0FBQ0EsUUFBTUgsS0FBSyxJQUFJSCxVQUFKLEVBQVg7O0FBRUFHLEtBQUdLLE1BQUgsQ0FBVVUsR0FBVjs7QUFFQVQsU0FBT04sR0FBR1ksT0FBSCxDQUFXLENBQVgsQ0FBUCxFQUFzQkMsSUFBdEIsQ0FBMkIsQ0FBM0I7QUFDQWIsS0FBR1MsT0FBSCxDQUFXLENBQVg7QUFDQUgsU0FBT04sR0FBR1ksT0FBSCxDQUFXLENBQVgsQ0FBUCxFQUFzQkMsSUFBdEIsQ0FBMkIsQ0FBM0I7QUFDRCxDQVREIiwiZmlsZSI6ImJ1ZmZlci1saXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnaW50ZXJuYWwvYnVmZmVyLWxpc3QnKTtcblxudGVzdCgnYXBwZW5kKCknLCAoKSA9PiB7XG4gIGNvbnN0IGJsID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgY29uc3QgYnVmMSA9IEJ1ZmZlci5mcm9tKFsxLCAyLCAzLCA0LCA1XSk7XG4gIGNvbnN0IGJ1ZjIgPSBCdWZmZXIuZnJvbShbNiwgNywgOCwgOV0pO1xuXG4gIGJsLmFwcGVuZChidWYxKTtcbiAgZXhwZWN0KGJsLmxlbmd0aCkudG9FcXVhbChidWYxLmxlbmd0aCk7XG5cbiAgYmwuYXBwZW5kKFtidWYxLCBidWYyXSk7XG4gIGV4cGVjdChibC5sZW5ndGgpLnRvRXF1YWwoYnVmMS5sZW5ndGggKiAyICsgYnVmMi5sZW5ndGgpO1xufSk7XG5cbnRlc3QoJ2NvbnN1bWUoYnl0ZXMpJywgKCkgPT4ge1xuICBjb25zdCBibCA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIGNvbnN0IGJ1ZjEgPSBCdWZmZXIuZnJvbShbMSwgMiwgMywgNCwgNV0pO1xuICBjb25zdCBidWYyID0gQnVmZmVyLmZyb20oWzYsIDcsIDgsIDldKTtcblxuICBibC5hcHBlbmQoW2J1ZjEsIGJ1ZjJdKTtcbiAgYmwuY29uc3VtZSgyKTtcblxuICBleHBlY3QoYmwubGVuZ3RoKS50b0VxdWFsKGJ1ZjEubGVuZ3RoICsgYnVmMi5sZW5ndGggLSAyKTtcbiAgZXhwZWN0KGJsLm9mZnNldCkudG9FcXVhbCgyKTtcblxuICBibC5jb25zdW1lKDMpO1xuICBleHBlY3QoYmwub2Zmc2V0KS50b0VxdWFsKDApO1xuICBleHBlY3QoYmwubGVuZ3RoKS50b0VxdWFsKGJ1ZjIubGVuZ3RoKTtcbn0pO1xuXG50ZXN0KCdhcHBlbmQoKSBhZnRlciBjb25zdW1lKCknLCAoKSA9PiB7XG4gIGNvbnN0IGJsID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgY29uc3QgYnVmMSA9IEJ1ZmZlci5mcm9tKFsxLCAyLCAzLCA0LCA1XSk7XG4gIGNvbnN0IGJ1ZjIgPSBCdWZmZXIuZnJvbShbNiwgNywgOCwgOV0pO1xuXG4gIGJsLmFwcGVuZChidWYxKTtcbiAgYmwuY29uc3VtZSgyKTtcbiAgYmwuYXBwZW5kKGJ1ZjIpO1xuXG4gIGV4cGVjdChibC5vZmZzZXQpLnRvRXF1YWwoMCk7XG4gIGV4cGVjdChibC5sZW5ndGgpLnRvRXF1YWwoYnVmMS5sZW5ndGggKyBidWYyLmxlbmd0aCAtIDIpO1xufSk7XG5cbnRlc3QoJ2dldChpKScsICgpID0+IHtcbiAgY29uc3QgYmwgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICBjb25zdCBidWYxID0gQnVmZmVyLmZyb20oWzEsIDIsIDMsIDQsIDVdKTtcbiAgY29uc3QgYnVmMiA9IEJ1ZmZlci5mcm9tKFs2LCA3LCA4LCA5XSk7XG5cbiAgYmwuYXBwZW5kKFtidWYxLCBidWYyXSk7XG5cbiAgZXhwZWN0KGJsLmdldCgwKSkudG9FcXVhbChidWYxWzBdKTtcbiAgZXhwZWN0KGJsLmdldChibC5sZW5ndGggLSAxKSkudG9FcXVhbChidWYyWzNdKTtcbiAgZXhwZWN0KGJsLmdldCgtMSkpLnRvRXF1YWwoYnVmMlszXSk7XG4gIGV4cGVjdChibC5nZXQoYmwubGVuZ3RoICsgMSkpLnRvRXF1YWwoYnVmMVsxXSk7XG5cbiAgYmwuY29uc3VtZSgyKTtcblxuICBleHBlY3QoYmwuZ2V0KDApKS50b0VxdWFsKGJ1ZjFbMl0pO1xuICBleHBlY3QoYmwuZ2V0KGJsLmxlbmd0aCAtIDEpKS50b0VxdWFsKGJ1ZjJbM10pO1xuICBleHBlY3QoYmwuZ2V0KC0xKSkudG9FcXVhbChidWYyWzNdKTtcbiAgZXhwZWN0KGJsLmdldChibC5sZW5ndGggKyAxKSkudG9FcXVhbChidWYxWzNdKTtcbn0pO1xuXG50ZXN0KCdpbmRleE9mKGkpJywgKCkgPT4ge1xuICBjb25zdCBibCA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIGNvbnN0IGJ1ZjEgPSBCdWZmZXIuZnJvbShbMSwgMiwgMywgNCwgNV0pO1xuICBjb25zdCBidWYyID0gQnVmZmVyLmZyb20oWzYsIDcsIDgsIDBdKTtcblxuICBibC5hcHBlbmQoW2J1ZjEsIGJ1ZjJdKTtcblxuICBleHBlY3QoYmwuaW5kZXhPZigxKSkudG9CZSgwKTtcbiAgZXhwZWN0KGJsLmluZGV4T2YoMykpLnRvQmUoMik7XG4gIGV4cGVjdChibC5pbmRleE9mKDUpKS50b0JlKDQpO1xuICBleHBlY3QoYmwuaW5kZXhPZig4KSkudG9CZSg3KTtcbiAgZXhwZWN0KGJsLmluZGV4T2YoMCkpLnRvQmUoOCk7XG5cbiAgYmwuY29uc3VtZSgyKTtcbiAgZXhwZWN0KGJsLmluZGV4T2YoNSkpLnRvQmUoMik7XG4gIGV4cGVjdChibC5pbmRleE9mKDgpKS50b0JlKDUpO1xuICBleHBlY3QoYmwuaW5kZXhPZigwKSkudG9CZSg2KTtcblxuICBleHBlY3QoKCkgPT4gYmwuaW5kZXhPZigtMSkpLnRvVGhyb3coJ0ludmFsaWQgYXJndW1lbnQgMScpO1xuICBleHBlY3QoKCkgPT4gYmwuaW5kZXhPZigzMDApKS50b1Rocm93KCdJbnZhbGlkIGFyZ3VtZW50IDEnKTtcbiAgZXhwZWN0KCgpID0+IGJsLmluZGV4T2YobnVsbCkpLnRvVGhyb3coJ0ludmFsaWQgYXJndW1lbnQgMScpO1xufSk7XG5cbnRlc3QoJ2luZGV4T2YoaSwgb2Zmc2V0KScsICgpID0+IHtcbiAgY29uc3QgYmwgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICBjb25zdCBidWYxID0gQnVmZmVyLmZyb20oWzEsIDIsIDMsIDQsIDVdKTtcbiAgY29uc3QgYnVmMiA9IEJ1ZmZlci5mcm9tKFs2LCA3LCA4LCA5XSk7XG5cbiAgYmwuYXBwZW5kKFtidWYxLCBidWYyXSk7XG5cbiAgZXhwZWN0KGJsLmluZGV4T2YoMywgMikpLnRvQmUoMik7XG4gIGV4cGVjdChibC5pbmRleE9mKDgsIDIpKS50b0JlKDcpO1xuICBleHBlY3QoYmwuaW5kZXhPZig4LCA2KSkudG9CZSg3KTtcbiAgZXhwZWN0KGJsLmluZGV4T2YoOSwgMikpLnRvQmUoOCk7XG4gIGV4cGVjdChibC5pbmRleE9mKDksIDYpKS50b0JlKDgpO1xuXG4gIGJsLmNvbnN1bWUoMik7XG4gIGV4cGVjdChibC5pbmRleE9mKDgsIDIpKS50b0JlKDUpO1xuICBleHBlY3QoYmwuaW5kZXhPZig4LCA0KSkudG9CZSg1KTtcbn0pO1xuXG50ZXN0KCdpbmRleE9mKGksIG9mZnNldCkgbXVsdGlwbGUnLCAoKSA9PiB7XG4gIGNvbnN0IGJsID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgY29uc3QgYnVmMSA9IEJ1ZmZlci5mcm9tKFsxLCAyLCAwLCA0LCA1XSk7XG4gIGNvbnN0IGJ1ZjIgPSBCdWZmZXIuZnJvbShbNiwgNywgOCwgMF0pO1xuXG4gIGJsLmFwcGVuZChbYnVmMSwgYnVmMl0pO1xuXG4gIGV4cGVjdChibC5pbmRleE9mKDAsIDIpKS50b0JlKDIpO1xuICBleHBlY3QoYmwuaW5kZXhPZigwLCA2KSkudG9CZSg4KTtcblxuICBibC5jb25zdW1lKDIpO1xuICBleHBlY3QoYmwuaW5kZXhPZigwLCAwKSkudG9CZSgwKTtcbiAgZXhwZWN0KGJsLmluZGV4T2YoMCwgNCkpLnRvQmUoNik7XG59KTtcblxudGVzdCgnaW5kZXhPZigpIGluZGV4IC0gb2Zmc2V0ID0gLTEnLCAoKSA9PiB7XG4gIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5mcm9tKFsxLCAyLCAzLCA0LCA1LCA2LCAwLCA3LCA4LCA5LCAxMCwgNjQsIDIxLCAwXSk7XG4gIGNvbnN0IGJsID0gbmV3IEJ1ZmZlckxpc3QoKTtcblxuICBibC5hcHBlbmQoYnVmKTtcblxuICBleHBlY3QoYmwuaW5kZXhPZigwKSkudG9CZSg2KTtcbiAgYmwuY29uc3VtZSg3KTtcbiAgZXhwZWN0KGJsLmluZGV4T2YoMCkpLnRvQmUoNik7XG59KTtcbiJdfQ==