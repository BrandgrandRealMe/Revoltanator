d034a9be2bbe37877e76eeada202fbfd
'use strict';

/* istanbul ignore next */var cov_2fum0ll9oq = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/encode.js',
      hash = '77628a73b1dc143416d0deda4555d39301e2b9cd',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/encode.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 45
        },
        end: {
          line: 3,
          column: 64
        }
      },
      '1': {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 43
        }
      },
      '2': {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 41
        }
      },
      '3': {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 10,
          column: 2
        }
      },
      '4': {
        start: {
          line: 18,
          column: 15
        },
        end: {
          line: 18,
          column: 29
        }
      },
      '5': {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 20,
          column: 52
        }
      },
      '6': {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 22,
          column: 28
        }
      },
      '7': {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 23,
          column: 23
        }
      },
      '8': {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 38,
          column: 3
        }
      },
      '9': {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 55
        }
      },
      '10': {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 56
        }
      },
      '11': {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 57
        }
      },
      '12': {
        start: {
          line: 48,
          column: 2
        },
        end: {
          line: 48,
          column: 23
        }
      },
      '13': {
        start: {
          line: 50,
          column: 2
        },
        end: {
          line: 55,
          column: 3
        }
      },
      '14': {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 51,
          column: 26
        }
      },
      '15': {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 29
        }
      },
      '16': {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 29
        }
      },
      '17': {
        start: {
          line: 57,
          column: 15
        },
        end: {
          line: 57,
          column: 34
        }
      },
      '18': {
        start: {
          line: 59,
          column: 2
        },
        end: {
          line: 73,
          column: 3
        }
      },
      '19': {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 23
        }
      },
      '20': {
        start: {
          line: 61,
          column: 17
        },
        end: {
          line: 61,
          column: 28
        }
      },
      '21': {
        start: {
          line: 62,
          column: 18
        },
        end: {
          line: 62,
          column: 29
        }
      },
      '22': {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      '23': {
        start: {
          line: 65,
          column: 6
        },
        end: {
          line: 65,
          column: 50
        }
      },
      '24': {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 66,
          column: 31
        }
      },
      '25': {
        start: {
          line: 68,
          column: 6
        },
        end: {
          line: 68,
          column: 15
        }
      },
      '26': {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 71,
          column: 46
        }
      },
      '27': {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 48
        }
      },
      '28': {
        start: {
          line: 82,
          column: 2
        },
        end: {
          line: 84,
          column: 3
        }
      },
      '29': {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 71
        }
      }
    },
    fnMap: {
      '0': {
        name: 'encode',
        decl: {
          start: {
            line: 17,
            column: 9
          },
          end: {
            line: 17,
            column: 15
          }
        },
        loc: {
          start: {
            line: 17,
            column: 47
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 17
      },
      '1': {
        name: 'encodeCommon',
        decl: {
          start: {
            line: 32,
            column: 9
          },
          end: {
            line: 32,
            column: 21
          }
        },
        loc: {
          start: {
            line: 32,
            column: 62
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 32
      },
      '2': {
        name: 'encodeSchema',
        decl: {
          start: {
            line: 47,
            column: 9
          },
          end: {
            line: 47,
            column: 21
          }
        },
        loc: {
          start: {
            line: 47,
            column: 56
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 47
      },
      '3': {
        name: 'assertSchema',
        decl: {
          start: {
            line: 81,
            column: 9
          },
          end: {
            line: 81,
            column: 21
          }
        },
        loc: {
          start: {
            line: 81,
            column: 30
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 81
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 33,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 33,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        }, {
          start: {
            line: 33,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        }],
        line: 33
      },
      '1': {
        loc: {
          start: {
            line: 50,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 50,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        }, {
          start: {
            line: 50,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        }],
        line: 50
      },
      '2': {
        loc: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }],
        line: 64
      },
      '3': {
        loc: {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 84,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 84,
            column: 3
          }
        }, {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 84,
            column: 3
          }
        }],
        line: 82
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const { isUserType, isEncodeType, isType } = /* istanbul ignore next */(cov_2fum0ll9oq.s[0]++, require('lib/util'));
const symbols = /* istanbul ignore next */(cov_2fum0ll9oq.s[1]++, require('internal/symbols'));
const Metadata = /* istanbul ignore next */(cov_2fum0ll9oq.s[2]++, require('internal/meta'));

/* istanbul ignore next */cov_2fum0ll9oq.s[3]++;
module.exports = {
  encode,
  encodeCommon
};

/**
 * @param {any} object
 * @param {EncodeStream} wstream
 * @param {any} typeOrSchema
 */
function encode(object, wstream, typeOrSchema) {
  /* istanbul ignore next */cov_2fum0ll9oq.f[0]++;

  const meta = /* istanbul ignore next */(cov_2fum0ll9oq.s[4]++, new Metadata());

  /* istanbul ignore next */cov_2fum0ll9oq.s[5]++;
  encodeCommon(object, wstream, typeOrSchema, meta);

  /* istanbul ignore next */cov_2fum0ll9oq.s[6]++;
  encode.bytes = meta.bytes;
  /* istanbul ignore next */cov_2fum0ll9oq.s[7]++;
  Metadata.clean(meta);
}

/**
 * @param {any} object
 * @param {EncodeStream} wstream
 * @param {any} typeOrSchema
 * @param {Metadata} context
 */
function encodeCommon(object, wstream, typeOrSchema, context) {
  /* istanbul ignore next */cov_2fum0ll9oq.f[1]++;
  cov_2fum0ll9oq.s[8]++;

  if (isType(typeOrSchema)) {
    /* istanbul ignore next */cov_2fum0ll9oq.b[0][0]++;
    cov_2fum0ll9oq.s[9]++;

    typeOrSchema.encode.call(context, object, wstream);
    /* istanbul ignore next */cov_2fum0ll9oq.s[10]++;
    context[symbols.bytes] += typeOrSchema.encode.bytes;
  } else {
    /* istanbul ignore next */cov_2fum0ll9oq.b[0][1]++;
    cov_2fum0ll9oq.s[11]++;

    encodeSchema(object, wstream, typeOrSchema, context);
  }
}

/**
 * @param {any} object
 * @param {EncodeStream} wstream
 * @param {any} schema
 * @param {Metadata} context
 */
function encodeSchema(object, wstream, schema, context) {
  /* istanbul ignore next */cov_2fum0ll9oq.f[2]++;
  cov_2fum0ll9oq.s[12]++;

  assertSchema(schema);

  /* istanbul ignore next */cov_2fum0ll9oq.s[13]++;
  if (context.node === undefined) {
    /* istanbul ignore next */cov_2fum0ll9oq.b[1][0]++;
    cov_2fum0ll9oq.s[14]++;

    context.node = object;
    /* istanbul ignore next */cov_2fum0ll9oq.s[15]++;
    context.current = object;
  } else {
    /* istanbul ignore next */cov_2fum0ll9oq.b[1][1]++;
    cov_2fum0ll9oq.s[16]++;

    context.current = object;
  }

  const keys = /* istanbul ignore next */(cov_2fum0ll9oq.s[17]++, Object.keys(schema));

  /* istanbul ignore next */cov_2fum0ll9oq.s[18]++;
  for (let i = 0; i < keys.length; i += 1) {
    const key = /* istanbul ignore next */(cov_2fum0ll9oq.s[19]++, keys[i]);
    const type = /* istanbul ignore next */(cov_2fum0ll9oq.s[20]++, schema[key]);
    const value = /* istanbul ignore next */(cov_2fum0ll9oq.s[21]++, object[key]);

    /* istanbul ignore next */cov_2fum0ll9oq.s[22]++;
    if (!isEncodeType(type)) {
      /* istanbul ignore next */cov_2fum0ll9oq.b[2][0]++;
      cov_2fum0ll9oq.s[23]++;

      encodeSchema(value, wstream, type, context);
      /* istanbul ignore next */cov_2fum0ll9oq.s[24]++;
      context.current = object;

      /* istanbul ignore next */cov_2fum0ll9oq.s[25]++;
      continue; // eslint-disable-line no-continue
    } else /* istanbul ignore next */{
      cov_2fum0ll9oq.b[2][1]++;
    }

    cov_2fum0ll9oq.s[26]++;
    type.encode.call(context, value, wstream);
    /* istanbul ignore next */cov_2fum0ll9oq.s[27]++;
    context[symbols.bytes] += type.encode.bytes;
  }
}

/**
 * Check if argument is schema.
 * @param {Object} schema
 * @private
 */
function assertSchema(schema) {
  /* istanbul ignore next */cov_2fum0ll9oq.f[3]++;
  cov_2fum0ll9oq.s[28]++;

  if (!isUserType(schema)) {
    /* istanbul ignore next */cov_2fum0ll9oq.b[3][0]++;
    cov_2fum0ll9oq.s[29]++;

    throw new TypeError('Argument `schema` should be a plain object.');
  } else /* istanbul ignore next */{
    cov_2fum0ll9oq.b[3][1]++;
  }
}