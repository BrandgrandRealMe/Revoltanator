6ea7e1b5bc13c78e9e3138b9e8df40a7
'use strict';

/* istanbul ignore next */var cov_29tb44b33l = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/transaction.js',
      hash = '375fe3a51e33efbeb6439b7291d4e939353c680f',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/transaction.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 51
        }
      },
      '1': {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 4,
          column: 63
        }
      },
      '2': {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 25
        }
      },
      '3': {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 19
        }
      },
      '4': {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 28
        }
      },
      '5': {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 36
        }
      },
      '6': {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 43
        }
      },
      '7': {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 30
        }
      },
      '8': {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 41
        }
      },
      '9': {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 54
        }
      },
      '10': {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 47
        }
      },
      '11': {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 64
        }
      },
      '12': {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 23
        }
      },
      '13': {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 15
        }
      },
      '14': {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 71
        }
      },
      '15': {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 108,
          column: 1
        }
      },
      '16': {
        start: {
          line: 110,
          column: 0
        },
        end: {
          line: 124,
          column: 3
        }
      },
      '17': {
        start: {
          line: 111,
          column: 14
        },
        end: {
          line: 111,
          column: 30
        }
      },
      '18': {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 31
        }
      },
      '19': {
        start: {
          line: 114,
          column: 2
        },
        end: {
          line: 121,
          column: 5
        }
      },
      '20': {
        start: {
          line: 123,
          column: 2
        },
        end: {
          line: 123,
          column: 65
        }
      },
      '21': {
        start: {
          line: 126,
          column: 0
        },
        end: {
          line: 139,
          column: 3
        }
      },
      '22': {
        start: {
          line: 127,
          column: 14
        },
        end: {
          line: 127,
          column: 30
        }
      },
      '23': {
        start: {
          line: 129,
          column: 2
        },
        end: {
          line: 136,
          column: 5
        }
      },
      '24': {
        start: {
          line: 138,
          column: 2
        },
        end: {
          line: 138,
          column: 65
        }
      },
      '25': {
        start: {
          line: 141,
          column: 0
        },
        end: {
          line: 141,
          column: 29
        }
      },
      '26': {
        start: {
          line: 149,
          column: 2
        },
        end: {
          line: 151,
          column: 3
        }
      },
      '27': {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 150,
          column: 47
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 14,
            column: 2
          },
          end: {
            line: 14,
            column: 3
          }
        },
        loc: {
          start: {
            line: 14,
            column: 22
          },
          end: {
            line: 17,
            column: 3
          }
        },
        line: 14
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 22,
            column: 3
          }
        },
        loc: {
          start: {
            line: 22,
            column: 14
          },
          end: {
            line: 24,
            column: 3
          }
        },
        line: 22
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        },
        loc: {
          start: {
            line: 29,
            column: 11
          },
          end: {
            line: 31,
            column: 3
          }
        },
        line: 29
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 38,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        },
        loc: {
          start: {
            line: 38,
            column: 13
          },
          end: {
            line: 40,
            column: 3
          }
        },
        line: 38
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        },
        loc: {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 48,
            column: 3
          }
        },
        line: 46
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 55,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        },
        loc: {
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 57,
            column: 3
          }
        },
        line: 55
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 65,
            column: 2
          },
          end: {
            line: 65,
            column: 3
          }
        },
        loc: {
          start: {
            line: 65,
            column: 33
          },
          end: {
            line: 67,
            column: 3
          }
        },
        line: 65
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 74,
            column: 2
          },
          end: {
            line: 74,
            column: 3
          }
        },
        loc: {
          start: {
            line: 74,
            column: 19
          },
          end: {
            line: 81,
            column: 3
          }
        },
        line: 74
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 88,
            column: 2
          },
          end: {
            line: 88,
            column: 3
          }
        },
        loc: {
          start: {
            line: 88,
            column: 28
          },
          end: {
            line: 90,
            column: 3
          }
        },
        line: 88
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 110,
            column: 29
          },
          end: {
            line: 110,
            column: 30
          }
        },
        loc: {
          start: {
            line: 110,
            column: 39
          },
          end: {
            line: 124,
            column: 1
          }
        },
        line: 110
      },
      '10': {
        name: '(anonymous_10)',
        decl: {
          start: {
            line: 126,
            column: 63
          },
          end: {
            line: 126,
            column: 64
          }
        },
        loc: {
          start: {
            line: 126,
            column: 73
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 126
      },
      '11': {
        name: 'assertSize',
        decl: {
          start: {
            line: 148,
            column: 9
          },
          end: {
            line: 148,
            column: 19
          }
        },
        loc: {
          start: {
            line: 148,
            column: 34
          },
          end: {
            line: 152,
            column: 1
          }
        },
        line: 148
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 38,
            column: 6
          },
          end: {
            line: 38,
            column: 11
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 38,
            column: 10
          },
          end: {
            line: 38,
            column: 11
          }
        }],
        line: 38
      },
      '1': {
        loc: {
          start: {
            line: 88,
            column: 16
          },
          end: {
            line: 88,
            column: 26
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 88,
            column: 25
          },
          end: {
            line: 88,
            column: 26
          }
        }],
        line: 88
      },
      '2': {
        loc: {
          start: {
            line: 149,
            column: 2
          },
          end: {
            line: 151,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 149,
            column: 2
          },
          end: {
            line: 151,
            column: 3
          }
        }, {
          start: {
            line: 149,
            column: 2
          },
          end: {
            line: 151,
            column: 3
          }
        }],
        line: 149
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0
    },
    b: {
      '0': [0],
      '1': [0],
      '2': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const createFunction = /* istanbul ignore next */(cov_29tb44b33l.s[0]++, require('generate-function'));
const NotEnoughDataError = /* istanbul ignore next */(cov_29tb44b33l.s[1]++, require('lib/not-enough-data-error'));

/**
 * Helps to read the whole data chunk.
 */
class Transaction {
  /**
   * @class Transaction
   * @param {DecodeStream} stream
   */
  constructor(stream) {
    /* istanbul ignore next */cov_29tb44b33l.f[0]++;
    cov_29tb44b33l.s[2]++;

    this.stream = stream;
    /* istanbul ignore next */cov_29tb44b33l.s[3]++;
    this.index = 0;
  }

  /**
   * @param {Buffer} buf
   */
  append(buf) {
    /* istanbul ignore next */cov_29tb44b33l.f[1]++;
    cov_29tb44b33l.s[4]++;

    this.stream.append(buf);
  }

  /**
   * Confirm reading and removes data from stream.
   */
  commit() {
    /* istanbul ignore next */cov_29tb44b33l.f[2]++;
    cov_29tb44b33l.s[5]++;

    this.stream.consume(this.index);
  }

  /**
   * Get byte from stream by index.
   * @param {number} i
   * @returns {number}
   */
  get(i = /* istanbul ignore next */(cov_29tb44b33l.b[0][0]++, 0)) {
    /* istanbul ignore next */cov_29tb44b33l.f[3]++;
    cov_29tb44b33l.s[6]++;

    return this.stream.get(this.index + i);
  }

  /**
   * Get the number of bytes in stream.
   * @returns {number}
   */
  get length() {
    /* istanbul ignore next */cov_29tb44b33l.f[4]++;
    cov_29tb44b33l.s[7]++;

    return this.stream.length;
  }

  /**
   * @param {number} [start]
   * @param {number} [end]
   * @returns {Buffer}
   */
  slice(start, end) {
    /* istanbul ignore next */cov_29tb44b33l.f[5]++;
    cov_29tb44b33l.s[8]++;

    return this.stream.slice(start, end);
  }

  /**
   * @param {string} encoding
   * @param {number} [start]
   * @param {number} [end]
   * @returns {string}
   */
  toString(encoding, start, end) {
    /* istanbul ignore next */cov_29tb44b33l.f[6]++;
    cov_29tb44b33l.s[9]++;

    return this.stream.toString(encoding, start, end);
  }

  /**
   * Read provided amount of bytes from stream.
   * @param {number} size
   * @returns {Buffer}
   */
  readBuffer(size) {
    /* istanbul ignore next */cov_29tb44b33l.f[7]++;
    cov_29tb44b33l.s[10]++;

    assertSize(this.index + size, this.length);

    const buf = /* istanbul ignore next */(cov_29tb44b33l.s[11]++, this.stream.slice(this.index, this.index + size));
    /* istanbul ignore next */cov_29tb44b33l.s[12]++;
    this.index += size;

    /* istanbul ignore next */cov_29tb44b33l.s[13]++;
    return buf;
  }

  /**
   * @param {number} byte
   * @param {number} [offset]
   * @returns {number}
   */
  indexOf(byte, offset = /* istanbul ignore next */(cov_29tb44b33l.b[1][0]++, 0)) {
    /* istanbul ignore next */cov_29tb44b33l.f[8]++;
    cov_29tb44b33l.s[14]++;

    return this.stream.indexOf(byte, this.index + offset) - this.index;
  }
}

const methods = /* istanbul ignore next */(cov_29tb44b33l.s[15]++, {
  readDoubleBE: 8,
  readDoubleLE: 8,
  readFloatBE: 4,
  readFloatLE: 4,
  readInt32BE: 4,
  readInt32LE: 4,
  readUInt32BE: 4,
  readUInt32LE: 4,
  readInt16BE: 2,
  readInt16LE: 2,
  readUInt16BE: 2,
  readUInt16LE: 2,
  readInt8: 1,
  readUInt8: 1
});

/* istanbul ignore next */cov_29tb44b33l.s[16]++;
Object.keys(methods).forEach(method => {
  /* istanbul ignore next */cov_29tb44b33l.f[9]++;

  const gen = /* istanbul ignore next */(cov_29tb44b33l.s[17]++, createFunction());
  const bytes = /* istanbul ignore next */(cov_29tb44b33l.s[18]++, methods[method]);

  /* istanbul ignore next */cov_29tb44b33l.s[19]++;
  gen(`
    function transaction_${method}() {
      assertSize(this.index + ${gen.formats.d(bytes)}, this.length);
      const value = this.stream.buffer.${method}(this.index);
      this.index += ${gen.formats.d(bytes)};
      return value;
    }
  `);

  /* istanbul ignore next */cov_29tb44b33l.s[20]++;
  Transaction.prototype[method] = gen.toFunction({ assertSize });
});

/* istanbul ignore next */cov_29tb44b33l.s[21]++;
['readIntBE', 'readIntLE', 'readUIntBE', 'readUIntLE'].forEach(method => {
  /* istanbul ignore next */cov_29tb44b33l.f[10]++;

  const gen = /* istanbul ignore next */(cov_29tb44b33l.s[22]++, createFunction());

  /* istanbul ignore next */cov_29tb44b33l.s[23]++;
  gen(`
    function transaction_${method}(bytes) {
      assertSize(this.index + bytes, this.length);
      const value = this.stream.buffer.${method}(bytes, this.index);
      this.index += bytes;
      return value;
    }
  `);

  /* istanbul ignore next */cov_29tb44b33l.s[24]++;
  Transaction.prototype[method] = gen.toFunction({ assertSize });
});

/* istanbul ignore next */cov_29tb44b33l.s[25]++;
module.exports = Transaction;

/**
 * Check if stream is able to read requested amound of data.
 * @param {number} size Requested data size to read.
 * @param {number} length The number of bytes in stream.
 */
function assertSize(size, length) {
  /* istanbul ignore next */cov_29tb44b33l.f[11]++;
  cov_29tb44b33l.s[26]++;

  if (size > length) {
    /* istanbul ignore next */cov_29tb44b33l.b[2][0]++;
    cov_29tb44b33l.s[27]++;

    throw new NotEnoughDataError(size, length);
  } else /* istanbul ignore next */{
    cov_29tb44b33l.b[2][1]++;
  }
}