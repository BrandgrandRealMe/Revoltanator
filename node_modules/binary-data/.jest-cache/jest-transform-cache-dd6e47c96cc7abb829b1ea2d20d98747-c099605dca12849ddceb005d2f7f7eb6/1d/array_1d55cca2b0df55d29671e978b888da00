c6717f7b77233bfaa2b582527671ede0
'use strict';

/* istanbul ignore next */var cov_1hm1ldlb0g = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/array.js',
      hash = 'f7105d27567a45b2da0937bac2653b193968f3a5',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/array.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 25
        },
        end: {
          line: 3,
          column: 46
        }
      },
      '1': {
        start: {
          line: 4,
          column: 25
        },
        end: {
          line: 4,
          column: 46
        }
      },
      '2': {
        start: {
          line: 5,
          column: 33
        },
        end: {
          line: 5,
          column: 63
        }
      },
      '3': {
        start: {
          line: 6,
          column: 43
        },
        end: {
          line: 6,
          column: 62
        }
      },
      '4': {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 41
        }
      },
      '5': {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 23
        }
      },
      '6': {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 21,
          column: 3
        }
      },
      '7': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 63
        }
      },
      '8': {
        start: {
          line: 23,
          column: 26
        },
        end: {
          line: 23,
          column: 48
        }
      },
      '9': {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 42
        }
      },
      '10': {
        start: {
          line: 25,
          column: 17
        },
        end: {
          line: 25,
          column: 31
        }
      },
      '11': {
        start: {
          line: 26,
          column: 17
        },
        end: {
          line: 26,
          column: 35
        }
      },
      '12': {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 30,
          column: 3
        }
      },
      '13': {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 56
        }
      },
      '14': {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 36,
          column: 4
        }
      },
      '15': {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 22
        }
      },
      '16': {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 40
        }
      },
      '17': {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 21
        }
      },
      '18': {
        start: {
          line: 50,
          column: 23
        },
        end: {
          line: 50,
          column: 24
        }
      },
      '19': {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      '20': {
        start: {
          line: 53,
          column: 6
        },
        end: {
          line: 53,
          column: 34
        }
      },
      '21': {
        start: {
          line: 54,
          column: 11
        },
        end: {
          line: 60,
          column: 5
        }
      },
      '22': {
        start: {
          line: 55,
          column: 6
        },
        end: {
          line: 55,
          column: 28
        }
      },
      '23': {
        start: {
          line: 56,
          column: 11
        },
        end: {
          line: 60,
          column: 5
        }
      },
      '24': {
        start: {
          line: 57,
          column: 6
        },
        end: {
          line: 57,
          column: 37
        }
      },
      '25': {
        start: {
          line: 59,
          column: 6
        },
        end: {
          line: 59,
          column: 39
        }
      },
      '26': {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      '27': {
        start: {
          line: 63,
          column: 6
        },
        end: {
          line: 63,
          column: 49
        }
      },
      '28': {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      '29': {
        start: {
          line: 67,
          column: 28
        },
        end: {
          line: 67,
          column: 51
        }
      },
      '30': {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 71,
          column: 7
        }
      },
      '31': {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 56
        }
      },
      '32': {
        start: {
          line: 73,
          column: 6
        },
        end: {
          line: 75,
          column: 7
        }
      },
      '33': {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 43
        }
      },
      '34': {
        start: {
          line: 77,
          column: 6
        },
        end: {
          line: 77,
          column: 56
        }
      },
      '35': {
        start: {
          line: 78,
          column: 6
        },
        end: {
          line: 78,
          column: 36
        }
      },
      '36': {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      '37': {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 82,
          column: 57
        }
      },
      '38': {
        start: {
          line: 83,
          column: 6
        },
        end: {
          line: 83,
          column: 42
        }
      },
      '39': {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 88,
          column: 7
        }
      },
      '40': {
        start: {
          line: 87,
          column: 6
        },
        end: {
          line: 87,
          column: 49
        }
      },
      '41': {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 90,
          column: 34
        }
      },
      '42': {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 28
        }
      },
      '43': {
        start: {
          line: 100,
          column: 23
        },
        end: {
          line: 100,
          column: 24
        }
      },
      '44': {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 21
        }
      },
      '45': {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 40
        }
      },
      '46': {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      '47': {
        start: {
          line: 107,
          column: 6
        },
        end: {
          line: 107,
          column: 28
        }
      },
      '48': {
        start: {
          line: 108,
          column: 11
        },
        end: {
          line: 113,
          column: 5
        }
      },
      '49': {
        start: {
          line: 109,
          column: 6
        },
        end: {
          line: 109,
          column: 58
        }
      },
      '50': {
        start: {
          line: 110,
          column: 6
        },
        end: {
          line: 110,
          column: 42
        }
      },
      '51': {
        start: {
          line: 111,
          column: 11
        },
        end: {
          line: 113,
          column: 5
        }
      },
      '52': {
        start: {
          line: 112,
          column: 6
        },
        end: {
          line: 112,
          column: 37
        }
      },
      '53': {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 115,
          column: 37
        }
      },
      '54': {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      '55': {
        start: {
          line: 120,
          column: 6
        },
        end: {
          line: 120,
          column: 65
        }
      },
      '56': {
        start: {
          line: 122,
          column: 6
        },
        end: {
          line: 122,
          column: 65
        }
      },
      '57': {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 125,
          column: 34
        }
      },
      '58': {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 28
        }
      },
      '59': {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 18
        }
      },
      '60': {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 136,
          column: 22
        }
      },
      '61': {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 139,
          column: 40
        }
      },
      '62': {
        start: {
          line: 141,
          column: 15
        },
        end: {
          line: 141,
          column: 16
        }
      },
      '63': {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      '64': {
        start: {
          line: 144,
          column: 6
        },
        end: {
          line: 144,
          column: 20
        }
      },
      '65': {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 149,
          column: 5
        }
      },
      '66': {
        start: {
          line: 148,
          column: 6
        },
        end: {
          line: 148,
          column: 49
        }
      },
      '67': {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 153,
          column: 5
        }
      },
      '68': {
        start: {
          line: 152,
          column: 6
        },
        end: {
          line: 152,
          column: 48
        }
      },
      '69': {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 155,
          column: 28
        }
      },
      '70': {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 156,
          column: 26
        }
      },
      '71': {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 160,
          column: 5
        }
      },
      '72': {
        start: {
          line: 159,
          column: 6
        },
        end: {
          line: 159,
          column: 42
        }
      },
      '73': {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 162,
          column: 16
        }
      },
      '74': {
        start: {
          line: 172,
          column: 2
        },
        end: {
          line: 174,
          column: 3
        }
      },
      '75': {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 173,
          column: 59
        }
      },
      '76': {
        start: {
          line: 183,
          column: 2
        },
        end: {
          line: 185,
          column: 3
        }
      },
      '77': {
        start: {
          line: 184,
          column: 4
        },
        end: {
          line: 184,
          column: 66
        }
      },
      '78': {
        start: {
          line: 195,
          column: 2
        },
        end: {
          line: 199,
          column: 3
        }
      },
      '79': {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 198,
          column: 6
        }
      },
      '80': {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 18
        }
      },
      '81': {
        start: {
          line: 213,
          column: 17
        },
        end: {
          line: 213,
          column: 30
        }
      },
      '82': {
        start: {
          line: 214,
          column: 14
        },
        end: {
          line: 214,
          column: 15
        }
      },
      '83': {
        start: {
          line: 216,
          column: 2
        },
        end: {
          line: 219,
          column: 3
        }
      },
      '84': {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 217,
          column: 53
        }
      },
      '85': {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 218,
          column: 35
        }
      },
      '86': {
        start: {
          line: 221,
          column: 2
        },
        end: {
          line: 223,
          column: 3
        }
      },
      '87': {
        start: {
          line: 222,
          column: 4
        },
        end: {
          line: 222,
          column: 53
        }
      },
      '88': {
        start: {
          line: 225,
          column: 2
        },
        end: {
          line: 225,
          column: 15
        }
      },
      '89': {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 33
        }
      },
      '90': {
        start: {
          line: 240,
          column: 2
        },
        end: {
          line: 242,
          column: 3
        }
      },
      '91': {
        start: {
          line: 241,
          column: 4
        },
        end: {
          line: 241,
          column: 52
        }
      },
      '92': {
        start: {
          line: 244,
          column: 2
        },
        end: {
          line: 244,
          column: 15
        }
      }
    },
    fnMap: {
      '0': {
        name: 'array',
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 14
          }
        },
        loc: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 164,
            column: 1
          }
        },
        line: 18
      },
      '1': {
        name: 'encode',
        decl: {
          start: {
            line: 43,
            column: 11
          },
          end: {
            line: 43,
            column: 17
          }
        },
        loc: {
          start: {
            line: 43,
            column: 34
          },
          end: {
            line: 92,
            column: 3
          }
        },
        line: 43
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 86,
            column: 18
          },
          end: {
            line: 86,
            column: 19
          }
        },
        loc: {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 86
      },
      '3': {
        name: 'decode',
        decl: {
          start: {
            line: 99,
            column: 11
          },
          end: {
            line: 99,
            column: 17
          }
        },
        loc: {
          start: {
            line: 99,
            column: 27
          },
          end: {
            line: 128,
            column: 3
          }
        },
        line: 99
      },
      '4': {
        name: 'encodingLength',
        decl: {
          start: {
            line: 135,
            column: 11
          },
          end: {
            line: 135,
            column: 25
          }
        },
        loc: {
          start: {
            line: 135,
            column: 33
          },
          end: {
            line: 163,
            column: 3
          }
        },
        line: 135
      },
      '5': {
        name: 'checkArray',
        decl: {
          start: {
            line: 171,
            column: 9
          },
          end: {
            line: 171,
            column: 19
          }
        },
        loc: {
          start: {
            line: 171,
            column: 27
          },
          end: {
            line: 175,
            column: 1
          }
        },
        line: 171
      },
      '6': {
        name: 'checkArraySizeType',
        decl: {
          start: {
            line: 182,
            column: 9
          },
          end: {
            line: 182,
            column: 27
          }
        },
        loc: {
          start: {
            line: 182,
            column: 36
          },
          end: {
            line: 186,
            column: 1
          }
        },
        line: 182
      },
      '7': {
        name: 'checkArraySize',
        decl: {
          start: {
            line: 194,
            column: 9
          },
          end: {
            line: 194,
            column: 23
          }
        },
        loc: {
          start: {
            line: 194,
            column: 50
          },
          end: {
            line: 200,
            column: 1
          }
        },
        line: 194
      },
      '8': {
        name: 'decodeBytes',
        decl: {
          start: {
            line: 211,
            column: 9
          },
          end: {
            line: 211,
            column: 20
          }
        },
        loc: {
          start: {
            line: 211,
            column: 58
          },
          end: {
            line: 226,
            column: 1
          }
        },
        line: 211
      },
      '9': {
        name: 'decodeCount',
        decl: {
          start: {
            line: 237,
            column: 9
          },
          end: {
            line: 237,
            column: 20
          }
        },
        loc: {
          start: {
            line: 237,
            column: 53
          },
          end: {
            line: 245,
            column: 1
          }
        },
        line: 237
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 18,
            column: 49
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 18,
            column: 42
          },
          end: {
            line: 18,
            column: 49
          }
        }],
        line: 18
      },
      '1': {
        loc: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        }, {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 21,
            column: 3
          }
        }],
        line: 19
      },
      '2': {
        loc: {
          start: {
            line: 19,
            column: 6
          },
          end: {
            line: 19,
            column: 40
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 19,
            column: 6
          },
          end: {
            line: 19,
            column: 19
          }
        }, {
          start: {
            line: 19,
            column: 23
          },
          end: {
            line: 19,
            column: 40
          }
        }],
        line: 19
      },
      '3': {
        loc: {
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 30,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 30,
            column: 3
          }
        }, {
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 30,
            column: 3
          }
        }],
        line: 28
      },
      '4': {
        loc: {
          start: {
            line: 28,
            column: 6
          },
          end: {
            line: 28,
            column: 34
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 28,
            column: 6
          },
          end: {
            line: 28,
            column: 12
          }
        }, {
          start: {
            line: 28,
            column: 16
          },
          end: {
            line: 28,
            column: 23
          }
        }, {
          start: {
            line: 28,
            column: 27
          },
          end: {
            line: 28,
            column: 34
          }
        }],
        line: 28
      },
      '5': {
        loc: {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: 52,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }],
        line: 52
      },
      '6': {
        loc: {
          start: {
            line: 54,
            column: 11
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 54,
            column: 11
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: 54,
            column: 11
          },
          end: {
            line: 60,
            column: 5
          }
        }],
        line: 54
      },
      '7': {
        loc: {
          start: {
            line: 56,
            column: 11
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 56,
            column: 11
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: 56,
            column: 11
          },
          end: {
            line: 60,
            column: 5
          }
        }],
        line: 56
      },
      '8': {
        loc: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        }, {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        }],
        line: 62
      },
      '9': {
        loc: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }],
        line: 66
      },
      '10': {
        loc: {
          start: {
            line: 73,
            column: 6
          },
          end: {
            line: 75,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 73,
            column: 6
          },
          end: {
            line: 75,
            column: 7
          }
        }, {
          start: {
            line: 73,
            column: 6
          },
          end: {
            line: 75,
            column: 7
          }
        }],
        line: 73
      },
      '11': {
        loc: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        }, {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        }],
        line: 81
      },
      '12': {
        loc: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }],
        line: 106
      },
      '13': {
        loc: {
          start: {
            line: 108,
            column: 11
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 108,
            column: 11
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: 108,
            column: 11
          },
          end: {
            line: 113,
            column: 5
          }
        }],
        line: 108
      },
      '14': {
        loc: {
          start: {
            line: 111,
            column: 11
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 111,
            column: 11
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: 111,
            column: 11
          },
          end: {
            line: 113,
            column: 5
          }
        }],
        line: 111
      },
      '15': {
        loc: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        }, {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        }],
        line: 119
      },
      '16': {
        loc: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        }, {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        }],
        line: 143
      },
      '17': {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 32
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: 143,
            column: 17
          },
          end: {
            line: 143,
            column: 32
          }
        }],
        line: 143
      },
      '18': {
        loc: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        }, {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        }],
        line: 147
      },
      '19': {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 147,
            column: 34
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 147,
            column: 14
          }
        }, {
          start: {
            line: 147,
            column: 18
          },
          end: {
            line: 147,
            column: 34
          }
        }],
        line: 147
      },
      '20': {
        loc: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        }, {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        }],
        line: 158
      },
      '21': {
        loc: {
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 158,
            column: 33
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 158,
            column: 8
          },
          end: {
            line: 158,
            column: 14
          }
        }, {
          start: {
            line: 158,
            column: 18
          },
          end: {
            line: 158,
            column: 33
          }
        }],
        line: 158
      },
      '22': {
        loc: {
          start: {
            line: 172,
            column: 2
          },
          end: {
            line: 174,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 172,
            column: 2
          },
          end: {
            line: 174,
            column: 3
          }
        }, {
          start: {
            line: 172,
            column: 2
          },
          end: {
            line: 174,
            column: 3
          }
        }],
        line: 172
      },
      '23': {
        loc: {
          start: {
            line: 183,
            column: 2
          },
          end: {
            line: 185,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 183,
            column: 2
          },
          end: {
            line: 185,
            column: 3
          }
        }, {
          start: {
            line: 183,
            column: 2
          },
          end: {
            line: 185,
            column: 3
          }
        }],
        line: 183
      },
      '24': {
        loc: {
          start: {
            line: 195,
            column: 2
          },
          end: {
            line: 199,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 195,
            column: 2
          },
          end: {
            line: 199,
            column: 3
          }
        }, {
          start: {
            line: 195,
            column: 2
          },
          end: {
            line: 199,
            column: 3
          }
        }],
        line: 195
      },
      '25': {
        loc: {
          start: {
            line: 221,
            column: 2
          },
          end: {
            line: 223,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 221,
            column: 2
          },
          end: {
            line: 223,
            column: 3
          }
        }, {
          start: {
            line: 221,
            column: 2
          },
          end: {
            line: 223,
            column: 3
          }
        }],
        line: 221
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0,
      '48': 0,
      '49': 0,
      '50': 0,
      '51': 0,
      '52': 0,
      '53': 0,
      '54': 0,
      '55': 0,
      '56': 0,
      '57': 0,
      '58': 0,
      '59': 0,
      '60': 0,
      '61': 0,
      '62': 0,
      '63': 0,
      '64': 0,
      '65': 0,
      '66': 0,
      '67': 0,
      '68': 0,
      '69': 0,
      '70': 0,
      '71': 0,
      '72': 0,
      '73': 0,
      '74': 0,
      '75': 0,
      '76': 0,
      '77': 0,
      '78': 0,
      '79': 0,
      '80': 0,
      '81': 0,
      '82': 0,
      '83': 0,
      '84': 0,
      '85': 0,
      '86': 0,
      '87': 0,
      '88': 0,
      '89': 0,
      '90': 0,
      '91': 0,
      '92': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0
    },
    b: {
      '0': [0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0],
      '10': [0, 0],
      '11': [0, 0],
      '12': [0, 0],
      '13': [0, 0],
      '14': [0, 0],
      '15': [0, 0],
      '16': [0, 0],
      '17': [0, 0],
      '18': [0, 0],
      '19': [0, 0],
      '20': [0, 0],
      '21': [0, 0],
      '22': [0, 0],
      '23': [0, 0],
      '24': [0, 0],
      '25': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const { decodeCommon } = /* istanbul ignore next */(cov_1hm1ldlb0g.s[0]++, require('lib/decode'));
const { encodeCommon } = /* istanbul ignore next */(cov_1hm1ldlb0g.s[1]++, require('lib/encode'));
const { encodingLengthCommon } = /* istanbul ignore next */(cov_1hm1ldlb0g.s[2]++, require('lib/encoding-length'));
const { isType, isUserType, isFunction } = /* istanbul ignore next */(cov_1hm1ldlb0g.s[3]++, require('lib/util'));
const Metadata = /* istanbul ignore next */(cov_1hm1ldlb0g.s[4]++, require('internal/meta'));

/* istanbul ignore next */cov_1hm1ldlb0g.s[5]++;
module.exports = array;

/**
 * Array type.
 * @param {Object} type Any builtin type or schema.
 * @param {Object|number} length Number type or number.
 * @param {string} lengthType Method of calculate the length of array.
 * @returns {Object}
 */
function array(type, length, lengthType = /* istanbul ignore next */(cov_1hm1ldlb0g.b[0][0]++, 'count')) {
  /* istanbul ignore next */cov_1hm1ldlb0g.f[0]++;
  cov_1hm1ldlb0g.s[6]++;

  if ( /* istanbul ignore next */(cov_1hm1ldlb0g.b[2][0]++, !isType(type)) && /* istanbul ignore next */(cov_1hm1ldlb0g.b[2][1]++, !isUserType(type))) {
    /* istanbul ignore next */cov_1hm1ldlb0g.b[1][0]++;
    cov_1hm1ldlb0g.s[7]++;

    throw new TypeError('Argument #1 should be a valid type.');
  } else /* istanbul ignore next */{
    cov_1hm1ldlb0g.b[1][1]++;
  }

  const isLengthInBytes = /* istanbul ignore next */(cov_1hm1ldlb0g.s[8]++, lengthType === 'bytes');
  const isnum = /* istanbul ignore next */(cov_1hm1ldlb0g.s[9]++, typeof length === 'number');
  const istype = /* istanbul ignore next */(cov_1hm1ldlb0g.s[10]++, isType(length));
  const isfunc = /* istanbul ignore next */(cov_1hm1ldlb0g.s[11]++, isFunction(length));

  /* istanbul ignore next */cov_1hm1ldlb0g.s[12]++;
  if ( /* istanbul ignore next */(cov_1hm1ldlb0g.b[4][0]++, !isnum) && /* istanbul ignore next */(cov_1hm1ldlb0g.b[4][1]++, !istype) && /* istanbul ignore next */(cov_1hm1ldlb0g.b[4][2]++, !isfunc)) {
    /* istanbul ignore next */cov_1hm1ldlb0g.b[3][0]++;
    cov_1hm1ldlb0g.s[13]++;

    throw new TypeError('Unknown type of argument #1.');
  } else /* istanbul ignore next */{
    cov_1hm1ldlb0g.b[3][1]++;
  }

  cov_1hm1ldlb0g.s[14]++;
  return {
    encode,
    decode,
    encodingLength
  };

  /**
   * Encode array's items.
   * @param {any[]} items Array of items to encode.
   * @param {EncodeStream} wstream
   */
  function encode(items, wstream) {
    /* istanbul ignore next */cov_1hm1ldlb0g.f[1]++;
    cov_1hm1ldlb0g.s[15]++;

    checkArray(items);

    // eslint-disable-next-line no-invalid-this
    const context = /* istanbul ignore next */(cov_1hm1ldlb0g.s[16]++, Metadata.clone(this));

    /* istanbul ignore next */cov_1hm1ldlb0g.s[17]++;
    encode.bytes = 0;
    let expectedSize = /* istanbul ignore next */(cov_1hm1ldlb0g.s[18]++, 0);

    /* istanbul ignore next */cov_1hm1ldlb0g.s[19]++;
    if (istype) {
      /* istanbul ignore next */cov_1hm1ldlb0g.b[5][0]++;
      cov_1hm1ldlb0g.s[20]++;

      expectedSize = items.length;
    } else {
        /* istanbul ignore next */cov_1hm1ldlb0g.b[5][1]++;
        cov_1hm1ldlb0g.s[21]++;
        if (isnum) {
          /* istanbul ignore next */cov_1hm1ldlb0g.b[6][0]++;
          cov_1hm1ldlb0g.s[22]++;

          expectedSize = length;
        } else {
            /* istanbul ignore next */cov_1hm1ldlb0g.b[6][1]++;
            cov_1hm1ldlb0g.s[23]++;
            if (isfunc) {
              /* istanbul ignore next */cov_1hm1ldlb0g.b[7][0]++;
              cov_1hm1ldlb0g.s[24]++;

              expectedSize = length(context);

              /* istanbul ignore next */cov_1hm1ldlb0g.s[25]++;
              checkArraySizeType(expectedSize);
            } else /* istanbul ignore next */{
              cov_1hm1ldlb0g.b[7][1]++;
            }
          }
      } /* istanbul ignore next */cov_1hm1ldlb0g.s[26]++;
    if (!isLengthInBytes) {
      /* istanbul ignore next */cov_1hm1ldlb0g.b[8][0]++;
      cov_1hm1ldlb0g.s[27]++;

      checkArraySize(expectedSize, items.length);
    } else /* istanbul ignore next */{
      cov_1hm1ldlb0g.b[8][1]++;
    }

    cov_1hm1ldlb0g.s[28]++;
    if (isLengthInBytes) {
      /* istanbul ignore next */cov_1hm1ldlb0g.b[9][0]++;

      const lengthContext = /* istanbul ignore next */(cov_1hm1ldlb0g.s[29]++, Metadata.clone(context));

      /* istanbul ignore next */cov_1hm1ldlb0g.s[30]++;
      for (const item of items) {
        /* istanbul ignore next */cov_1hm1ldlb0g.s[31]++;

        encodingLengthCommon(item, type, lengthContext);
      }

      /* istanbul ignore next */cov_1hm1ldlb0g.s[32]++;
      if (istype) {
        /* istanbul ignore next */cov_1hm1ldlb0g.b[10][0]++;
        cov_1hm1ldlb0g.s[33]++;

        expectedSize = lengthContext.bytes;
      } else /* istanbul ignore next */{
        cov_1hm1ldlb0g.b[10][1]++;
      }

      cov_1hm1ldlb0g.s[34]++;
      checkArraySize(lengthContext.bytes, expectedSize);
      /* istanbul ignore next */cov_1hm1ldlb0g.s[35]++;
      Metadata.clean(lengthContext);
    } else /* istanbul ignore next */{
      cov_1hm1ldlb0g.b[9][1]++;
    }

    cov_1hm1ldlb0g.s[36]++;
    if (istype) {
      /* istanbul ignore next */cov_1hm1ldlb0g.b[11][0]++;
      cov_1hm1ldlb0g.s[37]++;

      length.encode.call(context, expectedSize, wstream);
      /* istanbul ignore next */cov_1hm1ldlb0g.s[38]++;
      encode.bytes += length.encode.bytes;
    } else /* istanbul ignore next */{
      cov_1hm1ldlb0g.b[11][1]++;
    }

    cov_1hm1ldlb0g.s[39]++;
    items.forEach(item => {
      /* istanbul ignore next */cov_1hm1ldlb0g.f[2]++;
      cov_1hm1ldlb0g.s[40]++;

      encodeCommon(item, wstream, type, context);
    });

    /* istanbul ignore next */cov_1hm1ldlb0g.s[41]++;
    encode.bytes += context.bytes;
    /* istanbul ignore next */cov_1hm1ldlb0g.s[42]++;
    Metadata.clean(context);
  }

  /**
   * Decode array from stream.
   * @param {DecodeStream} rstream
   * @returns {any[]}
   */
  function decode(rstream) {
    /* istanbul ignore next */cov_1hm1ldlb0g.f[3]++;

    let expectedSize = /* istanbul ignore next */(cov_1hm1ldlb0g.s[43]++, 0);
    /* istanbul ignore next */cov_1hm1ldlb0g.s[44]++;
    decode.bytes = 0;

    // eslint-disable-next-line no-invalid-this
    const context = /* istanbul ignore next */(cov_1hm1ldlb0g.s[45]++, Metadata.clone(this));

    /* istanbul ignore next */cov_1hm1ldlb0g.s[46]++;
    if (isnum) {
      /* istanbul ignore next */cov_1hm1ldlb0g.b[12][0]++;
      cov_1hm1ldlb0g.s[47]++;

      expectedSize = length;
    } else {
        /* istanbul ignore next */cov_1hm1ldlb0g.b[12][1]++;
        cov_1hm1ldlb0g.s[48]++;
        if (istype) {
          /* istanbul ignore next */cov_1hm1ldlb0g.b[13][0]++;
          cov_1hm1ldlb0g.s[49]++;

          expectedSize = length.decode.call(context, rstream);
          /* istanbul ignore next */cov_1hm1ldlb0g.s[50]++;
          decode.bytes += length.decode.bytes;
        } else {
            /* istanbul ignore next */cov_1hm1ldlb0g.b[13][1]++;
            cov_1hm1ldlb0g.s[51]++;
            if (isfunc) {
              /* istanbul ignore next */cov_1hm1ldlb0g.b[14][0]++;
              cov_1hm1ldlb0g.s[52]++;

              expectedSize = length(context);
            } else /* istanbul ignore next */{
              cov_1hm1ldlb0g.b[14][1]++;
            }
          }
      } /* istanbul ignore next */cov_1hm1ldlb0g.s[53]++;
    checkArraySizeType(expectedSize);

    let values;

    /* istanbul ignore next */cov_1hm1ldlb0g.s[54]++;
    if (isLengthInBytes) {
      /* istanbul ignore next */cov_1hm1ldlb0g.b[15][0]++;
      cov_1hm1ldlb0g.s[55]++;

      values = decodeBytes(type, expectedSize, rstream, context);
    } else {
      /* istanbul ignore next */cov_1hm1ldlb0g.b[15][1]++;
      cov_1hm1ldlb0g.s[56]++;

      values = decodeCount(type, expectedSize, rstream, context);
    }

    /* istanbul ignore next */cov_1hm1ldlb0g.s[57]++;
    decode.bytes += context.bytes;
    /* istanbul ignore next */cov_1hm1ldlb0g.s[58]++;
    Metadata.clean(context);
    /* istanbul ignore next */cov_1hm1ldlb0g.s[59]++;
    return values;
  }

  /**
   * Returns the number of bytes of an encoded items.
   * @param {any[]} items
   * @returns {number}
   */
  function encodingLength(items) {
    /* istanbul ignore next */cov_1hm1ldlb0g.f[4]++;
    cov_1hm1ldlb0g.s[60]++;

    checkArray(items);

    // eslint-disable-next-line no-invalid-this
    const context = /* istanbul ignore next */(cov_1hm1ldlb0g.s[61]++, Metadata.clone(this));

    let size = /* istanbul ignore next */(cov_1hm1ldlb0g.s[62]++, 0);

    /* istanbul ignore next */cov_1hm1ldlb0g.s[63]++;
    if ( /* istanbul ignore next */(cov_1hm1ldlb0g.b[17][0]++, isnum) && /* istanbul ignore next */(cov_1hm1ldlb0g.b[17][1]++, isLengthInBytes)) {
      /* istanbul ignore next */cov_1hm1ldlb0g.b[16][0]++;
      cov_1hm1ldlb0g.s[64]++;

      return length;
    } else /* istanbul ignore next */{
      cov_1hm1ldlb0g.b[16][1]++;
    }

    cov_1hm1ldlb0g.s[65]++;
    if ( /* istanbul ignore next */(cov_1hm1ldlb0g.b[19][0]++, istype) && /* istanbul ignore next */(cov_1hm1ldlb0g.b[19][1]++, !isLengthInBytes)) {
      /* istanbul ignore next */cov_1hm1ldlb0g.b[18][0]++;
      cov_1hm1ldlb0g.s[66]++;

      size = length.encodingLength(items.length);
    } else /* istanbul ignore next */{
      cov_1hm1ldlb0g.b[18][1]++;
    }

    cov_1hm1ldlb0g.s[67]++;
    for (const item of items) {
      /* istanbul ignore next */cov_1hm1ldlb0g.s[68]++;

      encodingLengthCommon(item, type, context);
    }

    /* istanbul ignore next */cov_1hm1ldlb0g.s[69]++;
    Metadata.clean(context);
    /* istanbul ignore next */cov_1hm1ldlb0g.s[70]++;
    size += context.bytes;

    /* istanbul ignore next */cov_1hm1ldlb0g.s[71]++;
    if ( /* istanbul ignore next */(cov_1hm1ldlb0g.b[21][0]++, istype) && /* istanbul ignore next */(cov_1hm1ldlb0g.b[21][1]++, isLengthInBytes)) {
      /* istanbul ignore next */cov_1hm1ldlb0g.b[20][0]++;
      cov_1hm1ldlb0g.s[72]++;

      size += length.encodingLength(size);
    } else /* istanbul ignore next */{
      cov_1hm1ldlb0g.b[20][1]++;
    }

    cov_1hm1ldlb0g.s[73]++;
    return size;
  }
}

/**
 * Check if argument is an Array.
 * @param {*} items
 * @private
 */
function checkArray(items) {
  /* istanbul ignore next */cov_1hm1ldlb0g.f[5]++;
  cov_1hm1ldlb0g.s[74]++;

  if (!Array.isArray(items)) {
    /* istanbul ignore next */cov_1hm1ldlb0g.b[22][0]++;
    cov_1hm1ldlb0g.s[75]++;

    throw new TypeError('Argument #1 should be an Array.');
  } else /* istanbul ignore next */{
    cov_1hm1ldlb0g.b[22][1]++;
  }
}

/**
 * Check if argument is a number.
 * @param {*} length
 * @private
 */
function checkArraySizeType(length) {
  /* istanbul ignore next */cov_1hm1ldlb0g.f[6]++;
  cov_1hm1ldlb0g.s[76]++;

  if (typeof length !== 'number') {
    /* istanbul ignore next */cov_1hm1ldlb0g.b[23][0]++;
    cov_1hm1ldlb0g.s[77]++;

    throw new TypeError('Length of an array should be a number.');
  } else /* istanbul ignore next */{
    cov_1hm1ldlb0g.b[23][1]++;
  }
}

/**
 * Check the number of items in an Array.
 * @param {number} requiredSize
 * @param {number} havingSize
 * @private
 */
function checkArraySize(requiredSize, havingSize) {
  /* istanbul ignore next */cov_1hm1ldlb0g.f[7]++;
  cov_1hm1ldlb0g.s[78]++;

  if (requiredSize !== havingSize) {
    /* istanbul ignore next */cov_1hm1ldlb0g.b[24][0]++;
    cov_1hm1ldlb0g.s[79]++;

    throw new Error(`Argument #1 required length ${requiredSize} instead of ${havingSize}`);
  } else /* istanbul ignore next */{
    cov_1hm1ldlb0g.b[24][1]++;
  }
}

/**
 * Decode items of an array when length is the number of bytes.
 * @param {Object} type Type of each array's item - user schema builtin type.
 * @param {number} lengthBytes
 * @param {DecodeStream} rstream
 * @param {Metadata} context
 * @returns {any[]}
 * @private
 */
function decodeBytes(type, lengthBytes, rstream, context) {
  /* istanbul ignore next */cov_1hm1ldlb0g.f[8]++;

  const items = /* istanbul ignore next */(cov_1hm1ldlb0g.s[80]++, []);
  const before = /* istanbul ignore next */(cov_1hm1ldlb0g.s[81]++, context.bytes);
  let bytes = /* istanbul ignore next */(cov_1hm1ldlb0g.s[82]++, 0);

  /* istanbul ignore next */cov_1hm1ldlb0g.s[83]++;
  while (bytes < lengthBytes) {
    /* istanbul ignore next */cov_1hm1ldlb0g.s[84]++;

    items.push(decodeCommon(rstream, type, context));
    /* istanbul ignore next */cov_1hm1ldlb0g.s[85]++;
    bytes = context.bytes - before;
  }

  /* istanbul ignore next */cov_1hm1ldlb0g.s[86]++;
  if (bytes > lengthBytes) {
    /* istanbul ignore next */cov_1hm1ldlb0g.b[25][0]++;
    cov_1hm1ldlb0g.s[87]++;

    throw new Error('Incorrect length of an array.');
  } else /* istanbul ignore next */{
    cov_1hm1ldlb0g.b[25][1]++;
  }

  cov_1hm1ldlb0g.s[88]++;
  return items;
}

/**
 * Decode items of an array when length is the number of items.
 * @param {Object} type Type of each array's item - user schema builtin type.
 * @param {number} length
 * @param {DecodeStream} rstream
 * @param {Metadata} context
 * @returns {any[]}
 * @private
 */
function decodeCount(type, length, rstream, context) {
  /* istanbul ignore next */cov_1hm1ldlb0g.f[9]++;

  const items = /* istanbul ignore next */(cov_1hm1ldlb0g.s[89]++, new Array(length));

  /* istanbul ignore next */cov_1hm1ldlb0g.s[90]++;
  for (let i = 0; i < length; i += 1) {
    /* istanbul ignore next */cov_1hm1ldlb0g.s[91]++;

    items[i] = decodeCommon(rstream, type, context);
  }

  /* istanbul ignore next */cov_1hm1ldlb0g.s[92]++;
  return items;
}