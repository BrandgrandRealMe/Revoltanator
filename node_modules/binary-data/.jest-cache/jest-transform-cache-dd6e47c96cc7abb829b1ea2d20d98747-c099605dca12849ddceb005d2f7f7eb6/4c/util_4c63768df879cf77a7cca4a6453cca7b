2b86b855cccc9de4acb7e311b828c6df
'use strict';

/* istanbul ignore next */var cov_265q01h0yp = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/util.js',
      hash = 'e58060fb9f92366b10eff9955aba5777d5ca9031',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/lib/util.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 22
        },
        end: {
          line: 3,
          column: 48
        }
      },
      '1': {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 11,
          column: 2
        }
      },
      '2': {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 19,
          column: 78
        }
      },
      '3': {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 37
        }
      },
      '4': {
        start: {
          line: 37,
          column: 2
        },
        end: {
          line: 37,
          column: 53
        }
      },
      '5': {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 46,
          column: 51
        }
      },
      '6': {
        start: {
          line: 55,
          column: 2
        },
        end: {
          line: 55,
          column: 51
        }
      }
    },
    fnMap: {
      '0': {
        name: 'isType',
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 15
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 1
          }
        },
        line: 18
      },
      '1': {
        name: 'isFunction',
        decl: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 27,
            column: 19
          }
        },
        loc: {
          start: {
            line: 27,
            column: 27
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 27
      },
      '2': {
        name: 'isObject',
        decl: {
          start: {
            line: 36,
            column: 9
          },
          end: {
            line: 36,
            column: 17
          }
        },
        loc: {
          start: {
            line: 36,
            column: 25
          },
          end: {
            line: 38,
            column: 1
          }
        },
        line: 36
      },
      '3': {
        name: 'isDecodeType',
        decl: {
          start: {
            line: 45,
            column: 9
          },
          end: {
            line: 45,
            column: 21
          }
        },
        loc: {
          start: {
            line: 45,
            column: 28
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 45
      },
      '4': {
        name: 'isEncodeType',
        decl: {
          start: {
            line: 54,
            column: 9
          },
          end: {
            line: 54,
            column: 21
          }
        },
        loc: {
          start: {
            line: 54,
            column: 28
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 54
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 77
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 19,
            column: 9
          },
          end: {
            line: 19,
            column: 23
          }
        }, {
          start: {
            line: 19,
            column: 27
          },
          end: {
            line: 19,
            column: 50
          }
        }, {
          start: {
            line: 19,
            column: 54
          },
          end: {
            line: 19,
            column: 77
          }
        }],
        line: 19
      },
      '1': {
        loc: {
          start: {
            line: 37,
            column: 9
          },
          end: {
            line: 37,
            column: 52
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 37,
            column: 9
          },
          end: {
            line: 37,
            column: 34
          }
        }, {
          start: {
            line: 37,
            column: 38
          },
          end: {
            line: 37,
            column: 52
          }
        }],
        line: 37
      },
      '2': {
        loc: {
          start: {
            line: 46,
            column: 9
          },
          end: {
            line: 46,
            column: 50
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 46,
            column: 9
          },
          end: {
            line: 46,
            column: 23
          }
        }, {
          start: {
            line: 46,
            column: 27
          },
          end: {
            line: 46,
            column: 50
          }
        }],
        line: 46
      },
      '3': {
        loc: {
          start: {
            line: 55,
            column: 9
          },
          end: {
            line: 55,
            column: 50
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 55,
            column: 9
          },
          end: {
            line: 55,
            column: 23
          }
        }, {
          start: {
            line: 55,
            column: 27
          },
          end: {
            line: 55,
            column: 50
          }
        }],
        line: 55
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0
    },
    b: {
      '0': [0, 0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const isPlainObject = /* istanbul ignore next */(cov_265q01h0yp.s[0]++, require('is-plain-object'));

/* istanbul ignore next */cov_265q01h0yp.s[1]++;
module.exports = {
  isType,
  isUserType: isPlainObject,
  isFunction,
  isDecodeType,
  isEncodeType
};

/**
 * Check if argument is data type.
 * @param {*} type
 * @returns {bool}
 */
function isType(type) {
  /* istanbul ignore next */cov_265q01h0yp.f[0]++;
  cov_265q01h0yp.s[2]++;

  return (/* istanbul ignore next */(cov_265q01h0yp.b[0][0]++, isObject(type)) && /* istanbul ignore next */(cov_265q01h0yp.b[0][1]++, isFunction(type.encode)) && /* istanbul ignore next */(cov_265q01h0yp.b[0][2]++, isFunction(type.decode))
  );
}

/**
 * Check if argument is function.
 * @param {*} value
 * @returns {bool}
 */
function isFunction(value) {
  /* istanbul ignore next */cov_265q01h0yp.f[1]++;
  cov_265q01h0yp.s[3]++;

  return typeof value === 'function';
}

/**
 * Check if argument is object.
 * @param {*} value
 * @returns {bool}
 */
function isObject(value) {
  /* istanbul ignore next */cov_265q01h0yp.f[2]++;
  cov_265q01h0yp.s[4]++;

  return (/* istanbul ignore next */(cov_265q01h0yp.b[1][0]++, typeof value === 'object') && /* istanbul ignore next */(cov_265q01h0yp.b[1][1]++, value !== null)
  );
}

/**
 * Check if argument is data type and able to decode data.
 * @param {*} type
 * @returns {bool}
 */
function isDecodeType(type) {
  /* istanbul ignore next */cov_265q01h0yp.f[3]++;
  cov_265q01h0yp.s[5]++;

  return (/* istanbul ignore next */(cov_265q01h0yp.b[2][0]++, isObject(type)) && /* istanbul ignore next */(cov_265q01h0yp.b[2][1]++, isFunction(type.decode))
  );
}

/**
 * Check if argument is data type and able to encode data.
 * @param {*} type
 * @returns {bool}
 */
function isEncodeType(type) {
  /* istanbul ignore next */cov_265q01h0yp.f[4]++;
  cov_265q01h0yp.s[6]++;

  return (/* istanbul ignore next */(cov_265q01h0yp.b[3][0]++, isObject(type)) && /* istanbul ignore next */(cov_265q01h0yp.b[3][1]++, isFunction(type.encode))
  );
}