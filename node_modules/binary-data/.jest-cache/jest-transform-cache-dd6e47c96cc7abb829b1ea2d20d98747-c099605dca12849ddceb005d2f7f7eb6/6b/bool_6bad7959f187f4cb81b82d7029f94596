48335162c529c23812a0a72fe6c21269
'use strict';

/* istanbul ignore next */var cov_2ary22kg9g = function () {
  var path = '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/bool.js',
      hash = '0f65b55c711e0b818d95cc7758a732e6aa3faee9',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/dtsvet/develop/projects/binary-data/src/node_modules/types/bool.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 19
        },
        end: {
          line: 3,
          column: 38
        }
      },
      '1': {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 22
        }
      },
      '2': {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 15,
          column: 3
        }
      },
      '3': {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 61
        }
      },
      '4': {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 24
        }
      },
      '5': {
        start: {
          line: 26,
          column: 18
        },
        end: {
          line: 26,
          column: 52
        }
      },
      '6': {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 37
        }
      },
      '7': {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 26
        }
      },
      '8': {
        start: {
          line: 39,
          column: 20
        },
        end: {
          line: 39,
          column: 24
        }
      },
      '9': {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 54
        }
      },
      '10': {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 37
        }
      },
      '11': {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 49,
          column: 4
        }
      }
    },
    fnMap: {
      '0': {
        name: 'bool',
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 13
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 12
      },
      '1': {
        name: 'decode',
        decl: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 17
          }
        },
        loc: {
          start: {
            line: 22,
            column: 27
          },
          end: {
            line: 30,
            column: 3
          }
        },
        line: 22
      },
      '2': {
        name: 'encode',
        decl: {
          start: {
            line: 37,
            column: 11
          },
          end: {
            line: 37,
            column: 17
          }
        },
        loc: {
          start: {
            line: 37,
            column: 34
          },
          end: {
            line: 43,
            column: 3
          }
        },
        line: 37
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        }, {
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        }],
        line: 13
      },
      '1': {
        loc: {
          start: {
            line: 41,
            column: 30
          },
          end: {
            line: 41,
            column: 43
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 41,
            column: 38
          },
          end: {
            line: 41,
            column: 39
          }
        }, {
          start: {
            line: 41,
            column: 42
          },
          end: {
            line: 41,
            column: 43
          }
        }],
        line: 41
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

const { isType } = /* istanbul ignore next */(cov_2ary22kg9g.s[0]++, require('lib/util'));

/* istanbul ignore next */cov_2ary22kg9g.s[1]++;
module.exports = bool;

/**
 * Boolean type.
 * @param {Object} type Any builtin type or schema.
 * @returns {Object}
 */
function bool(type) {
  /* istanbul ignore next */cov_2ary22kg9g.f[0]++;
  cov_2ary22kg9g.s[2]++;

  if (!isType(type)) {
    /* istanbul ignore next */cov_2ary22kg9g.b[0][0]++;
    cov_2ary22kg9g.s[3]++;

    throw new TypeError('Argument #1 should be valid type.');
  } else /* istanbul ignore next */{
    cov_2ary22kg9g.b[0][1]++;
  }

  /**
   * Decode element as boolean.
   * @param {DecodeStream} rstream
   * @returns {bool}
   */
  function decode(rstream) {
    /* istanbul ignore next */cov_2ary22kg9g.f[1]++;

    // eslint-disable-next-line no-invalid-this
    const context = /* istanbul ignore next */(cov_2ary22kg9g.s[4]++, this);

    const value = /* istanbul ignore next */(cov_2ary22kg9g.s[5]++, type.decode.call(context, rstream));
    /* istanbul ignore next */cov_2ary22kg9g.s[6]++;
    decode.bytes = type.decode.bytes;

    /* istanbul ignore next */cov_2ary22kg9g.s[7]++;
    return Boolean(value);
  }

  /**
   * Encode boolean item.
   * @param {bool} value
   * @param {EncodeStream} wstream
   */
  function encode(value, wstream) {
    /* istanbul ignore next */cov_2ary22kg9g.f[2]++;

    // eslint-disable-next-line no-invalid-this
    const context = /* istanbul ignore next */(cov_2ary22kg9g.s[8]++, this);

    /* istanbul ignore next */cov_2ary22kg9g.s[9]++;
    type.encode.call(context, value ? /* istanbul ignore next */(cov_2ary22kg9g.b[1][0]++, 1) : /* istanbul ignore next */(cov_2ary22kg9g.b[1][1]++, 0), wstream);
    /* istanbul ignore next */cov_2ary22kg9g.s[10]++;
    encode.bytes = type.encode.bytes;
  }

  /* istanbul ignore next */cov_2ary22kg9g.s[11]++;
  return {
    encode,
    decode,
    encodingLength: type.encodingLength
  };
}