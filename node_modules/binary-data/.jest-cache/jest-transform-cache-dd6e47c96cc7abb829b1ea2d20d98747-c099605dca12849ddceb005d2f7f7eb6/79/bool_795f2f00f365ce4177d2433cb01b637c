d7d54e426ccbb8f8926a4e806b59bca7
'use strict';

const bool = require('types/bool');

describe('bool', () => {
  test('encode positive', () => {
    const wstream = {};
    const itemBytes = 5;

    const itemType = {
      decode() {},
      encode: jest.fn().mockImplementation(() => {
        itemType.encode.bytes = itemBytes;
      })
    };

    const type = bool(itemType);
    type.encode(true, wstream);

    expect(itemType.encode).toHaveBeenCalledTimes(1);
    expect(itemType.encode).toBeCalledWith(1, wstream);
    expect(type.encode.bytes).toBe(itemBytes);
  });

  test('encode negative', () => {
    const wstream = {};
    const itemBytes = 5;

    const itemType = {
      decode() {},
      encode: jest.fn().mockImplementation(() => {
        itemType.encode.bytes = itemBytes;
      })
    };

    const type = bool(itemType);
    type.encode(false, wstream);

    expect(itemType.encode).toHaveBeenCalledTimes(1);
    expect(itemType.encode).toBeCalledWith(0, wstream);
    expect(type.encode.bytes).toBe(itemBytes);
  });

  test('decode positive', () => {
    const rstream = {};
    const itemBytes = 10;

    const itemType = {
      decode() {
        return 1;
      },
      encode() {}
    };

    itemType.decode.bytes = itemBytes;

    const type = bool(itemType);
    const result = type.decode(rstream);

    expect(result).toBe(true);
    expect(type.decode.bytes).toBe(itemBytes);
  });

  test('decode negative', () => {
    const rstream = {};
    const itemBytes = 10;

    const itemType = {
      decode() {
        return 0;
      },
      encode() {}
    };

    itemType.decode.bytes = itemBytes;

    const meta = {
      bytes: 0
    };

    const type = bool(itemType);
    const result = type.decode(rstream, meta);

    expect(result).toBe(false);
    expect(type.decode.bytes).toBe(itemBytes);
  });

  test('encodingLength', () => {
    const expectedLength = 4;
    const value = true;

    const itemType = {
      encode() {},
      decode() {},
      encodingLength() {
        return expectedLength;
      }
    };

    const type = bool(itemType);
    expect(type.encodingLength(value)).toBe(expectedLength);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvb2wuanMiXSwibmFtZXMiOlsiYm9vbCIsInJlcXVpcmUiLCJkZXNjcmliZSIsInRlc3QiLCJ3c3RyZWFtIiwiaXRlbUJ5dGVzIiwiaXRlbVR5cGUiLCJkZWNvZGUiLCJlbmNvZGUiLCJqZXN0IiwiZm4iLCJtb2NrSW1wbGVtZW50YXRpb24iLCJieXRlcyIsInR5cGUiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0JlQ2FsbGVkV2l0aCIsInRvQmUiLCJyc3RyZWFtIiwicmVzdWx0IiwibWV0YSIsImV4cGVjdGVkTGVuZ3RoIiwidmFsdWUiLCJlbmNvZGluZ0xlbmd0aCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsT0FBT0MsUUFBUSxZQUFSLENBQWI7O0FBRUFDLFNBQVMsTUFBVCxFQUFpQixNQUFNO0FBQ3JCQyxPQUFLLGlCQUFMLEVBQXdCLE1BQU07QUFDNUIsVUFBTUMsVUFBVSxFQUFoQjtBQUNBLFVBQU1DLFlBQVksQ0FBbEI7O0FBRUEsVUFBTUMsV0FBVztBQUNmQyxlQUFTLENBQUUsQ0FESTtBQUVmQyxjQUFRQyxLQUFLQyxFQUFMLEdBQVVDLGtCQUFWLENBQTZCLE1BQU07QUFDekNMLGlCQUFTRSxNQUFULENBQWdCSSxLQUFoQixHQUF3QlAsU0FBeEI7QUFDRCxPQUZPO0FBRk8sS0FBakI7O0FBT0EsVUFBTVEsT0FBT2IsS0FBS00sUUFBTCxDQUFiO0FBQ0FPLFNBQUtMLE1BQUwsQ0FBWSxJQUFaLEVBQWtCSixPQUFsQjs7QUFFQVUsV0FBT1IsU0FBU0UsTUFBaEIsRUFBd0JPLHFCQUF4QixDQUE4QyxDQUE5QztBQUNBRCxXQUFPUixTQUFTRSxNQUFoQixFQUF3QlEsY0FBeEIsQ0FBdUMsQ0FBdkMsRUFBMENaLE9BQTFDO0FBQ0FVLFdBQU9ELEtBQUtMLE1BQUwsQ0FBWUksS0FBbkIsRUFBMEJLLElBQTFCLENBQStCWixTQUEvQjtBQUNELEdBakJEOztBQW1CQUYsT0FBSyxpQkFBTCxFQUF3QixNQUFNO0FBQzVCLFVBQU1DLFVBQVUsRUFBaEI7QUFDQSxVQUFNQyxZQUFZLENBQWxCOztBQUVBLFVBQU1DLFdBQVc7QUFDZkMsZUFBUyxDQUFFLENBREk7QUFFZkMsY0FBUUMsS0FBS0MsRUFBTCxHQUFVQyxrQkFBVixDQUE2QixNQUFNO0FBQ3pDTCxpQkFBU0UsTUFBVCxDQUFnQkksS0FBaEIsR0FBd0JQLFNBQXhCO0FBQ0QsT0FGTztBQUZPLEtBQWpCOztBQU9BLFVBQU1RLE9BQU9iLEtBQUtNLFFBQUwsQ0FBYjtBQUNBTyxTQUFLTCxNQUFMLENBQVksS0FBWixFQUFtQkosT0FBbkI7O0FBRUFVLFdBQU9SLFNBQVNFLE1BQWhCLEVBQXdCTyxxQkFBeEIsQ0FBOEMsQ0FBOUM7QUFDQUQsV0FBT1IsU0FBU0UsTUFBaEIsRUFBd0JRLGNBQXhCLENBQXVDLENBQXZDLEVBQTBDWixPQUExQztBQUNBVSxXQUFPRCxLQUFLTCxNQUFMLENBQVlJLEtBQW5CLEVBQTBCSyxJQUExQixDQUErQlosU0FBL0I7QUFDRCxHQWpCRDs7QUFtQkFGLE9BQUssaUJBQUwsRUFBd0IsTUFBTTtBQUM1QixVQUFNZSxVQUFVLEVBQWhCO0FBQ0EsVUFBTWIsWUFBWSxFQUFsQjs7QUFFQSxVQUFNQyxXQUFXO0FBQ2ZDLGVBQVM7QUFDUCxlQUFPLENBQVA7QUFDRCxPQUhjO0FBSWZDLGVBQVMsQ0FBRTtBQUpJLEtBQWpCOztBQU9BRixhQUFTQyxNQUFULENBQWdCSyxLQUFoQixHQUF3QlAsU0FBeEI7O0FBRUEsVUFBTVEsT0FBT2IsS0FBS00sUUFBTCxDQUFiO0FBQ0EsVUFBTWEsU0FBU04sS0FBS04sTUFBTCxDQUFZVyxPQUFaLENBQWY7O0FBRUFKLFdBQU9LLE1BQVAsRUFBZUYsSUFBZixDQUFvQixJQUFwQjtBQUNBSCxXQUFPRCxLQUFLTixNQUFMLENBQVlLLEtBQW5CLEVBQTBCSyxJQUExQixDQUErQlosU0FBL0I7QUFDRCxHQWxCRDs7QUFvQkFGLE9BQUssaUJBQUwsRUFBd0IsTUFBTTtBQUM1QixVQUFNZSxVQUFVLEVBQWhCO0FBQ0EsVUFBTWIsWUFBWSxFQUFsQjs7QUFFQSxVQUFNQyxXQUFXO0FBQ2ZDLGVBQVM7QUFDUCxlQUFPLENBQVA7QUFDRCxPQUhjO0FBSWZDLGVBQVMsQ0FBRTtBQUpJLEtBQWpCOztBQU9BRixhQUFTQyxNQUFULENBQWdCSyxLQUFoQixHQUF3QlAsU0FBeEI7O0FBRUEsVUFBTWUsT0FBTztBQUNYUixhQUFPO0FBREksS0FBYjs7QUFJQSxVQUFNQyxPQUFPYixLQUFLTSxRQUFMLENBQWI7QUFDQSxVQUFNYSxTQUFTTixLQUFLTixNQUFMLENBQVlXLE9BQVosRUFBcUJFLElBQXJCLENBQWY7O0FBRUFOLFdBQU9LLE1BQVAsRUFBZUYsSUFBZixDQUFvQixLQUFwQjtBQUNBSCxXQUFPRCxLQUFLTixNQUFMLENBQVlLLEtBQW5CLEVBQTBCSyxJQUExQixDQUErQlosU0FBL0I7QUFDRCxHQXRCRDs7QUF3QkFGLE9BQUssZ0JBQUwsRUFBdUIsTUFBTTtBQUMzQixVQUFNa0IsaUJBQWlCLENBQXZCO0FBQ0EsVUFBTUMsUUFBUSxJQUFkOztBQUVBLFVBQU1oQixXQUFXO0FBQ2ZFLGVBQVMsQ0FBRSxDQURJO0FBRWZELGVBQVMsQ0FBRSxDQUZJO0FBR2ZnQix1QkFBaUI7QUFDZixlQUFPRixjQUFQO0FBQ0Q7QUFMYyxLQUFqQjs7QUFRQSxVQUFNUixPQUFPYixLQUFLTSxRQUFMLENBQWI7QUFDQVEsV0FBT0QsS0FBS1UsY0FBTCxDQUFvQkQsS0FBcEIsQ0FBUCxFQUFtQ0wsSUFBbkMsQ0FBd0NJLGNBQXhDO0FBQ0QsR0FkRDtBQWVELENBbEdEIiwiZmlsZSI6ImJvb2wuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGJvb2wgPSByZXF1aXJlKCd0eXBlcy9ib29sJyk7XG5cbmRlc2NyaWJlKCdib29sJywgKCkgPT4ge1xuICB0ZXN0KCdlbmNvZGUgcG9zaXRpdmUnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3N0cmVhbSA9IHt9O1xuICAgIGNvbnN0IGl0ZW1CeXRlcyA9IDU7XG5cbiAgICBjb25zdCBpdGVtVHlwZSA9IHtcbiAgICAgIGRlY29kZSgpIHt9LFxuICAgICAgZW5jb2RlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgaXRlbVR5cGUuZW5jb2RlLmJ5dGVzID0gaXRlbUJ5dGVzO1xuICAgICAgfSksXG4gICAgfTtcblxuICAgIGNvbnN0IHR5cGUgPSBib29sKGl0ZW1UeXBlKTtcbiAgICB0eXBlLmVuY29kZSh0cnVlLCB3c3RyZWFtKTtcblxuICAgIGV4cGVjdChpdGVtVHlwZS5lbmNvZGUpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QoaXRlbVR5cGUuZW5jb2RlKS50b0JlQ2FsbGVkV2l0aCgxLCB3c3RyZWFtKTtcbiAgICBleHBlY3QodHlwZS5lbmNvZGUuYnl0ZXMpLnRvQmUoaXRlbUJ5dGVzKTtcbiAgfSk7XG5cbiAgdGVzdCgnZW5jb2RlIG5lZ2F0aXZlJywgKCkgPT4ge1xuICAgIGNvbnN0IHdzdHJlYW0gPSB7fTtcbiAgICBjb25zdCBpdGVtQnl0ZXMgPSA1O1xuXG4gICAgY29uc3QgaXRlbVR5cGUgPSB7XG4gICAgICBkZWNvZGUoKSB7fSxcbiAgICAgIGVuY29kZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIGl0ZW1UeXBlLmVuY29kZS5ieXRlcyA9IGl0ZW1CeXRlcztcbiAgICAgIH0pLFxuICAgIH07XG5cbiAgICBjb25zdCB0eXBlID0gYm9vbChpdGVtVHlwZSk7XG4gICAgdHlwZS5lbmNvZGUoZmFsc2UsIHdzdHJlYW0pO1xuXG4gICAgZXhwZWN0KGl0ZW1UeXBlLmVuY29kZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChpdGVtVHlwZS5lbmNvZGUpLnRvQmVDYWxsZWRXaXRoKDAsIHdzdHJlYW0pO1xuICAgIGV4cGVjdCh0eXBlLmVuY29kZS5ieXRlcykudG9CZShpdGVtQnl0ZXMpO1xuICB9KTtcblxuICB0ZXN0KCdkZWNvZGUgcG9zaXRpdmUnLCAoKSA9PiB7XG4gICAgY29uc3QgcnN0cmVhbSA9IHt9O1xuICAgIGNvbnN0IGl0ZW1CeXRlcyA9IDEwO1xuXG4gICAgY29uc3QgaXRlbVR5cGUgPSB7XG4gICAgICBkZWNvZGUoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSxcbiAgICAgIGVuY29kZSgpIHt9LFxuICAgIH07XG5cbiAgICBpdGVtVHlwZS5kZWNvZGUuYnl0ZXMgPSBpdGVtQnl0ZXM7XG5cbiAgICBjb25zdCB0eXBlID0gYm9vbChpdGVtVHlwZSk7XG4gICAgY29uc3QgcmVzdWx0ID0gdHlwZS5kZWNvZGUocnN0cmVhbSk7XG5cbiAgICBleHBlY3QocmVzdWx0KS50b0JlKHRydWUpO1xuICAgIGV4cGVjdCh0eXBlLmRlY29kZS5ieXRlcykudG9CZShpdGVtQnl0ZXMpO1xuICB9KTtcblxuICB0ZXN0KCdkZWNvZGUgbmVnYXRpdmUnLCAoKSA9PiB7XG4gICAgY29uc3QgcnN0cmVhbSA9IHt9O1xuICAgIGNvbnN0IGl0ZW1CeXRlcyA9IDEwO1xuXG4gICAgY29uc3QgaXRlbVR5cGUgPSB7XG4gICAgICBkZWNvZGUoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSxcbiAgICAgIGVuY29kZSgpIHt9LFxuICAgIH07XG5cbiAgICBpdGVtVHlwZS5kZWNvZGUuYnl0ZXMgPSBpdGVtQnl0ZXM7XG5cbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgYnl0ZXM6IDAsXG4gICAgfTtcblxuICAgIGNvbnN0IHR5cGUgPSBib29sKGl0ZW1UeXBlKTtcbiAgICBjb25zdCByZXN1bHQgPSB0eXBlLmRlY29kZShyc3RyZWFtLCBtZXRhKTtcblxuICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZmFsc2UpO1xuICAgIGV4cGVjdCh0eXBlLmRlY29kZS5ieXRlcykudG9CZShpdGVtQnl0ZXMpO1xuICB9KTtcblxuICB0ZXN0KCdlbmNvZGluZ0xlbmd0aCcsICgpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZExlbmd0aCA9IDQ7XG4gICAgY29uc3QgdmFsdWUgPSB0cnVlO1xuXG4gICAgY29uc3QgaXRlbVR5cGUgPSB7XG4gICAgICBlbmNvZGUoKSB7fSxcbiAgICAgIGRlY29kZSgpIHt9LFxuICAgICAgZW5jb2RpbmdMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiBleHBlY3RlZExlbmd0aDtcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IHR5cGUgPSBib29sKGl0ZW1UeXBlKTtcbiAgICBleHBlY3QodHlwZS5lbmNvZGluZ0xlbmd0aCh2YWx1ZSkpLnRvQmUoZXhwZWN0ZWRMZW5ndGgpO1xuICB9KTtcbn0pO1xuIl19