"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPostById = exports.getImage = exports.getPost = void 0;
const utils_1 = require("./utils");
/**
 * Returns the random post from specified subreddit
 * @param subreddit - subreddit name (without `r/` part)
 */
const getPost = async (subreddit) => {
    var _a, _b, _c;
    const pickedSub = Array.isArray(subreddit) ? utils_1.getRandomItemFrom(subreddit) : subreddit;
    const response = await utils_1.makeRequest(`r/${pickedSub}.json?limit=50`);
    utils_1.logger.debug('HTTP response', response);
    const children = Array.isArray(response) ? (_b = (_a = utils_1.getRandomItemFrom(response)) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.children : (_c = response === null || response === void 0 ? void 0 : response.data) === null || _c === void 0 ? void 0 : _c.children;
    const child = Array.isArray(children) ? utils_1.getRandomItemFrom(children) : children;
    return child.data;
};
exports.getPost = getPost;
/**
 * Returns the image from random post from specified subreddit.
 * If the post doesn't have the image - repeats the request until it contains the image
 * @param subreddit - subreddit name (without `r/` part)
 */
const getImage = async (subreddit, retryLimit = 10) => {
    var _a;
    let retries = 0;
    let post = await exports.getPost(subreddit);
    if (post === null) {
        throw new Error(`Specified subreddit r/${subreddit} doesn't exist!`);
    }
    while (retries < retryLimit) {
        const hasImageURL = /(jpe?g|png|gif)/.test((_a = post === null || post === void 0 ? void 0 : post.url) !== null && _a !== void 0 ? _a : '');
        if (hasImageURL) {
            utils_1.logger.debug('Got an image', post === null || post === void 0 ? void 0 : post.url);
            break;
        }
        retries += 1;
        if (retries === retryLimit) {
            return '';
        }
        // Loop is required here because this method is supposed to returns something that is not `undefined`
        // eslint-disable-next-line no-await-in-loop
        post = await exports.getPost(subreddit);
        utils_1.logger.warn('No image URL found! Repeating the process...');
    }
    if (post === null || post === void 0 ? void 0 : post.is_gallery) {
        return utils_1.getRandomImageFromGallery(post);
    }
    // here can be imgur `.gifv` links sometimes, they have to be replaced w/ `gif` ones
    return post === null || post === void 0 ? void 0 : post.url.replace('gifv', 'gif');
};
exports.getImage = getImage;
/**
 * Returns a specific post with given ID from specified subreddit
 * @param subreddit - subreddit name
 * @param id - id (ID36) of the post
 */
const getPostById = async (id, subreddit) => {
    var _a, _b;
    const response = await utils_1.makeRequest(`/r/${subreddit}/comments/${id}.json`);
    return (_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.children[0].data) !== null && _b !== void 0 ? _b : null;
};
exports.getPostById = getPostById;
//# sourceMappingURL=functions.js.map