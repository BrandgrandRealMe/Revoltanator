"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.getRandomImageFromGallery = exports.getRandomItemFrom = exports.makeRequest = void 0;
const consola_1 = __importStar(require("consola"));
const node_fetch_1 = __importDefault(require("node-fetch"));
/**
 * Makes a GET-request to a specific endpoint of Reddit
 * @param endpoint - the endpoint to fetch
 */
const makeRequest = async (endpoint) => {
    const url = `https://reddit.com/${endpoint}`;
    exports.logger.debug(`HTTP GET ${url}`);
    const response = await node_fetch_1.default(url, {
        method: 'GET',
        headers: {
            'Sec-GPC': '1',
            'Upgrade-Insecure-Requests': '1',
            'User-Agent': 'mamoruuu/random-reddit'
        }
    });
    const body = await response.json();
    exports.logger.debug(`Success ${endpoint}`);
    // Here we pick the first one because it contains the posts list
    // `body[1]` contains comments to the post
    return (Array.isArray(body) ? body[0] : body);
};
exports.makeRequest = makeRequest;
/**
 * Returns the random item from given array
 * @param arr - the array of something
 */
function getRandomItemFrom(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
exports.getRandomItemFrom = getRandomItemFrom;
/**
 * Returns an image from given post's gallery
 * @param post - reddit post
 */
const getRandomImageFromGallery = (post) => {
    const validPosts = Object.values(post.media_metadata).filter((image) => image.status === 'valid');
    const item = getRandomItemFrom(validPosts);
    return item.s.u.replace(/&amp;/g, '&');
};
exports.getRandomImageFromGallery = getRandomImageFromGallery;
const getLogLevel = () => {
    let level = Number(process.env.RANDOM_REDDIT_LOG_LEVEL);
    if (Number.isNaN(level)) {
        level = Number(process.env.CONSOLA_LEVEL);
    }
    return Number.isNaN(level) ? consola_1.LogLevel.Error : level;
};
exports.logger = consola_1.default.create({
    level: getLogLevel(),
});
//# sourceMappingURL=utils.js.map