"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFaceAsBase64 = exports.getSkinAsBase64 = void 0;
const axios_1 = __importDefault(require("axios"));
const sharp_1 = __importDefault(require("sharp"));
/**
 * Uses the Mojang-API to retrieve a players skin based on the players uuid and returns the skin as a base64 encoded string.
 * @param uuid the uuid of the player
 * @return the skin of the player encoded as a base64-string.
 */
function getSkinAsBase64(uuid) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios_1.default.get("https://sessionserver.mojang.com/session/minecraft/profile/" + uuid);
        // Fetch profile.
        const data = response.data;
        // Define error prefix.
        const errorMessage = "Couldn't retrieve skin for uuid " + uuid + ". Reason: ";
        if (data.error) {
            throw new Error(errorMessage + data.error + ": " + JSON.stringify(data));
        }
        if (!data.properties) {
            throw new Error(errorMessage + "No properties in response: " + JSON.stringify(data));
        }
        // Loop through properties and find 'textures' property.
        for (const property of data.properties) {
            if (property.name === "textures") {
                // Find object containing the skin URL.
                const response = JSON.parse(Buffer.from(property.value, "base64").toString());
                let skinURL;
                // Check if skin URL exists and retrieve it.
                if (response.textures &&
                    response.textures.SKIN &&
                    (skinURL = response.textures.SKIN.url)) {
                    // Fetch skin URL and returns as base64.
                    const b64 = yield axios_1.default
                        .get(skinURL, { responseType: "arraybuffer" })
                        .then((response) => response.data)
                        .then((buffer) => {
                        return Buffer.from(buffer).toString("base64");
                    })
                        .catch((error) => console.error(errorMessage + "Could not load buffer for URL " + skinURL, error));
                    if (b64)
                        return b64;
                    else
                        throw new Error(errorMessage + "No skin returned for URL " + skinURL);
                }
                else
                    throw new Error(errorMessage +
                        "No url to skin in response: " +
                        JSON.stringify(response));
            }
        }
        throw new Error(errorMessage + "No textures object in response: " + JSON.stringify(data));
    });
}
exports.getSkinAsBase64 = getSkinAsBase64;
/**
 * Uses the Mojang-API to retrieve a players skin based on the players uuid and returns the extracted face as a base64 encoded string.
 * @param uuid the uuid of the player
 * @return the face of the player encoded as a base64-string.
 */
function getFaceAsBase64(uuid) {
    return __awaiter(this, void 0, void 0, function* () {
        const skin = yield getSkinAsBase64(uuid);
        const buffer = Buffer.from(skin, "base64");
        const sharpSkin = (0, sharp_1.default)(buffer);
        const sharpHead = sharpSkin.extract({ left: 8, top: 8, width: 8, height: 8 });
        return sharpHead
            .toBuffer()
            .then((data) => {
            return data.toString("base64");
        })
            .catch((error) => {
            throw new Error("Couldn't extract head of skin for uuid " + uuid + ". Reason: " + error);
        });
    });
}
exports.getFaceAsBase64 = getFaceAsBase64;
//# sourceMappingURL=index.js.map