{"version":3,"file":"socket.js","sourceRoot":"","sources":["../../../../dtls/src/socket.ts"],"names":[],"mappings":"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","sourcesContent":["import { decode, types } from \"binary-data\";\nimport debug from \"debug\";\nimport { Event } from \"rx.mini\";\nimport { setTimeout } from \"timers/promises\";\n\nimport {\n  HashAlgorithm,\n  NamedCurveAlgorithm,\n  SignatureAlgorithm,\n  SignatureHash,\n} from \"./cipher/const\";\nimport { exportKeyingMaterial } from \"./cipher/prf\";\nimport { SessionType, SessionTypes } from \"./cipher/suites/abstract\";\nimport { CipherContext } from \"./context/cipher\";\nimport { DtlsContext } from \"./context/dtls\";\nimport { Profile, SrtpContext } from \"./context/srtp\";\nimport { TransportContext } from \"./context/transport\";\nimport { EllipticCurves } from \"./handshake/extensions/ellipticCurves\";\nimport { ExtendedMasterSecret } from \"./handshake/extensions/extendedMasterSecret\";\nimport { RenegotiationIndication } from \"./handshake/extensions/renegotiationIndication\";\nimport { Signature } from \"./handshake/extensions/signature\";\nimport { UseSRTP } from \"./handshake/extensions/useSrtp\";\nimport { dumpBuffer } from \"./helper\";\nimport { createPlaintext } from \"./record/builder\";\nimport { ContentType } from \"./record/const\";\nimport { FragmentedHandshake } from \"./record/message/fragment\";\nimport { parsePacket, parsePlainText } from \"./record/receive\";\nimport { Transport } from \"./transport\";\nimport { Extension } from \"./typings/domain\";\n\nconst log = debug(\"werift-dtls : packages/dtls/src/socket.ts : log\");\nconst err = debug(\"werift-dtls : packages/dtls/src/socket.ts : err\");\n\nexport class DtlsSocket {\n  readonly onConnect = new Event();\n  readonly onData = new Event<[Buffer]>();\n  readonly onError = new Event<[Error]>();\n  readonly onClose = new Event();\n  readonly transport: TransportContext = new TransportContext(\n    this.options.transport\n  );\n  readonly cipher: CipherContext = new CipherContext(\n    this.sessionType,\n    this.options.cert,\n    this.options.key,\n    this.options.signatureHash\n  );\n  readonly dtls: DtlsContext = new DtlsContext(this.options, this.sessionType);\n  readonly srtp: SrtpContext = new SrtpContext();\n\n  connected = false;\n  extensions: Extension[] = [];\n  onHandleHandshakes!: (assembled: FragmentedHandshake[]) => Promise<void>;\n\n  private bufferFragmentedHandshakes: FragmentedHandshake[] = [];\n\n  constructor(public options: Options, public sessionType: SessionTypes) {\n    this.setupExtensions();\n    this.transport.socket.onData = this.udpOnMessage;\n  }\n\n  private udpOnMessage = (data: Buffer) => {\n    const packets = parsePacket(data);\n\n    for (const packet of packets) {\n      try {\n        const message = parsePlainText(this.dtls, this.cipher)(packet);\n        switch (message.type) {\n          case ContentType.handshake:\n            {\n              const handshake = message.data as FragmentedHandshake;\n              const handshakes = this.handleFragmentHandshake([handshake]);\n              const assembled = Object.values(\n                handshakes.reduce(\n                  (acc: { [type: string]: FragmentedHandshake[] }, cur) => {\n                    if (!acc[cur.msg_type]) acc[cur.msg_type] = [];\n                    acc[cur.msg_type].push(cur);\n                    return acc;\n                  },\n                  {}\n                )\n              )\n                .map((v) => FragmentedHandshake.assemble(v))\n                .sort((a, b) => a.msg_type - b.msg_type);\n\n              this.onHandleHandshakes(assembled).catch((error) => {\n                err(this.dtls.sessionId, \"onHandleHandshakes error\", error);\n                this.onError.execute(error);\n              });\n            }\n            break;\n          case ContentType.applicationData:\n            {\n              this.onData.execute(message.data as Buffer);\n            }\n            break;\n          case ContentType.alert:\n            this.onClose.execute();\n            break;\n        }\n      } catch (error) {\n        err(\n          this.dtls.sessionId,\n          \"catch udpOnMessage error\",\n          error,\n          dumpBuffer(data)\n        );\n      }\n    }\n  };\n\n  private setupExtensions() {\n    {\n      log(\n        this.dtls.sessionId,\n        \"support srtpProfiles\",\n        this.options.srtpProfiles\n      );\n      if (this.options.srtpProfiles && this.options.srtpProfiles.length > 0) {\n        const useSrtp = UseSRTP.create(\n          this.options.srtpProfiles,\n          Buffer.from([0x00])\n        );\n        this.extensions.push(useSrtp.extension);\n      }\n    }\n\n    {\n      const curve = EllipticCurves.createEmpty();\n      curve.data = Object.values(NamedCurveAlgorithm);\n      this.extensions.push(curve.extension);\n    }\n\n    {\n      const signature = Signature.createEmpty();\n      // libwebrtc/OpenSSL require 4=1 , 4=3 signatureHash\n      signature.data = [\n        { hash: HashAlgorithm.sha256, signature: SignatureAlgorithm.rsa },\n        { hash: HashAlgorithm.sha256, signature: SignatureAlgorithm.ecdsa },\n      ];\n      this.extensions.push(signature.extension);\n    }\n\n    {\n      if (this.options.extendedMasterSecret) {\n        this.extensions.push({\n          type: ExtendedMasterSecret.type,\n          data: Buffer.alloc(0),\n        });\n      }\n    }\n\n    {\n      const renegotiationIndication = RenegotiationIndication.createEmpty();\n      this.extensions.push(renegotiationIndication.extension);\n    }\n  }\n\n  protected waitForReady = (condition: () => boolean) =>\n    new Promise<void>(async (r, f) => {\n      {\n        for (let i = 0; i < 10; i++) {\n          if (condition()) {\n            r();\n            break;\n          } else {\n            await setTimeout(100 * i);\n          }\n        }\n        f(\"waitForReady timeout\");\n      }\n    });\n\n  handleFragmentHandshake(messages: FragmentedHandshake[]) {\n    let handshakes = messages.filter((v) => {\n      // find fragmented\n      if (v.fragment_length !== v.length) {\n        this.bufferFragmentedHandshakes.push(v);\n        return false;\n      }\n      return true;\n    });\n\n    if (this.bufferFragmentedHandshakes.length > 1) {\n      const [last] = this.bufferFragmentedHandshakes.slice(-1);\n      if (last.fragment_offset + last.fragment_length === last.length) {\n        handshakes = [...this.bufferFragmentedHandshakes, ...handshakes];\n        this.bufferFragmentedHandshakes = [];\n      }\n    }\n    return handshakes; // return un fragmented handshakes\n  }\n\n  /**send application data */\n  send = async (buf: Buffer) => {\n    const pkt = createPlaintext(this.dtls)(\n      [{ type: ContentType.applicationData, fragment: buf }],\n      ++this.dtls.recordSequenceNumber\n    )[0];\n    await this.transport.send(this.cipher.encryptPacket(pkt).serialize());\n  };\n\n  close() {\n    this.transport.socket.close();\n  }\n\n  extractSessionKeys(keyLength: number, saltLength: number) {\n    const keyingMaterial = this.exportKeyingMaterial(\n      \"EXTRACTOR-dtls_srtp\",\n      keyLength * 2 + saltLength * 2\n    );\n\n    const { clientKey, serverKey, clientSalt, serverSalt } = decode(\n      keyingMaterial,\n      {\n        clientKey: types.buffer(keyLength),\n        serverKey: types.buffer(keyLength),\n        clientSalt: types.buffer(saltLength),\n        serverSalt: types.buffer(saltLength),\n      }\n    );\n\n    if (this.sessionType === SessionType.CLIENT) {\n      return {\n        localKey: clientKey,\n        localSalt: clientSalt,\n        remoteKey: serverKey,\n        remoteSalt: serverSalt,\n      };\n    } else {\n      return {\n        localKey: serverKey,\n        localSalt: serverSalt,\n        remoteKey: clientKey,\n        remoteSalt: clientSalt,\n      };\n    }\n  }\n\n  exportKeyingMaterial(label: string, length: number) {\n    return exportKeyingMaterial(\n      label,\n      length,\n      this.cipher.masterSecret,\n      this.cipher.localRandom.serialize(),\n      this.cipher.remoteRandom.serialize(),\n      this.sessionType === SessionType.CLIENT\n    );\n  }\n}\n\nexport interface Options {\n  transport: Transport;\n  srtpProfiles?: Profile[];\n  cert?: string;\n  key?: string;\n  signatureHash?: SignatureHash;\n  certificateRequest?: boolean;\n  extendedMasterSecret?: boolean;\n}\n"]}