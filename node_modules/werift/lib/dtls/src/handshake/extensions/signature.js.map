{"version":3,"file":"signature.js","sourceRoot":"","sources":["../../../../../../dtls/src/handshake/extensions/signature.ts"],"names":[],"mappings":";;;AAAA,6CAAoD;AAIpD,MAAa,SAAS;IAcpB,YAAY,QAA4B,EAAE;QAHnC,SAAI,GAAW,SAAS,CAAC,IAAI,CAAC;QAC9B,SAAI,GAA+D,EAAE,CAAC;QAG3E,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,WAAW;QAChB,MAAM,CAAC,GAAG,IAAI,SAAS,EAAE,CAAC;QAC1B,OAAO,CAAC,CAAC;IACX,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,OAAO,IAAI,SAAS,CAAC,oBAAM,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,SAAS;QACP,MAAM,GAAG,GAAG,oBAAM,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QACjD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,GAAW;QACzB,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACnC,OAAO,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,IAAI,SAAS;QACX,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;SAChC,CAAC;IACJ,CAAC;;AA3CH,8BA4CC;AA3CQ,cAAI,GAAG,EAAE,CAAC;AACD,cAAI,GAAG;IACrB,IAAI,EAAE,mBAAK,CAAC,QAAQ;IACpB,IAAI,EAAE,mBAAK,CAAC,KAAK,CACf,EAAE,IAAI,EAAE,mBAAK,CAAC,KAAK,EAAE,SAAS,EAAE,mBAAK,CAAC,KAAK,EAAE,EAC7C,mBAAK,CAAC,QAAQ,EACd,OAAO,CACR;CACF,CAAC","sourcesContent":["import { decode, encode, types } from \"binary-data\";\n\nimport { HashAlgorithms, SignatureAlgorithms } from \"../../cipher/const\";\n\nexport class Signature {\n  static type = 13;\n  static readonly spec = {\n    type: types.uint16be,\n    data: types.array(\n      { hash: types.uint8, signature: types.uint8 },\n      types.uint16be,\n      \"bytes\"\n    ),\n  };\n\n  public type: number = Signature.type;\n  public data: { hash: HashAlgorithms; signature: SignatureAlgorithms }[] = [];\n\n  constructor(props: Partial<Signature> = {}) {\n    Object.assign(this, props);\n  }\n\n  static createEmpty() {\n    const v = new Signature();\n    return v;\n  }\n\n  static deSerialize(buf: Buffer) {\n    return new Signature(decode(buf, Signature.spec));\n  }\n\n  serialize() {\n    const res = encode(this, Signature.spec).slice();\n    return Buffer.from(res);\n  }\n\n  static fromData(buf: Buffer) {\n    const type = Buffer.alloc(2);\n    type.writeUInt16BE(Signature.type);\n    return Signature.deSerialize(Buffer.concat([type, buf]));\n  }\n\n  get extension() {\n    return {\n      type: this.type,\n      data: this.serialize().slice(2),\n    };\n  }\n}\n"]}