{"version":3,"file":"ellipticCurves.js","sourceRoot":"","sources":["../../../../../../dtls/src/handshake/extensions/ellipticCurves.ts"],"names":[],"mappings":";;;AAAA,6CAAoD;AAIpD,UAAU;AACV,MAAa,cAAc;IAUzB,YAAY,QAAiC,EAAE;QAHxC,SAAI,GAAW,cAAc,CAAC,IAAI,CAAC;QACnC,SAAI,GAAa,EAAE,CAAC;QAGzB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,WAAW;QAChB,OAAO,IAAI,cAAc,EAAE,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,GAAW;QACzB,OAAO,IAAI,cAAc,CAAC;YACxB,IAAI,EAAE,cAAc,CAAC,IAAI;YACzB,IAAI,EAAE,oBAAM,CAAC,GAAG,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;SAC5C,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,OAAO,IAAI,cAAc,CAAC,oBAAM,CAAC,GAAG,EAAE,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9D,CAAC;IAED,SAAS;QACP,OAAO,MAAM,CAAC,IAAI,CAAC,oBAAM,CAAC,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;IAChE,CAAC;IAED,IAAI,SAAS;QACX,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;SAChC,CAAC;IACJ,CAAC;;AAtCH,wCAuCC;AAtCQ,mBAAI,GAAG,EAAE,CAAC;AACD,mBAAI,GAAG;IACrB,IAAI,EAAE,mBAAK,CAAC,QAAQ;IACpB,IAAI,EAAE,mBAAK,CAAC,KAAK,CAAC,mBAAK,CAAC,QAAQ,EAAE,mBAAK,CAAC,QAAQ,EAAE,OAAO,CAAC;CAC3D,CAAC","sourcesContent":["import { decode, encode, types } from \"binary-data\";\n\nimport { Extension } from \"../../typings/domain\";\n\n// rfc4492\nexport class EllipticCurves {\n  static type = 10;\n  static readonly spec = {\n    type: types.uint16be,\n    data: types.array(types.uint16be, types.uint16be, \"bytes\"),\n  };\n\n  public type: number = EllipticCurves.type;\n  public data: number[] = [];\n\n  constructor(props: Partial<EllipticCurves> = {}) {\n    Object.assign(this, props);\n  }\n\n  static createEmpty() {\n    return new EllipticCurves();\n  }\n\n  static fromData(buf: Buffer) {\n    return new EllipticCurves({\n      type: EllipticCurves.type,\n      data: decode(buf, EllipticCurves.spec.data),\n    });\n  }\n\n  static deSerialize(buf: Buffer) {\n    return new EllipticCurves(decode(buf, EllipticCurves.spec));\n  }\n\n  serialize() {\n    return Buffer.from(encode(this, EllipticCurves.spec).slice());\n  }\n\n  get extension(): Extension {\n    return {\n      type: this.type,\n      data: this.serialize().slice(2),\n    };\n  }\n}\n"]}