{"version":3,"file":"useSrtp.js","sourceRoot":"","sources":["../../../../../../dtls/src/handshake/extensions/useSrtp.ts"],"names":[],"mappings":"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","sourcesContent":["import { decode, encode, types } from \"binary-data\";\nimport { times } from \"lodash\";\n\nimport { Extension } from \"../../typings/domain\";\n\nexport class UseSRTP {\n  static type = 14; // 9.  IANA Considerations\n  static readonly spec = {\n    type: types.uint16be,\n    data: types.buffer(types.uint16be),\n  };\n\n  type: number = UseSRTP.type;\n  data: Buffer = Buffer.from([]);\n  profiles: number[] = [];\n  mki: Buffer = Buffer.from([0x00]);\n\n  constructor(props: Partial<UseSRTP> = {}) {\n    Object.assign(this, props);\n  }\n\n  static create(profiles: number[], mki: Buffer) {\n    const v = new UseSRTP({\n      profiles,\n      mki,\n    });\n    return v;\n  }\n\n  static deSerialize(buf: Buffer) {\n    const useSrtp = new UseSRTP(decode(buf, UseSRTP.spec));\n    const profileLength = useSrtp.data.readUInt16BE();\n    const profiles = times(profileLength / 2).map((i) => {\n      return useSrtp.data.readUInt16BE(i * 2 + 2);\n    });\n    useSrtp.profiles = profiles;\n    useSrtp.mki = useSrtp.data.slice(profileLength + 2);\n    return useSrtp;\n  }\n\n  serialize() {\n    const profileLength = Buffer.alloc(2);\n    profileLength.writeUInt16BE(this.profiles.length * 2);\n    const data = Buffer.concat([\n      profileLength,\n      ...this.profiles.map((profile) => {\n        const buf = Buffer.alloc(2);\n        buf.writeUInt16BE(profile);\n        return buf;\n      }),\n      this.mki,\n    ]);\n    this.data = data;\n    const res = encode(this, UseSRTP.spec).slice();\n    return Buffer.from(res);\n  }\n\n  static fromData(buf: Buffer) {\n    const head = Buffer.alloc(4);\n    head.writeUInt16BE(UseSRTP.type);\n    head.writeUInt16BE(buf.length, 2);\n    return UseSRTP.deSerialize(Buffer.concat([head, buf]));\n  }\n\n  get extension(): Extension {\n    return {\n      type: this.type,\n      data: this.serialize().slice(4),\n    };\n  }\n}\n"]}