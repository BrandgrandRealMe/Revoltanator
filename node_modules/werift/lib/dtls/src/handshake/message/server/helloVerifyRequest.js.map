{"version":3,"file":"helloVerifyRequest.js","sourceRoot":"","sources":["../../../../../../../dtls/src/handshake/message/server/helloVerifyRequest.ts"],"names":[],"mappings":";;;AAAA,6CAAoD;AAEpD,+DAAuE;AAEvE,yCAA+C;AAC/C,uCAA4C;AAE5C,4CAA4C;AAE5C,MAAa,wBAAwB;IAQnC,YACS,aAA+C,EAC/C,MAAc;QADd,kBAAa,GAAb,aAAa,CAAkC;QAC/C,WAAM,GAAN,MAAM,CAAQ;QATvB,YAAO,GAAG,qBAAa,CAAC,sBAAsB,CAAC;IAU5C,CAAC;IAEJ,MAAM,CAAC,WAAW;QAChB,OAAO,IAAI,wBAAwB,CAAC,SAAgB,EAAE,SAAgB,CAAC,CAAC;IAC1E,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,OAAO,IAAI,wBAAwB;QACjC,YAAY;QACZ,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAM,CAAC,GAAG,EAAE,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAC7D,CAAC;IACJ,CAAC;IAED,SAAS;QACP,MAAM,GAAG,GAAG,oBAAM,CAAC,IAAI,EAAE,wBAAwB,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QAChE,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,IAAI,OAAO;QACT,OAAO;YACL,KAAK,EAAE,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK;YACrC,KAAK,EAAE,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK;SACtC,CAAC;IACJ,CAAC;IAED,UAAU;QACR,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAC9B,OAAO,IAAI,8BAAmB,CAC5B,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,UAAW,EAChB,CAAC,EACD,IAAI,CAAC,MAAM,EACX,IAAI,CACL,CAAC;IACJ,CAAC;;AA9CH,4DA+CC;AA5CiB,6BAAI,GAAG;IACrB,aAAa,EAAE,wBAAe;IAC9B,MAAM,EAAE,mBAAK,CAAC,MAAM,CAAC,mBAAK,CAAC,KAAK,CAAC;CAClC,CAAC","sourcesContent":["import { decode, encode, types } from \"binary-data\";\n\nimport { FragmentedHandshake } from \"../../../record/message/fragment\";\nimport { Handshake } from \"../../../typings/domain\";\nimport { ProtocolVersion } from \"../../binary\";\nimport { HandshakeType } from \"../../const\";\n\n// 4.2.1.  Denial-of-Service Countermeasures\n\nexport class ServerHelloVerifyRequest implements Handshake {\n  msgType = HandshakeType.hello_verify_request_3;\n  messageSeq?: number;\n  static readonly spec = {\n    serverVersion: ProtocolVersion,\n    cookie: types.buffer(types.uint8),\n  };\n\n  constructor(\n    public serverVersion: { major: number; minor: number },\n    public cookie: Buffer\n  ) {}\n\n  static createEmpty() {\n    return new ServerHelloVerifyRequest(undefined as any, undefined as any);\n  }\n\n  static deSerialize(buf: Buffer) {\n    return new ServerHelloVerifyRequest(\n      //@ts-ignore\n      ...Object.values(decode(buf, ServerHelloVerifyRequest.spec))\n    );\n  }\n\n  serialize() {\n    const res = encode(this, ServerHelloVerifyRequest.spec).slice();\n    return Buffer.from(res);\n  }\n\n  get version() {\n    return {\n      major: 255 - this.serverVersion.major,\n      minor: 255 - this.serverVersion.minor,\n    };\n  }\n\n  toFragment() {\n    const body = this.serialize();\n    return new FragmentedHandshake(\n      this.msgType,\n      body.length,\n      this.messageSeq!,\n      0,\n      body.length,\n      body\n    );\n  }\n}\n"]}