{"version":3,"file":"certificate.js","sourceRoot":"","sources":["../../../../../../dtls/src/handshake/message/certificate.ts"],"names":[],"mappings":";;;AAAA,6CAAoD;AAEpD,4DAAoE;AAEpE,sCAAsC;AACtC,oCAAyC;AAEzC,6BAA6B;AAC7B,6BAA6B;AAE7B,MAAa,WAAW;IAOtB,YAAmB,eAAyB;QAAzB,oBAAe,GAAf,eAAe,CAAU;QAN5C,YAAO,GAAG,qBAAa,CAAC,cAAc,CAAC;IAMQ,CAAC;IAEhD,MAAM,CAAC,WAAW;QAChB,OAAO,IAAI,WAAW,CAAC,SAAgB,CAAC,CAAC;IAC3C,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,OAAO,IAAI,WAAW;QACpB,YAAY;QACZ,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAM,CAAC,GAAG,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAChD,CAAC;IACJ,CAAC;IAED,SAAS;QACP,MAAM,GAAG,GAAG,oBAAM,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QACnD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,UAAU;QACR,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAC9B,OAAO,IAAI,8BAAmB,CAC5B,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,UAAW,EAChB,CAAC,EACD,IAAI,CAAC,MAAM,EACX,IAAI,CACL,CAAC;IACJ,CAAC;;AAnCH,kCAoCC;AAjCiB,gBAAI,GAAG;IACrB,eAAe,EAAE,mBAAK,CAAC,KAAK,CAAC,kBAAS,EAAE,mBAAK,CAAC,QAAQ,EAAE,OAAO,CAAC;CACjE,CAAC","sourcesContent":["import { decode, encode, types } from \"binary-data\";\n\nimport { FragmentedHandshake } from \"../../record/message/fragment\";\nimport { Handshake } from \"../../typings/domain\";\nimport { ASN11Cert } from \"../binary\";\nimport { HandshakeType } from \"../const\";\n\n// 7.4.2.  Server Certificate\n// 7.4.6.  Client Certificate\n\nexport class Certificate implements Handshake {\n  msgType = HandshakeType.certificate_11;\n  messageSeq?: number;\n  static readonly spec = {\n    certificateList: types.array(ASN11Cert, types.uint24be, \"bytes\"),\n  };\n\n  constructor(public certificateList: Buffer[]) {}\n\n  static createEmpty() {\n    return new Certificate(undefined as any);\n  }\n\n  static deSerialize(buf: Buffer) {\n    return new Certificate(\n      //@ts-ignore\n      ...Object.values(decode(buf, Certificate.spec))\n    );\n  }\n\n  serialize() {\n    const res = encode(this, Certificate.spec).slice();\n    return Buffer.from(res);\n  }\n\n  toFragment() {\n    const body = this.serialize();\n    return new FragmentedHandshake(\n      this.msgType,\n      body.length,\n      this.messageSeq!,\n      0,\n      body.length,\n      body\n    );\n  }\n}\n"]}