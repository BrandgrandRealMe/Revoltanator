{"version":3,"file":"hello.js","sourceRoot":"","sources":["../../../../../../../dtls/src/handshake/message/client/hello.ts"],"names":[],"mappings":";;;AAAA,6CAAoD;AAEpD,+DAAuE;AAEvE,yCAA6C;AAC7C,uCAA4C;AAC5C,yCAA0C;AAE1C,yBAAyB;AAEzB,MAAa,WAAW;IAatB,YACS,aAA+C,EAC/C,MAAuD,EACvD,SAAiB,EACjB,MAAc,EACd,YAAsB,EACtB,kBAA4B,EAC5B,UAAuB;QANvB,kBAAa,GAAb,aAAa,CAAkC;QAC/C,WAAM,GAAN,MAAM,CAAiD;QACvD,cAAS,GAAT,SAAS,CAAQ;QACjB,WAAM,GAAN,MAAM,CAAQ;QACd,iBAAY,GAAZ,YAAY,CAAU;QACtB,uBAAkB,GAAlB,kBAAkB,CAAU;QAC5B,eAAU,GAAV,UAAU,CAAa;QAnBhC,YAAO,GAAG,qBAAa,CAAC,cAAc,CAAC;QACvC,eAAU,GAAW,CAAC,CAAC;IAmBpB,CAAC;IAEJ,MAAM,CAAC,WAAW;QAChB,OAAO,IAAI,WAAW,CACpB,SAAgB,EAChB,SAAgB,EAChB,SAAgB,EAChB,SAAgB,EAChB,SAAgB,EAChB,SAAgB,EAChB,SAAgB,CACjB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,OAAO,IAAI,WAAW;QACpB,YAAY;QACZ,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAM,CAAC,GAAG,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAChD,CAAC;IACJ,CAAC;IAED,SAAS;QACP,MAAM,GAAG,GAAG,oBAAM,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QACnD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,UAAU;QACR,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAC9B,OAAO,IAAI,8BAAmB,CAC5B,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,UAAU,EACf,CAAC,EACD,IAAI,CAAC,MAAM,EACX,IAAI,CACL,CAAC;IACJ,CAAC;;AAzDH,kCA0DC;AAvDiB,gBAAI,GAAG;IACrB,aAAa,EAAE,EAAE,KAAK,EAAE,mBAAK,CAAC,KAAK,EAAE,KAAK,EAAE,mBAAK,CAAC,KAAK,EAAE;IACzD,MAAM,EAAE,mBAAU,CAAC,IAAI;IACvB,SAAS,EAAE,mBAAK,CAAC,MAAM,CAAC,mBAAK,CAAC,KAAK,CAAC;IACpC,MAAM,EAAE,mBAAK,CAAC,MAAM,CAAC,mBAAK,CAAC,KAAK,CAAC;IACjC,YAAY,EAAE,mBAAK,CAAC,KAAK,CAAC,mBAAK,CAAC,QAAQ,EAAE,mBAAK,CAAC,QAAQ,EAAE,OAAO,CAAC;IAClE,kBAAkB,EAAE,mBAAK,CAAC,KAAK,CAAC,mBAAK,CAAC,KAAK,EAAE,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC;IAClE,UAAU,EAAE,sBAAa;CAC1B,CAAC","sourcesContent":["import { decode, encode, types } from \"binary-data\";\n\nimport { FragmentedHandshake } from \"../../../record/message/fragment\";\nimport { Extension } from \"../../../typings/domain\";\nimport { ExtensionList } from \"../../binary\";\nimport { HandshakeType } from \"../../const\";\nimport { DtlsRandom } from \"../../random\";\n\n// 7.4.1.2.  Client Hello\n\nexport class ClientHello {\n  msgType = HandshakeType.client_hello_1;\n  messageSeq: number = 0;\n  static readonly spec = {\n    clientVersion: { major: types.uint8, minor: types.uint8 },\n    random: DtlsRandom.spec,\n    sessionId: types.buffer(types.uint8),\n    cookie: types.buffer(types.uint8),\n    cipherSuites: types.array(types.uint16be, types.uint16be, \"bytes\"),\n    compressionMethods: types.array(types.uint8, types.uint8, \"bytes\"),\n    extensions: ExtensionList,\n  };\n\n  constructor(\n    public clientVersion: { major: number; minor: number },\n    public random: { gmt_unix_time: number; random_bytes: Buffer },\n    public sessionId: Buffer,\n    public cookie: Buffer,\n    public cipherSuites: number[],\n    public compressionMethods: number[],\n    public extensions: Extension[]\n  ) {}\n\n  static createEmpty() {\n    return new ClientHello(\n      undefined as any,\n      undefined as any,\n      undefined as any,\n      undefined as any,\n      undefined as any,\n      undefined as any,\n      undefined as any\n    );\n  }\n\n  static deSerialize(buf: Buffer) {\n    return new ClientHello(\n      //@ts-ignore\n      ...Object.values(decode(buf, ClientHello.spec))\n    );\n  }\n\n  serialize() {\n    const res = encode(this, ClientHello.spec).slice();\n    return Buffer.from(res);\n  }\n\n  toFragment() {\n    const body = this.serialize();\n    return new FragmentedHandshake(\n      this.msgType,\n      body.length,\n      this.messageSeq,\n      0,\n      body.length,\n      body\n    );\n  }\n}\n"]}