{"version":3,"file":"cipher.js","sourceRoot":"","sources":["../../../../../dtls/src/context/cipher.ts"],"names":[],"mappings":"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","sourcesContent":["import { Certificate, PrivateKey } from \"@fidm/x509\";\nimport { Crypto } from \"@peculiar/webcrypto\";\nimport * as x509 from \"@peculiar/x509\";\nimport { decode, encode, types } from \"binary-data\";\nimport { createSign } from \"crypto\";\nimport { addYears } from \"date-fns\";\nimport { randomBytes } from \"tweetnacl\";\n\nimport {\n  CipherSuites,\n  HashAlgorithm,\n  NamedCurveAlgorithm,\n  NamedCurveAlgorithms,\n  SignatureAlgorithm,\n  SignatureHash,\n} from \"../cipher/const\";\nimport { NamedCurveKeyPair } from \"../cipher/namedCurve\";\nimport { prfVerifyDataClient, prfVerifyDataServer } from \"../cipher/prf\";\nimport { SessionType, SessionTypes } from \"../cipher/suites/abstract\";\nimport AEADCipher from \"../cipher/suites/aead\";\nimport { ProtocolVersion } from \"../handshake/binary\";\nimport { DtlsRandom } from \"../handshake/random\";\nimport { DtlsPlaintext } from \"../record/message/plaintext\";\n\nconst crypto = new Crypto();\nx509.cryptoProvider.set(crypto);\n\nexport class CipherContext {\n  localRandom!: DtlsRandom;\n  remoteRandom!: DtlsRandom;\n  cipherSuite!: CipherSuites;\n  remoteCertificate?: Buffer;\n  remoteKeyPair!: Partial<NamedCurveKeyPair>;\n  localKeyPair!: NamedCurveKeyPair;\n  masterSecret!: Buffer;\n  cipher!: AEADCipher;\n  namedCurve!: NamedCurveAlgorithms;\n  signatureHashAlgorithm?: SignatureHash;\n  localCert!: Buffer;\n  localPrivateKey!: PrivateKey;\n\n  constructor(\n    public sessionType: SessionTypes,\n    public certPem?: string,\n    public keyPem?: string,\n    signatureHashAlgorithm?: SignatureHash\n  ) {\n    if (certPem && keyPem && signatureHashAlgorithm) {\n      this.parseX509(certPem, keyPem, signatureHashAlgorithm);\n    }\n  }\n\n  /**\n   *\n   * @param signatureHash\n   * @param namedCurveAlgorithm necessary when use ecdsa\n   * @returns\n   */\n  static async createSelfSignedCertificateWithKey(\n    signatureHash: SignatureHash,\n    namedCurveAlgorithm?: NamedCurveAlgorithms\n  ) {\n    const name = (() => {\n      switch (signatureHash.signature) {\n        case SignatureAlgorithm.rsa:\n          return \"RSASSA-PKCS1-v1_5\";\n        case SignatureAlgorithm.ecdsa:\n          return \"ECDSA\";\n      }\n    })();\n    const hash = (() => {\n      switch (signatureHash.hash) {\n        case HashAlgorithm.sha256:\n          return \"SHA-256\";\n      }\n    })();\n    const namedCurve = (() => {\n      switch (namedCurveAlgorithm) {\n        case NamedCurveAlgorithm.secp256r1:\n          return \"P-256\";\n        case NamedCurveAlgorithm.x25519:\n          // todo fix (X25519 not supported with ECDSA)\n          if (name === \"ECDSA\") return \"P-256\";\n          return \"X25519\";\n        default:\n          if (name === \"ECDSA\") return \"P-256\";\n      }\n    })();\n    const alg = (() => {\n      switch (name) {\n        case \"ECDSA\":\n          return { name, hash, namedCurve };\n        case \"RSASSA-PKCS1-v1_5\":\n          return {\n            name,\n            hash,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            modulusLength: 2048,\n          };\n      }\n    })();\n\n    const keys = (await crypto.subtle.generateKey(alg, true, [\n      \"sign\",\n      \"verify\",\n    ])) as any;\n\n    const cert = await x509.X509CertificateGenerator.createSelfSigned({\n      serialNumber: Buffer.from(randomBytes(10)).toString(\"hex\"),\n      name: \"C=AU, ST=Some-State, O=Internet Widgits Pty Ltd\",\n      notBefore: new Date(),\n      notAfter: addYears(Date.now(), 10),\n      signingAlgorithm: alg,\n      keys,\n    });\n\n    const certPem = cert.toString(\"pem\");\n    const keyPem = x509.PemConverter.encode(\n      await crypto.subtle.exportKey(\"pkcs8\", keys.privateKey as any),\n      \"private key\"\n    );\n\n    return { certPem, keyPem, signatureHash };\n  }\n\n  encryptPacket(pkt: DtlsPlaintext) {\n    const header = pkt.recordLayerHeader;\n    const enc = this.cipher.encrypt(this.sessionType, pkt.fragment, {\n      type: header.contentType,\n      version: decode(\n        Buffer.from(encode(header.protocolVersion, ProtocolVersion).slice()),\n        { version: types.uint16be }\n      ).version,\n      epoch: header.epoch,\n      sequenceNumber: header.sequenceNumber,\n    });\n    pkt.fragment = enc;\n    pkt.recordLayerHeader.contentLen = enc.length;\n    return pkt;\n  }\n\n  decryptPacket(pkt: DtlsPlaintext) {\n    const header = pkt.recordLayerHeader;\n    const dec = this.cipher.decrypt(this.sessionType, pkt.fragment, {\n      type: header.contentType,\n      version: decode(\n        Buffer.from(encode(header.protocolVersion, ProtocolVersion).slice()),\n        { version: types.uint16be }\n      ).version,\n      epoch: header.epoch,\n      sequenceNumber: header.sequenceNumber,\n    });\n    return dec;\n  }\n\n  verifyData(buf: Buffer) {\n    if (this.sessionType === SessionType.CLIENT)\n      return prfVerifyDataClient(this.masterSecret, buf);\n    else return prfVerifyDataServer(this.masterSecret, buf);\n  }\n\n  signatureData(data: Buffer, hash: string) {\n    const signature = createSign(hash).update(data);\n    const key = this.localPrivateKey.toPEM().toString();\n    const signed = signature.sign(key);\n    return signed;\n  }\n\n  generateKeySignature(hashAlgorithm: string) {\n    const clientRandom =\n      this.sessionType === SessionType.CLIENT\n        ? this.localRandom\n        : this.remoteRandom;\n    const serverRandom =\n      this.sessionType === SessionType.SERVER\n        ? this.localRandom\n        : this.remoteRandom;\n\n    const sig = this.valueKeySignature(\n      clientRandom.serialize(),\n      serverRandom.serialize(),\n      this.localKeyPair.publicKey,\n      this.namedCurve\n    );\n\n    const enc = this.localPrivateKey.sign(sig, hashAlgorithm);\n    return enc;\n  }\n\n  parseX509(certPem: string, keyPem: string, signatureHash: SignatureHash) {\n    const cert = Certificate.fromPEM(Buffer.from(certPem));\n    const sec = PrivateKey.fromPEM(Buffer.from(keyPem));\n    this.localCert = cert.raw;\n    this.localPrivateKey = sec;\n    this.signatureHashAlgorithm = signatureHash;\n  }\n\n  private valueKeySignature(\n    clientRandom: Buffer,\n    serverRandom: Buffer,\n    publicKey: Buffer,\n    namedCurve: number\n  ) {\n    const serverParams = Buffer.from(\n      encode(\n        { type: 3, curve: namedCurve, len: publicKey.length },\n        { type: types.uint8, curve: types.uint16be, len: types.uint8 }\n      ).slice()\n    );\n    return Buffer.concat([clientRandom, serverRandom, serverParams, publicKey]);\n  }\n}\n"]}