{"version":3,"file":"dtls.js","sourceRoot":"","sources":["../../../../../dtls/src/context/dtls.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug } from \"debug\";\n\nimport { HashAlgorithms, SignatureAlgorithms } from \"../cipher/const\";\nimport { SessionTypes } from \"../cipher/suites/abstract\";\nimport { FragmentedHandshake } from \"../record/message/fragment\";\nimport { Options } from \"../socket\";\nimport { Handshake } from \"../typings/domain\";\n\nconst log = debug(\"werift-dtls : packages/dtls/src/context/dtls.ts : log\");\n\nexport class DtlsContext {\n  version = { major: 255 - 1, minor: 255 - 2 };\n\n  lastFlight: Handshake[] = [];\n  lastMessage: Buffer[] = [];\n  recordSequenceNumber = 0;\n  sequenceNumber = 0;\n  epoch = 0;\n  flight = 0;\n  handshakeCache: {\n    [flight: number]: {\n      isLocal: boolean;\n      data: FragmentedHandshake[];\n      flight: number;\n    };\n  } = {};\n  cookie?: Buffer;\n  requestedCertificateTypes: number[] = [];\n  requestedSignatureAlgorithms: {\n    hash: HashAlgorithms;\n    signature: SignatureAlgorithms;\n  }[] = [];\n  remoteExtendedMasterSecret = false;\n\n  constructor(public options: Options, public sessionType: SessionTypes) {}\n\n  get sessionId() {\n    return this.cookie ? this.cookie.toString(\"hex\").slice(0, 10) : \"\";\n  }\n\n  get sortedHandshakeCache() {\n    return Object.entries(this.handshakeCache)\n      .sort(([a], [b]) => Number(a) - Number(b))\n      .map(([, { data }]) => data.sort((a, b) => a.message_seq - b.message_seq))\n      .flatMap((v) => v);\n  }\n\n  checkHandshakesExist = (handshakes: number[]) =>\n    !handshakes.find(\n      (type) =>\n        this.sortedHandshakeCache.find((h) => h.msg_type === type) == undefined\n    );\n\n  bufferHandshakeCache(\n    handshakes: FragmentedHandshake[],\n    isLocal: boolean,\n    flight: number\n  ) {\n    if (!this.handshakeCache[flight]) {\n      this.handshakeCache[flight] = { data: [], isLocal, flight };\n    }\n\n    const filtered = handshakes.filter((h) => {\n      const exist = this.handshakeCache[flight].data.find(\n        (t) => t.msg_type === h.msg_type\n      );\n      if (exist) {\n        log(this.sessionId, \"exist\", exist.summary, isLocal, flight);\n        return false;\n      }\n      return true;\n    });\n\n    this.handshakeCache[flight].data = [\n      ...this.handshakeCache[flight].data,\n      ...filtered,\n    ];\n  }\n}\n"]}