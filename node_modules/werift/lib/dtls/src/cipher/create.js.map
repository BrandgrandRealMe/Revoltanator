{"version":3,"file":"create.js","sourceRoot":"","sources":["../../../../../dtls/src/cipher/create.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createECDHEECDSAKeyExchange,\n  createECDHEPSKKeyExchange,\n  createECDHERSAKeyExchange,\n  createPSKKeyExchange,\n  createRSAKeyExchange,\n  KeyExchange,\n} from \"./key-exchange\";\nimport AEADCipher from \"./suites/aead\";\n\nconst cipherSuites = {\n  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: 0xc02b,\n  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: 0xc02c,\n  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: 0xc02f,\n  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: 0xc030,\n  TLS_RSA_WITH_AES_128_GCM_SHA256: 0x009c,\n  TLS_RSA_WITH_AES_256_GCM_SHA384: 0x009d,\n  TLS_PSK_WITH_AES_128_GCM_SHA256: 0x00a8,\n  TLS_PSK_WITH_AES_256_GCM_SHA384: 0x00a9,\n  TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256: 0xd001,\n  TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384: 0xd002,\n  TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: 0xccac,\n  TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: 0xcca9,\n  TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: 0xcca8,\n  TLS_PSK_WITH_CHACHA20_POLY1305_SHA256: 0xccab,\n};\n\nconst AEAD_AES_128_GCM = {\n  K_LEN: 16, // Length of a key.\n  N_MIN: 12, // Min nonce length.\n  N_MAX: 12, // Max nonce length.\n  P_MAX: 2 ** 36 - 31, // Max length of a plaintext.\n\n  // Max safe int in js is 2 ** 53. So, use this value\n  // instead of 2 ** 61 as described in rfc5116.\n  A_MAX: 2 ** 53 - 1, // Max length of an additional data.\n  C_MAX: 2 ** 36 - 15, // Cipher text length.\n};\n\nconst AEAD_AES_256_GCM = {\n  K_LEN: 32, // Length of a key.\n  N_MIN: 12, // Min nonce length.\n  N_MAX: 12, // Max nonce length.\n  P_MAX: 2 ** 36 - 31, // Max length of a plaintext.\n\n  // Note: see above.\n  A_MAX: 2 ** 53 - 1, // Max length of an additional data.\n  C_MAX: 2 ** 36 - 15, // Cipher text length.\n};\n\nconst RSA_KEY_EXCHANGE = createRSAKeyExchange();\nconst ECDHE_RSA_KEY_EXCHANGE = createECDHERSAKeyExchange();\nconst ECDHE_ECDSA_KEY_EXCHANGE = createECDHEECDSAKeyExchange();\nconst PSK_KEY_EXCHANGE = createPSKKeyExchange();\nconst ECDHE_PSK_KEY_EXCHANGE = createECDHEPSKKeyExchange();\n\n/**\n * Convert cipher value to cipher instance.\n * @param {number} cipher\n */\nexport function createCipher(cipher: number) {\n  switch (cipher) {\n    case cipherSuites.TLS_RSA_WITH_AES_128_GCM_SHA256:\n      return createAEADCipher(\n        cipherSuites.TLS_RSA_WITH_AES_128_GCM_SHA256,\n        \"TLS_RSA_WITH_AES_128_GCM_SHA256\",\n        \"aes-128-gcm\",\n        RSA_KEY_EXCHANGE,\n        AEAD_AES_128_GCM\n      );\n    case cipherSuites.TLS_RSA_WITH_AES_256_GCM_SHA384:\n      return createAEADCipher(\n        cipherSuites.TLS_RSA_WITH_AES_256_GCM_SHA384,\n        \"TLS_RSA_WITH_AES_256_GCM_SHA384\",\n        \"aes-256-gcm\",\n        RSA_KEY_EXCHANGE,\n        AEAD_AES_256_GCM,\n        \"sha384\"\n      );\n    case cipherSuites.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:\n      return createAEADCipher(\n        cipherSuites.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n        \"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\",\n        \"aes-128-gcm\",\n        ECDHE_RSA_KEY_EXCHANGE,\n        AEAD_AES_128_GCM\n      );\n    case cipherSuites.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:\n      return createAEADCipher(\n        cipherSuites.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,\n        \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\",\n        \"aes-256-gcm\",\n        ECDHE_RSA_KEY_EXCHANGE,\n        AEAD_AES_256_GCM,\n        \"sha384\"\n      );\n    case cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:\n      return createAEADCipher(\n        cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n        \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\",\n        \"aes-128-gcm\",\n        ECDHE_ECDSA_KEY_EXCHANGE,\n        AEAD_AES_128_GCM\n      );\n    case cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:\n      return createAEADCipher(\n        cipherSuites.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,\n        \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\",\n        \"aes-256-gcm\",\n        ECDHE_ECDSA_KEY_EXCHANGE,\n        AEAD_AES_256_GCM,\n        \"sha384\"\n      );\n    case cipherSuites.TLS_PSK_WITH_AES_128_GCM_SHA256:\n      return createAEADCipher(\n        cipherSuites.TLS_PSK_WITH_AES_128_GCM_SHA256,\n        \"TLS_PSK_WITH_AES_128_GCM_SHA256\",\n        \"aes-128-gcm\",\n        PSK_KEY_EXCHANGE,\n        AEAD_AES_128_GCM,\n        \"sha256\"\n      );\n    case cipherSuites.TLS_PSK_WITH_AES_256_GCM_SHA384:\n      return createAEADCipher(\n        cipherSuites.TLS_PSK_WITH_AES_256_GCM_SHA384,\n        \"TLS_PSK_WITH_AES_256_GCM_SHA384\",\n        \"aes-256-gcm\",\n        PSK_KEY_EXCHANGE,\n        AEAD_AES_256_GCM,\n        \"sha384\"\n      );\n    case cipherSuites.TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256:\n      return createAEADCipher(\n        cipherSuites.TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256,\n        \"TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256\",\n        \"aes-128-gcm\",\n        ECDHE_PSK_KEY_EXCHANGE,\n        AEAD_AES_128_GCM,\n        \"sha256\"\n      );\n    case cipherSuites.TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384:\n      return createAEADCipher(\n        cipherSuites.TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384,\n        \"TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384\",\n        \"aes-256-gcm\",\n        ECDHE_PSK_KEY_EXCHANGE,\n        AEAD_AES_256_GCM,\n        \"sha384\"\n      );\n    default:\n      break;\n  }\n\n  return null as any as AEADCipher;\n}\n\n/**\n * @param {number} id An internal id of cipher suite.\n * @param {string} name A valid cipher suite name.\n * @param {string} block A valid nodejs cipher name.\n * @param {KeyExchange} kx Key exchange type.\n * @param {Object} constants Cipher specific constants.\n * @param {string} hash\n * @returns {AEADCipher}\n */\nexport function createAEADCipher(\n  id: number,\n  name: string,\n  block: string,\n  kx: KeyExchange,\n  constants: { K_LEN: number; N_MAX: number },\n  hash = \"sha256\"\n) {\n  const cipher = new AEADCipher();\n\n  cipher.id = id;\n  cipher.name = name;\n  cipher.blockAlgorithm = block;\n  cipher.kx = kx;\n  cipher.hashAlgorithm = hash;\n\n  cipher.keyLength = constants.K_LEN;\n  cipher.nonceLength = constants.N_MAX;\n\n  // RFC5288, sec. 3\n  cipher.nonceImplicitLength = 4;\n  cipher.nonceExplicitLength = 8;\n\n  cipher.ivLength = cipher.nonceImplicitLength;\n\n  cipher.authTagLength = 16;\n\n  return cipher;\n}\n"]}