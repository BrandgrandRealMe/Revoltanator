{"version":3,"file":"aead.js","sourceRoot":"","sources":["../../../../../../dtls/src/cipher/suites/aead.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AACjC,kDAA0B;AAE1B,yCAA4D;AAC5D,gCAA2C;AAC3C,uDAA6E;AAC7E,MAAM,EACJ,YAAY,EACZ,MAAM,EACN,KAAK,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GACrC,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAE3B,MAAM,WAAW,GAAG,KAAK,CAAC;AAC1B,MAAM,eAAe,GAAG,QAAQ,CAAC;AAEjC,MAAM,kBAAkB,GAAG;IACzB,KAAK,EAAE,QAAQ;IACf,QAAQ,EAAE,QAAQ;IAClB,IAAI,EAAE,WAAW;IACjB,OAAO,EAAE,eAAe;IACxB,MAAM,EAAE,QAAQ;CACjB,CAAC;AAEF,MAAM,GAAG,GAAG,eAAK,CACf,6DAA6D,CAC9D,CAAC;AAEF;;GAEG;AACH,MAAqB,UAAW,SAAQ,kBAAM;IAe5C;QACE,KAAK,EAAE,CAAC;QAfV,cAAS,GAAG,CAAC,CAAC;QACd,gBAAW,GAAG,CAAC,CAAC;QAChB,aAAQ,GAAG,CAAC,CAAC;QACb,kBAAa,GAAG,CAAC,CAAC;QAElB,wBAAmB,GAAG,CAAC,CAAC;QACxB,wBAAmB,GAAG,CAAC,CAAC;IAUxB,CAAC;IAED,IAAI,OAAO;QACT,OAAO,yBAAgB,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,IAAI,CAAC,YAAoB,EAAE,YAAoB,EAAE,YAAoB;QACnE,MAAM,IAAI,GAAG,uBAAiB,CAC5B,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,aAAa,CACnB,CAAC;QAEF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,IAAkB,EAAE,IAAY,EAAE,MAAoB;QAC5D,MAAM,QAAQ,GAAG,IAAI,KAAK,sBAAW,CAAC,MAAM,CAAC;QAC7C,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1D,MAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;QACtE,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,KAAK,EAAE,CAAC;QAExC,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACzD,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,cAAc,EAAE,IAAI,CAAC,mBAAmB,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAEvE,MAAM,aAAa,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAEzD,MAAM,cAAc,GAAG;YACrB,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,QAAQ,EAAE,MAAM,CAAC,cAAc;YAC/B,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;QAEF,MAAM,gBAAgB,GAAG,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,KAAK,EAAE,CAAC;QAE5E,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAClC,IAAI,CAAC,cAAuC,EAC5C,QAAQ,EACR,EAAE,EACF;YACE,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CACF,CAAC;QAEF,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAC9B,eAAe,EAAE,IAAI,CAAC,MAAM;SAC7B,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;QACjC,MAAM,OAAO,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;QAEpC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IACtE,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,IAAkB,EAAE,IAAY,EAAE,MAAoB;QAC5D,MAAM,QAAQ,GAAG,IAAI,KAAK,sBAAW,CAAC,MAAM,CAAC;QAC7C,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1D,MAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;QACtE,IAAI,CAAC,EAAE,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,KAAK,EAAE,CAAC;QAExC,MAAM,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;QAEjC,MAAM,aAAa,GAAG,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACjE,aAAa,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAEjD,MAAM,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC;QACtE,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAErD,MAAM,cAAc,GAAG;YACrB,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,QAAQ,EAAE,MAAM,CAAC,cAAc;YAC/B,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,OAAO,EAAE,MAAM,CAAC,OAAO;YACvB,MAAM,EAAE,SAAS,CAAC,MAAM;SACzB,CAAC;QAEF,MAAM,gBAAgB,GAAG,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC,KAAK,EAAE,CAAC;QAE5E,MAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CACtC,IAAI,CAAC,cAAuC,EAC5C,QAAQ,EACR,EAAE,EACF;YACE,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CACF,CAAC;QAEF,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC7B,QAAQ,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAChC,eAAe,EAAE,SAAS,CAAC,MAAM;SAClC,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC5C,IAAI;YACF,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;YACnC,OAAO,SAAS,CAAC,MAAM,GAAG,CAAC;gBACzB,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;gBACtC,CAAC,CAAC,QAAQ,CAAC;SACd;QAAC,OAAO,KAAK,EAAE;YACd,GAAG,CACD,gBAAgB,EAChB,KAAK,EACL,IAAI,EACJ,mBAAU,CAAC,IAAI,CAAC,EAChB,MAAM,EACN,IAAI,CAAC,OAAO,CACb,CAAC;YACF,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CACF;AA/ID,6BA+IC","sourcesContent":["import * as crypto from \"crypto\";\nimport debug from \"debug\";\n\nimport { dumpBuffer, getObjectSummary } from \"../../helper\";\nimport { prfEncryptionKeys } from \"../prf\";\nimport Cipher, { CipherHeader, SessionType, SessionTypes } from \"./abstract\";\nconst {\n  createDecode,\n  encode,\n  types: { uint8, uint16be, uint48be },\n} = require(\"binary-data\");\n\nconst ContentType = uint8;\nconst ProtocolVersion = uint16be;\n\nconst AEADAdditionalData = {\n  epoch: uint16be,\n  sequence: uint48be,\n  type: ContentType,\n  version: ProtocolVersion,\n  length: uint16be,\n};\n\nconst err = debug(\n  \"werift-dtls : packages/dtls/src/cipher/suites/aead.ts : err\"\n);\n\n/**\n * This class implements AEAD cipher family.\n */\nexport default class AEADCipher extends Cipher {\n  keyLength = 0;\n  nonceLength = 0;\n  ivLength = 0;\n  authTagLength = 0;\n\n  nonceImplicitLength = 0;\n  nonceExplicitLength = 0;\n\n  clientWriteKey?: Buffer;\n  serverWriteKey?: Buffer;\n\n  clientNonce?: Buffer;\n  serverNonce?: Buffer;\n\n  constructor() {\n    super();\n  }\n\n  get summary() {\n    return getObjectSummary(this);\n  }\n\n  init(masterSecret: Buffer, serverRandom: Buffer, clientRandom: Buffer) {\n    const keys = prfEncryptionKeys(\n      masterSecret,\n      clientRandom,\n      serverRandom,\n      this.keyLength,\n      this.ivLength,\n      this.nonceLength,\n      this.hashAlgorithm\n    );\n\n    this.clientWriteKey = keys.clientWriteKey;\n    this.serverWriteKey = keys.serverWriteKey;\n    this.clientNonce = keys.clientNonce;\n    this.serverNonce = keys.serverNonce;\n  }\n\n  /**\n   * Encrypt message.\n   */\n  encrypt(type: SessionTypes, data: Buffer, header: CipherHeader) {\n    const isClient = type === SessionType.CLIENT;\n    const iv = isClient ? this.clientNonce : this.serverNonce;\n    const writeKey = isClient ? this.clientWriteKey : this.serverWriteKey;\n    if (!iv || !writeKey) throw new Error();\n\n    iv.writeUInt16BE(header.epoch, this.nonceImplicitLength);\n    iv.writeUIntBE(header.sequenceNumber, this.nonceImplicitLength + 2, 6);\n\n    const explicitNonce = iv.slice(this.nonceImplicitLength);\n\n    const additionalData = {\n      epoch: header.epoch,\n      sequence: header.sequenceNumber,\n      type: header.type,\n      version: header.version,\n      length: data.length,\n    };\n\n    const additionalBuffer = encode(additionalData, AEADAdditionalData).slice();\n\n    const cipher = crypto.createCipheriv(\n      this.blockAlgorithm as crypto.CipherCCMTypes,\n      writeKey,\n      iv,\n      {\n        authTagLength: this.authTagLength,\n      }\n    );\n\n    cipher.setAAD(additionalBuffer, {\n      plaintextLength: data.length,\n    });\n\n    const headPart = cipher.update(data);\n    const finalPart = cipher.final();\n    const authTag = cipher.getAuthTag();\n\n    return Buffer.concat([explicitNonce, headPart, finalPart, authTag]);\n  }\n\n  /**\n   * Decrypt message.\n   */\n  decrypt(type: SessionTypes, data: Buffer, header: CipherHeader) {\n    const isClient = type === SessionType.CLIENT;\n    const iv = isClient ? this.serverNonce : this.clientNonce;\n    const writeKey = isClient ? this.serverWriteKey : this.clientWriteKey;\n    if (!iv || !writeKey) throw new Error();\n\n    const final = createDecode(data);\n\n    const explicitNonce = final.readBuffer(this.nonceExplicitLength);\n    explicitNonce.copy(iv, this.nonceImplicitLength);\n\n    const encrypted = final.readBuffer(final.length - this.authTagLength);\n    const authTag = final.readBuffer(this.authTagLength);\n\n    const additionalData = {\n      epoch: header.epoch,\n      sequence: header.sequenceNumber,\n      type: header.type,\n      version: header.version,\n      length: encrypted.length,\n    };\n\n    const additionalBuffer = encode(additionalData, AEADAdditionalData).slice();\n\n    const decipher = crypto.createDecipheriv(\n      this.blockAlgorithm as crypto.CipherCCMTypes,\n      writeKey,\n      iv,\n      {\n        authTagLength: this.authTagLength,\n      }\n    );\n\n    decipher.setAuthTag(authTag);\n    decipher.setAAD(additionalBuffer, {\n      plaintextLength: encrypted.length,\n    });\n\n    const headPart = decipher.update(encrypted);\n    try {\n      const finalPart = decipher.final();\n      return finalPart.length > 0\n        ? Buffer.concat([headPart, finalPart])\n        : headPart;\n    } catch (error) {\n      err(\n        \"decrypt failed\",\n        error,\n        type,\n        dumpBuffer(data),\n        header,\n        this.summary\n      );\n      throw error;\n    }\n  }\n}\n"]}