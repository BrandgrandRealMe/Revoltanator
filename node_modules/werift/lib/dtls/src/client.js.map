{"version":3,"file":"client.js","sourceRoot":"","sources":["../../../../dtls/src/client.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\n\nimport { SessionType } from \"./cipher/suites/abstract\";\nimport { Flight1 } from \"./flight/client/flight1\";\nimport { Flight3 } from \"./flight/client/flight3\";\nimport { Flight5 } from \"./flight/client/flight5\";\nimport { HandshakeType } from \"./handshake/const\";\nimport { ServerHelloVerifyRequest } from \"./handshake/message/server/helloVerifyRequest\";\nimport { FragmentedHandshake } from \"./record/message/fragment\";\nimport { DtlsSocket, Options } from \"./socket\";\n\nconst log = debug(\"werift-dtls : packages/dtls/src/client.ts : log\");\n\nexport class DtlsClient extends DtlsSocket {\n  constructor(options: Options) {\n    super(options, SessionType.CLIENT);\n    this.onHandleHandshakes = this.handleHandshakes;\n    log(this.dtls.sessionId, \"start client\");\n  }\n\n  async connect() {\n    await new Flight1(this.transport, this.dtls, this.cipher).exec(\n      this.extensions\n    );\n  }\n\n  private flight5?: Flight5;\n  private handleHandshakes = async (assembled: FragmentedHandshake[]) => {\n    log(\n      this.dtls.sessionId,\n      \"handleHandshakes\",\n      assembled.map((a) => a.msg_type)\n    );\n\n    for (const handshake of assembled) {\n      switch (handshake.msg_type) {\n        // flight2\n        case HandshakeType.hello_verify_request_3:\n          {\n            const verifyReq = ServerHelloVerifyRequest.deSerialize(\n              handshake.fragment\n            );\n            await new Flight3(this.transport, this.dtls).exec(verifyReq);\n          }\n          break;\n        // flight 4\n        case HandshakeType.server_hello_2:\n          {\n            if (this.connected) return;\n            this.flight5 = new Flight5(\n              this.transport,\n              this.dtls,\n              this.cipher,\n              this.srtp\n            );\n            this.flight5.handleHandshake(handshake);\n          }\n          break;\n        case HandshakeType.certificate_11:\n        case HandshakeType.server_key_exchange_12:\n        case HandshakeType.certificate_request_13:\n          {\n            await this.waitForReady(() => !!this.flight5);\n            this.flight5?.handleHandshake(handshake);\n          }\n          break;\n        case HandshakeType.server_hello_done_14:\n          {\n            await this.waitForReady(() => !!this.flight5);\n            this.flight5?.handleHandshake(handshake);\n\n            const targets = [\n              11,\n              12,\n              this.options.certificateRequest && 13,\n            ].filter((n): n is number => typeof n === \"number\");\n            await this.waitForReady(() =>\n              this.dtls.checkHandshakesExist(targets)\n            );\n            await this.flight5?.exec();\n          }\n          break;\n        // flight 6\n        case HandshakeType.finished_20:\n          {\n            this.dtls.flight = 7;\n            this.connected = true;\n            this.onConnect.execute();\n            log(this.dtls.sessionId, \"dtls connected\");\n          }\n          break;\n      }\n    }\n  };\n}\n"]}