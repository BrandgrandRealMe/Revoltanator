{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../../dtls/src/server.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\n\nimport { SessionType } from \"./cipher/suites/abstract\";\nimport { flight2 } from \"./flight/server/flight2\";\nimport { Flight4 } from \"./flight/server/flight4\";\nimport { Flight6 } from \"./flight/server/flight6\";\nimport { HandshakeType } from \"./handshake/const\";\nimport { ClientHello } from \"./handshake/message/client/hello\";\nimport { FragmentedHandshake } from \"./record/message/fragment\";\nimport { DtlsSocket, Options } from \"./socket\";\n\nconst log = debug(\"werift-dtls : packages/dtls/src/server.ts : log\");\n\nexport class DtlsServer extends DtlsSocket {\n  constructor(options: Options) {\n    super(options, SessionType.SERVER);\n    this.onHandleHandshakes = this.handleHandshakes;\n    log(this.dtls.sessionId, \"start server\");\n  }\n\n  private flight6?: Flight6;\n  private handleHandshakes = async (assembled: FragmentedHandshake[]) => {\n    log(\n      this.dtls.sessionId,\n      \"handleHandshakes\",\n      assembled.map((a) => a.msg_type)\n    );\n\n    for (const handshake of assembled) {\n      switch (handshake.msg_type) {\n        // flight1,3\n        case HandshakeType.client_hello_1:\n          {\n            const clientHello = ClientHello.deSerialize(handshake.fragment);\n\n            if (\n              this.dtls.cookie &&\n              clientHello.cookie.equals(this.dtls.cookie)\n            ) {\n              log(this.dtls.sessionId, \"send flight4\");\n              await new Flight4(\n                this.transport,\n                this.dtls,\n                this.cipher,\n                this.srtp\n              ).exec(handshake, this.options.certificateRequest);\n            } else if (!this.dtls.sessionId) {\n              log(this.dtls.sessionId, \"send flight2\");\n              flight2(\n                this.transport,\n                this.dtls,\n                this.cipher,\n                this.srtp\n              )(clientHello);\n            }\n          }\n          break;\n        // flight 5\n        case HandshakeType.client_key_exchange_16:\n          {\n            if (this.connected) return;\n            this.flight6 = new Flight6(this.transport, this.dtls, this.cipher);\n            this.flight6.handleHandshake(handshake);\n          }\n          break;\n        case HandshakeType.finished_20:\n          {\n            await this.waitForReady(() => !!this.flight6);\n            this.flight6?.handleHandshake(handshake);\n\n            await this.waitForReady(() => this.dtls.checkHandshakesExist([16]));\n            await this.flight6?.exec();\n\n            this.connected = true;\n            this.onConnect.execute();\n            log(this.dtls.sessionId, \"dtls connected\");\n          }\n          break;\n      }\n    }\n  };\n}\n"]}