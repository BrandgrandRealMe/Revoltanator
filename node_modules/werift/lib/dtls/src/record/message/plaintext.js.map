{"version":3,"file":"plaintext.js","sourceRoot":"","sources":["../../../../../../dtls/src/record/message/plaintext.ts"],"names":[],"mappings":";;;AAAA,sDAAsD;AACtD,6CAAoD;AAEpD,yCAA0C;AAC1C,qCAA0D;AAE1D,MAAa,aAAa;IAQxB,YACS,iBAA8D,EAC9D,QAAgB;QADhB,sBAAiB,GAAjB,iBAAiB,CAA6C;QAC9D,aAAQ,GAAR,QAAQ,CAAQ;IACtB,CAAC;IAEJ,IAAI,OAAO;QACT,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,iBAAiB;YAC9B,QAAQ,EAAE,mBAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;SACpC,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,WAAW;QAChB,OAAO,IAAI,aAAa,CAAC,SAAgB,EAAE,SAAgB,CAAC,CAAC;IAC/D,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,MAAM,CAAC,GAAG,IAAI,aAAa;QACzB,YAAY;QACZ,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAM,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC,CAClD,CAAC;QACF,OAAO,CAAC,CAAC;IACX,CAAC;IAED,SAAS;QACP,MAAM,GAAG,GAAG,oBAAM,CAAC,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;QACrD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,kBAAS,CAClB,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAC5B,IAAI,CAAC,iBAAiB,CAAC,cAAc,EACrC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAClC,IAAI,CAAC,iBAAiB,CAAC,eAAe,EACtC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAClC,CAAC,SAAS,EAAE,CAAC;IAChB,CAAC;;AA7CH,sCA8CC;AA7CiB,kBAAI,GAAG;IACrB,iBAAiB,EAAE,4BAAmB,CAAC,IAAI;IAC3C,QAAQ,EAAE,mBAAK,CAAC,MAAM,CACpB,CAAC,OAAY,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,UAAU,CAC/D;CACF,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { decode, encode, types } from \"binary-data\";\n\nimport { dumpBuffer } from \"../../helper\";\nimport { DtlsPlaintextHeader, MACHeader } from \"./header\";\n\nexport class DtlsPlaintext {\n  static readonly spec = {\n    recordLayerHeader: DtlsPlaintextHeader.spec,\n    fragment: types.buffer(\n      (context: any) => context.current.recordLayerHeader.contentLen\n    ),\n  };\n\n  constructor(\n    public recordLayerHeader: typeof DtlsPlaintext.spec.recordLayerHeader,\n    public fragment: Buffer\n  ) {}\n\n  get summary() {\n    return {\n      header: this.recordLayerHeader,\n      fragment: dumpBuffer(this.fragment),\n    };\n  }\n\n  static createEmpty() {\n    return new DtlsPlaintext(undefined as any, undefined as any);\n  }\n\n  static deSerialize(buf: Buffer) {\n    const r = new DtlsPlaintext(\n      //@ts-ignore\n      ...Object.values(decode(buf, DtlsPlaintext.spec))\n    );\n    return r;\n  }\n\n  serialize() {\n    const res = encode(this, DtlsPlaintext.spec).slice();\n    return Buffer.from(res);\n  }\n\n  computeMACHeader() {\n    return new MACHeader(\n      this.recordLayerHeader.epoch,\n      this.recordLayerHeader.sequenceNumber,\n      this.recordLayerHeader.contentType,\n      this.recordLayerHeader.protocolVersion,\n      this.recordLayerHeader.contentLen\n    ).serialize();\n  }\n}\n"]}