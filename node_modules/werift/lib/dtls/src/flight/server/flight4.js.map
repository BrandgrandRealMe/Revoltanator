{"version":3,"file":"flight4.js","sourceRoot":"","sources":["../../../../../../dtls/src/flight/server/flight4.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\n\nimport {\n  CurveType,\n  HashAlgorithm,\n  SignatureAlgorithm,\n} from \"../../cipher/const\";\nimport { CipherContext } from \"../../context/cipher\";\nimport { DtlsContext } from \"../../context/dtls\";\nimport { SrtpContext } from \"../../context/srtp\";\nimport { TransportContext } from \"../../context/transport\";\nimport { ExtendedMasterSecret } from \"../../handshake/extensions/extendedMasterSecret\";\nimport { RenegotiationIndication } from \"../../handshake/extensions/renegotiationIndication\";\nimport { UseSRTP } from \"../../handshake/extensions/useSrtp\";\nimport { Certificate } from \"../../handshake/message/certificate\";\nimport { ServerCertificateRequest } from \"../../handshake/message/server/certificateRequest\";\nimport { ServerHello } from \"../../handshake/message/server/hello\";\nimport { ServerHelloDone } from \"../../handshake/message/server/helloDone\";\nimport { ServerKeyExchange } from \"../../handshake/message/server/keyExchange\";\nimport { FragmentedHandshake } from \"../../record/message/fragment\";\nimport { Extension } from \"../../typings/domain\";\nimport { Flight } from \"../flight\";\n\nconst log = debug(\"werift-dtls : packages/dtls/flight/server/flight4.ts : log\");\n\nexport class Flight4 extends Flight {\n  constructor(\n    udp: TransportContext,\n    dtls: DtlsContext,\n    private cipher: CipherContext,\n    private srtp: SrtpContext\n  ) {\n    super(udp, dtls, 4, 6);\n  }\n\n  async exec(\n    clientHello: FragmentedHandshake,\n    certificateRequest: boolean = false\n  ) {\n    if (this.dtls.flight === 4) {\n      log(this.dtls.sessionId, \"flight4 twice\");\n      this.send(this.dtls.lastMessage);\n      return;\n    }\n    this.dtls.flight = 4;\n    this.dtls.sequenceNumber = 1;\n    this.dtls.bufferHandshakeCache([clientHello], false, 4);\n\n    const messages = [\n      this.sendServerHello(),\n      this.sendCertificate(),\n      this.sendServerKeyExchange(),\n      certificateRequest && this.sendCertificateRequest(),\n      this.sendServerHelloDone(),\n    ].filter((v) => v) as Buffer[];\n\n    this.dtls.lastMessage = messages;\n    await this.transmit(messages);\n  }\n\n  private sendServerHello() {\n    // todo fix; should use socket.extensions\n    const extensions: Extension[] = [];\n    if (this.srtp.srtpProfile) {\n      extensions.push(\n        UseSRTP.create([this.srtp.srtpProfile], Buffer.from([0x00])).extension\n      );\n    }\n    if (this.dtls.options.extendedMasterSecret) {\n      extensions.push({\n        type: ExtendedMasterSecret.type,\n        data: Buffer.alloc(0),\n      });\n    }\n    const renegotiationIndication = RenegotiationIndication.createEmpty();\n    extensions.push(renegotiationIndication.extension);\n\n    const serverHello = new ServerHello(\n      this.dtls.version,\n      this.cipher.localRandom,\n      Buffer.from([0x00]),\n      this.cipher.cipherSuite,\n      0, // do not compression\n      extensions\n    );\n    const packets = this.createPacket([serverHello]);\n    return Buffer.concat(packets.map((v) => v.serialize()));\n  }\n\n  // 7.4.2 Server Certificate\n  private sendCertificate() {\n    const certificate = new Certificate([Buffer.from(this.cipher.localCert)]);\n\n    const packets = this.createPacket([certificate]);\n    return Buffer.concat(packets.map((v) => v.serialize()));\n  }\n\n  private sendServerKeyExchange() {\n    const signature = this.cipher.generateKeySignature(\"sha256\");\n    if (!this.cipher.signatureHashAlgorithm) throw new Error(\"not exist\");\n\n    const keyExchange = new ServerKeyExchange(\n      CurveType.named_curve,\n      this.cipher.namedCurve,\n      this.cipher.localKeyPair.publicKey.length,\n      this.cipher.localKeyPair.publicKey,\n      this.cipher.signatureHashAlgorithm.hash,\n      this.cipher.signatureHashAlgorithm.signature,\n      signature.length,\n      signature\n    );\n\n    const packets = this.createPacket([keyExchange]);\n    return Buffer.concat(packets.map((v) => v.serialize()));\n  }\n\n  // 7.4.4.  Certificate Request\n  private sendCertificateRequest() {\n    const handshake = new ServerCertificateRequest(\n      [\n        1, // clientCertificateTypeRSASign\n        64, // clientCertificateTypeECDSASign\n      ],\n      [\n        { hash: HashAlgorithm.sha256, signature: SignatureAlgorithm.rsa },\n        { hash: HashAlgorithm.sha256, signature: SignatureAlgorithm.ecdsa },\n      ],\n      []\n    );\n    log(this.dtls.sessionId, \"sendCertificateRequest\", handshake);\n    const packets = this.createPacket([handshake]);\n    return Buffer.concat(packets.map((v) => v.serialize()));\n  }\n\n  private sendServerHelloDone() {\n    const handshake = new ServerHelloDone();\n\n    const packets = this.createPacket([handshake]);\n    return Buffer.concat(packets.map((v) => v.serialize()));\n  }\n}\n"]}