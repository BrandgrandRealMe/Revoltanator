"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Flight = void 0;
const debug_1 = __importDefault(require("debug"));
const promises_1 = require("timers/promises");
const builder_1 = require("../record/builder");
const const_1 = require("../record/const");
const warn = debug_1.default("werift-dtls : packages/dtls/src/flight/flight.ts : warn");
const err = debug_1.default("werift-dtls : packages/dtls/src/flight/flight.ts : err");
const flightTypes = ["PREPARING", "SENDING", "WAITING", "FINISHED"];
class Flight {
    constructor(transport, dtls, flight, nextFlight) {
        this.transport = transport;
        this.dtls = dtls;
        this.flight = flight;
        this.nextFlight = nextFlight;
        this.state = "PREPARING";
        this.send = (buf) => Promise.all(buf.map((v) => this.transport.send(v)));
    }
    createPacket(handshakes) {
        const fragments = builder_1.createFragments(this.dtls)(handshakes);
        this.dtls.bufferHandshakeCache(fragments, true, this.flight);
        const packets = builder_1.createPlaintext(this.dtls)(fragments.map((fragment) => ({
            type: const_1.ContentType.handshake,
            fragment: fragment.serialize(),
        })), ++this.dtls.recordSequenceNumber);
        return packets;
    }
    async transmit(buffers) {
        let retransmitCount = 0;
        for (; retransmitCount <= Flight.RetransmitCount; retransmitCount++) {
            this.setState("SENDING");
            this.send(buffers);
            this.setState("WAITING");
            if (this.nextFlight === undefined) {
                this.setState("FINISHED");
                break;
            }
            await promises_1.setTimeout(1000 * ((retransmitCount + 1) / 2));
            if (this.dtls.flight >= this.nextFlight) {
                this.setState("FINISHED");
                break;
            }
            else {
                warn(this.dtls.sessionId, "retransmit", retransmitCount, this.dtls.flight);
            }
        }
        if (retransmitCount > Flight.RetransmitCount) {
            err(this.dtls.sessionId, "retransmit failed", retransmitCount);
            throw new Error(`over retransmitCount : ${this.flight} ${this.nextFlight}`);
        }
    }
    setState(state) {
        this.state = state;
    }
}
exports.Flight = Flight;
Flight.RetransmitCount = 10;
//# sourceMappingURL=flight.js.map