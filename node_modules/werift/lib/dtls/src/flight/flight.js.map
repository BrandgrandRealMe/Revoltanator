{"version":3,"file":"flight.js","sourceRoot":"","sources":["../../../../../dtls/src/flight/flight.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { setTimeout } from \"timers/promises\";\n\nimport { DtlsContext } from \"../context/dtls\";\nimport { TransportContext } from \"../context/transport\";\nimport { createFragments, createPlaintext } from \"../record/builder\";\nimport { ContentType } from \"../record/const\";\nimport { Handshake } from \"../typings/domain\";\n\nconst warn = debug(\"werift-dtls : packages/dtls/src/flight/flight.ts : warn\");\nconst err = debug(\"werift-dtls : packages/dtls/src/flight/flight.ts : err\");\n\nconst flightTypes = [\"PREPARING\", \"SENDING\", \"WAITING\", \"FINISHED\"] as const;\n\ntype FlightType = typeof flightTypes[number];\n\nexport abstract class Flight {\n  state: FlightType = \"PREPARING\";\n  static RetransmitCount = 10;\n\n  constructor(\n    private transport: TransportContext,\n    public dtls: DtlsContext,\n    private flight: number,\n    private nextFlight?: number\n  ) {}\n\n  protected createPacket(handshakes: Handshake[]) {\n    const fragments = createFragments(this.dtls)(handshakes);\n    this.dtls.bufferHandshakeCache(fragments, true, this.flight);\n    const packets = createPlaintext(this.dtls)(\n      fragments.map((fragment) => ({\n        type: ContentType.handshake,\n        fragment: fragment.serialize(),\n      })),\n      ++this.dtls.recordSequenceNumber\n    );\n    return packets;\n  }\n\n  protected async transmit(buffers: Buffer[]) {\n    let retransmitCount = 0;\n    for (; retransmitCount <= Flight.RetransmitCount; retransmitCount++) {\n      this.setState(\"SENDING\");\n      this.send(buffers);\n      this.setState(\"WAITING\");\n\n      if (this.nextFlight === undefined) {\n        this.setState(\"FINISHED\");\n        break;\n      }\n\n      await setTimeout(1000 * ((retransmitCount + 1) / 2));\n\n      if (this.dtls.flight >= this.nextFlight) {\n        this.setState(\"FINISHED\");\n        break;\n      } else {\n        warn(\n          this.dtls.sessionId,\n          \"retransmit\",\n          retransmitCount,\n          this.dtls.flight\n        );\n      }\n    }\n\n    if (retransmitCount > Flight.RetransmitCount) {\n      err(this.dtls.sessionId, \"retransmit failed\", retransmitCount);\n      throw new Error(\n        `over retransmitCount : ${this.flight} ${this.nextFlight}`\n      );\n    }\n  }\n\n  protected send = (buf: Buffer[]) =>\n    Promise.all(buf.map((v) => this.transport.send(v)));\n\n  private setState(state: FlightType) {\n    this.state = state;\n  }\n}\n"]}