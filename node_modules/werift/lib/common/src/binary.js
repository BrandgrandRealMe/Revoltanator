"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bufferReader = exports.bufferWriter = exports.paddingByte = exports.getBit = exports.BitWriter = exports.random32 = exports.random16 = void 0;
const crypto_1 = require("crypto");
const jspack_1 = require("jspack");
function random16() {
    return jspack_1.jspack.Unpack("!H", crypto_1.randomBytes(2))[0];
}
exports.random16 = random16;
function random32() {
    return BigInt(jspack_1.jspack.Unpack("!L", crypto_1.randomBytes(4))[0]);
}
exports.random32 = random32;
class BitWriter {
    constructor(bitLength) {
        this.bitLength = bitLength;
        this.value = 0;
    }
    set(size, startIndex, value) {
        value &= (1 << size) - 1;
        this.value |= value << (this.bitLength - size - startIndex);
        return this;
    }
}
exports.BitWriter = BitWriter;
function getBit(bits, startIndex, length = 1) {
    let bin = bits.toString(2).split("");
    bin = [...Array(8 - bin.length).fill("0"), ...bin];
    const s = bin.slice(startIndex, startIndex + length).join("");
    const v = parseInt(s, 2);
    return v;
}
exports.getBit = getBit;
function paddingByte(bits) {
    const dec = bits.toString(2).split("");
    return [...[...Array(8 - dec.length)].map(() => "0"), ...dec].join("");
}
exports.paddingByte = paddingByte;
function bufferWriter(bytes, values) {
    const length = bytes.reduce((acc, cur) => acc + cur, 0);
    const buf = Buffer.alloc(length);
    let offset = 0;
    values.forEach((v, i) => {
        const size = bytes[i];
        if (size === 8)
            buf.writeBigUInt64BE(v, offset);
        else
            buf.writeUIntBE(v, offset, size);
        offset += size;
    });
    return buf;
}
exports.bufferWriter = bufferWriter;
function bufferReader(buf, bytes) {
    let offset = 0;
    return bytes.map((v) => {
        let read;
        if (v === 8) {
            read = buf.readBigUInt64BE(offset);
        }
        else {
            read = buf.readUIntBE(offset, v);
        }
        offset += v;
        return read;
    });
}
exports.bufferReader = bufferReader;
//# sourceMappingURL=binary.js.map