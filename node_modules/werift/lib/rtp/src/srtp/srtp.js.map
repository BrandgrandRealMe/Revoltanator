{"version":3,"file":"srtp.js","sourceRoot":"","sources":["../../../../../rtp/src/srtp/srtp.ts"],"names":[],"mappings":";;;AACA,yCAA6C;AAC7C,uCAA4C;AAE5C,MAAa,WAAY,SAAQ,iBAAoB;IACnD,YAAmB,MAAc;QAC/B,KAAK,CAAC,kBAAW,CAAC,CAAC;QADF,WAAM,GAAN,MAAM,CAAQ;QAWjC,YAAO,GAAG,CAAC,GAAW,EAAE,EAAE;YACxB,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACvD,OAAO,SAAS,CAAC;QACnB,CAAC,CAAC;QAZA,IAAI,CAAC,KAAK,CACR,MAAM,CAAC,IAAI,CAAC,cAAc,EAC1B,MAAM,CAAC,IAAI,CAAC,eAAe,EAC3B,MAAM,CAAC,IAAI,CAAC,eAAe,EAC3B,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAC5B,MAAM,CAAC,OAAO,CACf,CAAC;IACJ,CAAC;IAOD,OAAO,CAAC,OAAe,EAAE,MAAiB;QACxC,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACvD,CAAC;CACF;AApBD,kCAoBC","sourcesContent":["import { RtpHeader } from \"../rtp/rtp\";\nimport { SrtpContext } from \"./context/srtp\";\nimport { Config, Session } from \"./session\";\n\nexport class SrtpSession extends Session<SrtpContext> {\n  constructor(public config: Config) {\n    super(SrtpContext);\n    this.start(\n      config.keys.localMasterKey,\n      config.keys.localMasterSalt,\n      config.keys.remoteMasterKey,\n      config.keys.remoteMasterSalt,\n      config.profile\n    );\n  }\n\n  decrypt = (buf: Buffer) => {\n    const [decrypted] = this.remoteContext.decryptRtp(buf);\n    return decrypted;\n  };\n\n  encrypt(payload: Buffer, header: RtpHeader) {\n    return this.localContext.encryptRtp(payload, header);\n  }\n}\n"]}