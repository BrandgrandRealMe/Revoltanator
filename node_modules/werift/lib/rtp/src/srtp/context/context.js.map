{"version":3,"file":"context.js","sourceRoot":"","sources":["../../../../../../rtp/src/srtp/context/context.ts"],"names":[],"mappings":"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","sourcesContent":["import { AES } from \"aes-js\";\nimport { createHmac, Hmac } from \"crypto\";\n\nimport { CipherAesBase } from \"../cipher\";\nimport { CipherAesCtr } from \"../cipher/ctr\";\nimport { CipherAesGcm } from \"../cipher/gcm\";\nimport {\n  Profile,\n  ProtectionProfileAeadAes128Gcm,\n  ProtectionProfileAes128CmHmacSha1_80,\n} from \"../const\";\n\nexport class Context {\n  srtpSSRCStates: { [ssrc: number]: SrtpSsrcState } = {};\n  srtpSessionKey: Buffer;\n  srtpSessionSalt: Buffer;\n  srtpSessionAuthTag: Buffer;\n  srtpSessionAuth: Hmac;\n  srtcpSSRCStates: { [ssrc: number]: SrtcpSSRCState } = {};\n  srtcpSessionKey: Buffer;\n  srtcpSessionSalt: Buffer;\n  srtcpSessionAuthTag: Buffer;\n  srtcpSessionAuth: Hmac;\n\n  cipher: CipherAesBase;\n\n  constructor(\n    public masterKey: Buffer,\n    public masterSalt: Buffer,\n    public profile: Profile\n  ) {\n    {\n      // aes-js plaintext require 16byte\n      // so need to padding to 14 byte\n      const diff = 14 - masterSalt.length;\n      if (diff > 0) {\n        this.masterSalt = Buffer.concat([masterSalt, Buffer.alloc(diff)]);\n      }\n    }\n\n    this.srtpSessionKey = this.generateSessionKey(0);\n    this.srtpSessionSalt = this.generateSessionSalt(2);\n    this.srtpSessionAuthTag = this.generateSessionAuthTag(1);\n    this.srtpSessionAuth = createHmac(\"sha1\", this.srtpSessionAuthTag);\n\n    this.srtcpSessionKey = this.generateSessionKey(3);\n    this.srtcpSessionSalt = this.generateSessionSalt(5);\n    this.srtcpSessionAuthTag = this.generateSessionAuthTag(4);\n    this.srtcpSessionAuth = createHmac(\"sha1\", this.srtcpSessionAuthTag);\n\n    switch (profile) {\n      case ProtectionProfileAes128CmHmacSha1_80:\n        this.cipher = new CipherAesCtr(\n          this.srtpSessionKey,\n          this.srtpSessionSalt,\n          this.srtcpSessionKey,\n          this.srtcpSessionSalt,\n          this.srtpSessionAuthTag,\n          this.srtcpSessionAuthTag\n        );\n        break;\n      case ProtectionProfileAeadAes128Gcm:\n        this.cipher = new CipherAesGcm(\n          this.srtpSessionKey,\n          this.srtpSessionSalt,\n          this.srtcpSessionKey,\n          this.srtcpSessionSalt\n        );\n        break;\n    }\n  }\n\n  generateSessionKey(label: number) {\n    let sessionKey = Buffer.from(this.masterSalt);\n\n    const labelAndIndexOverKdr = Buffer.from([\n      label,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n    ]);\n    for (\n      let i = labelAndIndexOverKdr.length - 1, j = sessionKey.length - 1;\n      i >= 0;\n      i--, j--\n    ) {\n      sessionKey[j] = sessionKey[j] ^ labelAndIndexOverKdr[i];\n    }\n\n    sessionKey = Buffer.concat([sessionKey, Buffer.from([0x00, 0x00])]);\n    const block = new AES(this.masterKey);\n    return Buffer.from(block.encrypt(sessionKey) as ArrayBuffer);\n  }\n\n  generateSessionSalt(label: number) {\n    let sessionSalt = Buffer.from(this.masterSalt);\n    const labelAndIndexOverKdr = Buffer.from([\n      label,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n    ]);\n    for (\n      let i = labelAndIndexOverKdr.length - 1, j = sessionSalt.length - 1;\n      i >= 0;\n      i--, j--\n    ) {\n      sessionSalt[j] = sessionSalt[j] ^ labelAndIndexOverKdr[i];\n    }\n    sessionSalt = Buffer.concat([sessionSalt, Buffer.from([0x00, 0x00])]);\n    const block = new AES(this.masterKey);\n    sessionSalt = Buffer.from(block.encrypt(sessionSalt) as ArrayBuffer);\n    return sessionSalt.slice(0, 14);\n  }\n\n  generateSessionAuthTag(label: number) {\n    const sessionAuthTag = Buffer.from(this.masterSalt);\n    const labelAndIndexOverKdr = Buffer.from([\n      label,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n    ]);\n    for (\n      let i = labelAndIndexOverKdr.length - 1, j = sessionAuthTag.length - 1;\n      i >= 0;\n      i--, j--\n    ) {\n      sessionAuthTag[j] = sessionAuthTag[j] ^ labelAndIndexOverKdr[i];\n    }\n    let firstRun = Buffer.concat([sessionAuthTag, Buffer.from([0x00, 0x00])]);\n    let secondRun = Buffer.concat([sessionAuthTag, Buffer.from([0x00, 0x01])]);\n    const block = new AES(this.masterKey);\n    firstRun = Buffer.from(block.encrypt(firstRun) as ArrayBuffer);\n    secondRun = Buffer.from(block.encrypt(secondRun) as ArrayBuffer);\n    return Buffer.concat([firstRun, secondRun.slice(0, 4)]);\n  }\n\n  getSrtpSsrcState(ssrc: number) {\n    let s = this.srtpSSRCStates[ssrc];\n    if (s) return s;\n    s = {\n      ssrc,\n      rolloverCounter: 0,\n      lastSequenceNumber: 0,\n    };\n    this.srtpSSRCStates[ssrc] = s;\n    return s;\n  }\n\n  getSrtcpSsrcState(ssrc: number) {\n    let s = this.srtcpSSRCStates[ssrc];\n    if (s) return s;\n    s = {\n      srtcpIndex: 0,\n      ssrc,\n    };\n    this.srtcpSSRCStates[ssrc] = s;\n    return s;\n  }\n\n  // 3.3.1.  Packet Index Determination, and ROC, s_l Update\n  // In particular, out-of-order RTP packets with\n  // sequence numbers close to 2^16 or zero must be properly handled.\n  updateRolloverCount(sequenceNumber: number, s: SrtpSsrcState) {\n    if (!s.rolloverHasProcessed) {\n      s.rolloverHasProcessed = true;\n    } else if (sequenceNumber === 0) {\n      if (s.lastSequenceNumber > MaxROCDisorder) {\n        s.rolloverCounter++;\n      }\n    } else if (\n      s.lastSequenceNumber < MaxROCDisorder &&\n      sequenceNumber > MaxSequenceNumber - MaxROCDisorder\n    ) {\n      // https://github.com/shinyoshiaki/werift-webrtc/issues/94\n      if (s.rolloverCounter > 0) {\n        s.rolloverCounter--;\n      }\n    } else if (\n      sequenceNumber < MaxROCDisorder &&\n      s.lastSequenceNumber > MaxSequenceNumber - MaxROCDisorder\n    ) {\n      s.rolloverCounter++;\n    }\n    s.lastSequenceNumber = sequenceNumber;\n  }\n\n  generateSrtpAuthTag(buf: Buffer, roc: number) {\n    this.srtpSessionAuth = createHmac(\"sha1\", this.srtpSessionAuthTag);\n    const rocRaw = Buffer.alloc(4);\n    rocRaw.writeUInt32BE(roc);\n\n    return this.srtpSessionAuth\n      .update(buf)\n      .update(rocRaw)\n      .digest()\n      .slice(0, 10);\n  }\n\n  index(ssrc: number) {\n    const s = this.srtcpSSRCStates[ssrc];\n    if (!s) {\n      return 0;\n    }\n    return s.srtcpIndex;\n  }\n\n  setIndex(ssrc: number, index: number) {\n    const s = this.getSrtcpSsrcState(ssrc);\n    s.srtcpIndex = index % 0x7fffffff;\n  }\n}\n\nexport interface SrtpSsrcState {\n  ssrc: number;\n  rolloverCounter: number;\n  rolloverHasProcessed?: boolean;\n  lastSequenceNumber: number;\n}\n\nexport type SrtcpSSRCState = {\n  srtcpIndex: number;\n  ssrc: number;\n};\n\nconst MaxROCDisorder = 100;\nconst MaxSequenceNumber = 65535;\n"]}