{"version":3,"file":"srtcp.js","sourceRoot":"","sources":["../../../../../../rtp/src/srtp/context/srtcp.ts"],"names":[],"mappings":";;;AAEA,uCAAoC;AAEpC,MAAa,YAAa,SAAQ,iBAAO;IACvC,YAAY,SAAiB,EAAE,UAAkB,EAAE,OAAgB;QACjE,KAAK,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,WAAW,CAAC,OAAe;QACzB,MAAM,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,UAAU,EAAE,CAAC;QACf,IAAI,CAAC,CAAC,UAAU,IAAI,aAAa,EAAE;YACjC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC;SAClB;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC;QAC3D,OAAO,GAAG,CAAC;IACb,CAAC;IAED,WAAW,CAAC,SAAiB;QAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QAC/C,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AApBD,oCAoBC;AAED,MAAM,aAAa,GAAG,UAAU,CAAC","sourcesContent":["import { RtcpHeader } from \"../../rtcp/header\";\nimport { Profile } from \"../const\";\nimport { Context } from \"./context\";\n\nexport class SrtcpContext extends Context {\n  constructor(masterKey: Buffer, masterSalt: Buffer, profile: Profile) {\n    super(masterKey, masterSalt, profile);\n  }\n\n  encryptRTCP(rawRtcp: Buffer) {\n    const ssrc = rawRtcp.readUInt32BE(4);\n    const s = this.getSrtcpSsrcState(ssrc);\n    s.srtcpIndex++;\n    if (s.srtcpIndex >> maxSRTCPIndex) {\n      s.srtcpIndex = 0;\n    }\n    const enc = this.cipher.encryptRTCP(rawRtcp, s.srtcpIndex);\n    return enc;\n  }\n\n  decryptRTCP(encrypted: Buffer): [Buffer, RtcpHeader] {\n    const dec = this.cipher.decryptRTCP(encrypted);\n    return dec;\n  }\n}\n\nconst maxSRTCPIndex = 0x7fffffff;\n"]}