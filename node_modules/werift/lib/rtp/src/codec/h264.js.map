{"version":3,"file":"h264.js","sourceRoot":"","sources":["../../../../../rtp/src/codec/h264.ts"],"names":[],"mappings":";AAAA,gDAAgD;;;AAEhD,6CAA6C;AAE7C,MAAa,cAAc;IAKzB,MAAM,CAAC,WAAW,CAAC,GAAW;QAC5B,MAAM,IAAI,GAAG,IAAI,cAAc,EAAE,CAAC;QAElC,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,IAAI,CAAC,CAAC,GAAG,YAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;QAChC,IAAI,CAAC,GAAG,GAAG,YAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,YAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEtC,MAAM,EAAE,CAAC;QAET,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,IAAI,KAAK,mBAAW,CAAC,QAAQ,CAAC;IAC5C,CAAC;CACF;AAtBD,wCAsBC;AAEY,QAAA,WAAW,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAW,CAAC","sourcesContent":["// RFC 6184 - RTP Payload Format for H.264 Video\n\nimport { getBit } from \"../../../common/src\";\n\nexport class H264RtpPayload {\n  f!: number;\n  nri!: number;\n  type!: number;\n\n  static deSerialize(buf: Buffer) {\n    const h264 = new H264RtpPayload();\n\n    let offset = 0;\n\n    h264.f = getBit(buf[offset], 0);\n    h264.nri = getBit(buf[offset], 1, 2);\n    h264.type = getBit(buf[offset], 3, 5);\n\n    offset++;\n\n    return h264;\n  }\n\n  get isKeyframe() {\n    return this.type === NalUnitType.idrSlice;\n  }\n}\n\nexport const NalUnitType = { idrSlice: 5 } as const;\n"]}