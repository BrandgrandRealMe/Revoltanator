"use strict";
// RTP Payload Format for VP9 Video draft-ietf-payload-vp9-16 https://datatracker.ietf.org/doc/html/draft-ietf-payload-vp9
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vp9RtpPayload = void 0;
const src_1 = require("../../../common/src");
//          0 1 2 3 4 5 6 7
//         +-+-+-+-+-+-+-+-+
//         |I|P|L|F|B|E|V|Z| (REQUIRED)
//         +-+-+-+-+-+-+-+-+
//    I:   |M| PICTURE ID  | (REQUIRED)
//         +-+-+-+-+-+-+-+-+
//    M:   | EXTENDED PID  | (RECOMMENDED)
//         +-+-+-+-+-+-+-+-+
//    L:   | TID |U| SID |D| (Conditionally RECOMMENDED)
//         +-+-+-+-+-+-+-+-+                             -\
//    P,F: | P_DIFF      |N| (Conditionally REQUIRED)    - up to 3 times
//         +-+-+-+-+-+-+-+-+                             -/
//    V:   | SS            |
//         | ..            |
//         +-+-+-+-+-+-+-+-+
//          0 1 2 3 4 5 6 7
//         +-+-+-+-+-+-+-+-+
//         |I|P|L|F|B|E|V|Z| (REQUIRED)
//         +-+-+-+-+-+-+-+-+
//    I:   |M| PICTURE ID  | (RECOMMENDED)
//         +-+-+-+-+-+-+-+-+
//    M:   | EXTENDED PID  | (RECOMMENDED)
//         +-+-+-+-+-+-+-+-+
//    L:   | TID |U| SID |D| (Conditionally RECOMMENDED)
//         +-+-+-+-+-+-+-+-+
//         |   TL0PICIDX   | (Conditionally REQUIRED)
//         +-+-+-+-+-+-+-+-+
//    V:   | SS            |
//         | ..            |
//         +-+-+-+-+-+-+-+-+
class Vp9RtpPayload {
    static deSerialize(buf) {
        const c = new Vp9RtpPayload();
        let index = 0;
        c.i = src_1.getBit(buf[index], 0);
        c.p = src_1.getBit(buf[index], 1);
        c.l = src_1.getBit(buf[index], 2);
        c.f = src_1.getBit(buf[index], 3);
        c.b = src_1.getBit(buf[index], 4);
        c.e = src_1.getBit(buf[index], 5);
        c.v = src_1.getBit(buf[index], 6);
        c.z = src_1.getBit(buf[index], 7);
        index++;
        if (c.i === 1) {
            c.m = src_1.getBit(buf[index], 0);
            if (c.m === 1) {
                const _7 = src_1.paddingByte(src_1.getBit(buf[index], 1, 7));
                const _8 = src_1.paddingByte(buf[index + 1]);
                c.pictureId = parseInt(_7 + _8, 2);
                index += 2;
            }
            else {
                c.pictureId = src_1.getBit(buf[index], 1, 7);
                index++;
            }
        }
        c.tid = src_1.getBit(buf[index], 0, 3);
        c.u = src_1.getBit(buf[index], 3);
        c.sid = src_1.getBit(buf[index], 4, 3);
        c.d = src_1.getBit(buf[index], 7);
        return c;
    }
    get isKeyframe() {
        return !this.p && this.b && (!this.sid || !this.l);
    }
}
exports.Vp9RtpPayload = Vp9RtpPayload;
//# sourceMappingURL=vp9.js.map