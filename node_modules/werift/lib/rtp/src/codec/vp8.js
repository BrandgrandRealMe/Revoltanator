"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vp8RtpPayload = void 0;
const src_1 = require("../../../common/src");
// RFC 7741 - RTP Payload Format for VP8 Video
//        0 1 2 3 4 5 6 7                      0 1 2 3 4 5 6 7
//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
//       |X|R|N|S|R| PID | (REQUIRED)        |X|R|N|S|R| PID | (REQUIRED)
//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
//  X:   |I|L|T|K| RSV   | (OPTIONAL)   X:   |I|L|T|K| RSV   | (OPTIONAL)
//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
//  I:   |M| PictureID   | (OPTIONAL)   I:   |M| PictureID   | (OPTIONAL)
//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
//  L:   |   TL0PICIDX   | (OPTIONAL)        |   PictureID   |
//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
//  T/K: |TID|Y| KEYIDX  | (OPTIONAL)   L:   |   TL0PICIDX   | (OPTIONAL)
//       +-+-+-+-+-+-+-+-+                   +-+-+-+-+-+-+-+-+
//                                      T/K: |TID|Y| KEYIDX  | (OPTIONAL)
//                                           +-+-+-+-+-+-+-+-+
// 0 1 2 3 4 5 6 7
// +-+-+-+-+-+-+-+-+
// |Size0|H| VER |P|
// +-+-+-+-+-+-+-+-+
// |     Size1     |
// +-+-+-+-+-+-+-+-+
// |     Size2     |
// +-+-+-+-+-+-+-+-+
// | Octets 4..N of|
// | VP8 payload   |
// :               :
// +-+-+-+-+-+-+-+-+
// | OPTIONAL RTP  |
// | padding       |
// :               :
// +-+-+-+-+-+-+-+-+
class Vp8RtpPayload {
    static deSerialize(buf) {
        const c = new Vp8RtpPayload();
        let offset = 0;
        c.x = src_1.getBit(buf[offset], 0);
        c.n = src_1.getBit(buf[offset], 2);
        c.s = src_1.getBit(buf[offset], 3);
        c.pid = src_1.getBit(buf[offset], 5, 3);
        offset++;
        if (c.x === 1) {
            c.i = src_1.getBit(buf[offset], 0);
            c.l = src_1.getBit(buf[offset], 1);
            c.t = src_1.getBit(buf[offset], 2);
            c.k = src_1.getBit(buf[offset], 3);
            offset++;
            if (c.i) {
                c.m = src_1.getBit(buf[offset], 0);
                if (c.m === 1) {
                    const _7 = src_1.paddingByte(src_1.getBit(buf[offset], 1, 7));
                    const _8 = src_1.paddingByte(buf[offset + 1]);
                    c.pictureId = parseInt(_7 + _8, 2);
                    offset += 2;
                }
                else {
                    c.pictureId = src_1.getBit(buf[offset], 1, 7);
                    offset++;
                }
            }
        }
        if (c.s === 1 && c.pid === 0) {
            c.size0 = src_1.getBit(buf[offset], 0, 3);
            c.h = src_1.getBit(buf[offset], 3);
            c.ver = src_1.getBit(buf[offset], 4, 3);
            c.p = src_1.getBit(buf[offset], 7);
        }
        return c;
    }
    get isKeyframe() {
        return this.p === 0;
    }
}
exports.Vp8RtpPayload = Vp8RtpPayload;
//# sourceMappingURL=vp8.js.map