{"version":3,"file":"fullIntraRequest.js","sourceRoot":"","sources":["../../../../../../rtp/src/rtcp/psfb/fullIntraRequest.ts"],"names":[],"mappings":";;;AAAA,gDAAoE;AAIpE,MAAa,gBAAgB;IAQ3B,YAAY,QAAmC,EAAE;QANjD,UAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC;QAI/B,QAAG,GAAe,EAAE,CAAC;QAGnB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,IAAY;QAC7B,MAAM,CAAC,UAAU,EAAE,SAAS,CAAC,GAAG,kBAAY,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3D,MAAM,GAAG,GAAe,EAAE,CAAC;QAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACvC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;SACvE;QAED,OAAO,IAAI,gBAAgB,CAAC,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED,SAAS;QACP,MAAM,KAAK,GAAG,kBAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAEtE,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC9C,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,EAAE,CAAC,EAAE,EAAE;YAC/C,GAAG,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/B,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;IACrC,CAAC;;AApCH,4CAqCC;AApCQ,sBAAK,GAAG,CAAC,CAAC","sourcesContent":["import { bufferReader, bufferWriter } from \"../../../../common/src\";\n\ntype firEntry = { ssrc: number; sequenceNumber: number };\n\nexport class FullIntraRequest {\n  static count = 4;\n  count = FullIntraRequest.count;\n\n  senderSsrc!: number;\n  mediaSsrc!: number;\n  fir: firEntry[] = [];\n\n  constructor(props: Partial<FullIntraRequest> = {}) {\n    Object.assign(this, props);\n  }\n\n  get length() {\n    return Math.floor(this.serialize().length / 4 - 1);\n  }\n\n  static deSerialize(data: Buffer) {\n    const [senderSsrc, mediaSsrc] = bufferReader(data, [4, 4]);\n    const fir: firEntry[] = [];\n    for (let i = 8; i < data.length; i += 8) {\n      fir.push({ ssrc: data.readUInt32BE(i), sequenceNumber: data[i + 4] });\n    }\n\n    return new FullIntraRequest({ senderSsrc, mediaSsrc, fir });\n  }\n\n  serialize() {\n    const ssrcs = bufferWriter([4, 4], [this.senderSsrc, this.mediaSsrc]);\n\n    const fir = Buffer.alloc(this.fir.length * 8);\n    this.fir.forEach(({ ssrc, sequenceNumber }, i) => {\n      fir.writeUInt32BE(ssrc, i * 8);\n      fir[i * 8 + 4] = sequenceNumber;\n    });\n\n    return Buffer.concat([ssrcs, fir]);\n  }\n}\n"]}