{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../rtp/src/rtcp/psfb/index.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAG1B,kCAA8C;AAC9C,yDAAsD;AACtD,mEAAgE;AAChE,iCAAqD;AAErD,MAAM,GAAG,GAAG,eAAK,CAAC,4BAA4B,CAAC,CAAC;AAOhD,MAAa,2BAA2B;IAMtC,YAAY,QAA8C,EAAE;QAJ5D,SAAI,GAAG,2BAA2B,CAAC,IAAI,CAAC;QAKtC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,SAAS;QACP,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;QAC1C,OAAO,0BAAmB,CAAC,SAAS,CAClC,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,QAAQ,CAAC,KAAK,EACnB,OAAO,EACP,IAAI,CAAC,QAAQ,CAAC,MAAM,CACrB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,WAAW,CAAC,IAAY,EAAE,MAAkB;QACjD,IAAI,QAA8B,CAAC;QAEnC,QAAQ,MAAM,CAAC,KAAK,EAAE;YACpB,KAAK,mCAAgB,CAAC,KAAK;gBACzB,QAAQ,GAAG,mCAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAC9C,MAAM;YACR,KAAK,6CAAqB,CAAC,KAAK;gBAC9B,QAAQ,GAAG,6CAAqB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACnD,MAAM;YACR,KAAK,kCAA2B,CAAC,KAAK;gBACpC,QAAQ,GAAG,kCAA2B,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACzD,MAAM;YACR;gBACE,GAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;gBACzC,MAAM;SACT;QAED,OAAO,IAAI,2BAA2B,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IACvD,CAAC;;AAvCH,kEAwCC;AAvCQ,gCAAI,GAAG,GAAG,CAAC","sourcesContent":["import debug from \"debug\";\n\nimport { RtcpHeader } from \"../header\";\nimport { RtcpPacketConverter } from \"../rtcp\";\nimport { FullIntraRequest } from \"./fullIntraRequest\";\nimport { PictureLossIndication } from \"./pictureLossIndication\";\nimport { ReceiverEstimatedMaxBitrate } from \"./remb\";\n\nconst log = debug(\"werift/rtp/rtcp/psfb/index\");\n\ntype Feedback =\n  | FullIntraRequest\n  | PictureLossIndication\n  | ReceiverEstimatedMaxBitrate;\n\nexport class RtcpPayloadSpecificFeedback {\n  static type = 206;\n  type = RtcpPayloadSpecificFeedback.type;\n\n  feedback!: Feedback;\n\n  constructor(props: Partial<RtcpPayloadSpecificFeedback> = {}) {\n    Object.assign(this, props);\n  }\n\n  serialize() {\n    const payload = this.feedback.serialize();\n    return RtcpPacketConverter.serialize(\n      this.type,\n      this.feedback.count,\n      payload,\n      this.feedback.length\n    );\n  }\n\n  static deSerialize(data: Buffer, header: RtcpHeader) {\n    let feedback: Feedback | undefined;\n\n    switch (header.count) {\n      case FullIntraRequest.count:\n        feedback = FullIntraRequest.deSerialize(data);\n        break;\n      case PictureLossIndication.count:\n        feedback = PictureLossIndication.deSerialize(data);\n        break;\n      case ReceiverEstimatedMaxBitrate.count:\n        feedback = ReceiverEstimatedMaxBitrate.deSerialize(data);\n        break;\n      default:\n        log(\"unknown psfb packet\", header.count);\n        break;\n    }\n\n    return new RtcpPayloadSpecificFeedback({ feedback });\n  }\n}\n"]}