{"version":3,"file":"twcc.js","sourceRoot":"","sources":["../../../../../../rtp/src/rtcp/rtpfb/twcc.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport { range } from \"lodash\";\n\nimport {\n  BitWriter,\n  bufferReader,\n  bufferWriter,\n  getBit,\n} from \"../../../../common/src\";\nimport { RtcpHeader } from \"../header\";\n\nconst log = debug(\"werift/rtp/rtcp/rtpfb/twcc\");\n\n/* RTP Extensions for Transport-wide Congestion Control\n * draft-holmer-rmcat-transport-wide-cc-extensions-01\n\n   0               1               2               3\n   0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |V=2|P|  FMT=15 |    PT=205     |           length              |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |                     SSRC of packet sender                     |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |                      SSRC of media source                     |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |      base sequence number     |      packet status count      |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |                 reference time                | fb pkt. count |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |          packet chunk         |         packet chunk          |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  .                                                               .\n  .                                                               .\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |         packet chunk          |  recv delta   |  recv delta   |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  .                                                               .\n  .                                                               .\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |           recv delta          |  recv delta   | zero padding  |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n */\n\nexport class TransportWideCC {\n  static count = 15;\n  count = TransportWideCC.count;\n  length = 2;\n\n  senderSsrc!: number;\n  mediaSourceSsrc!: number;\n  baseSequenceNumber!: number;\n  packetStatusCount!: number;\n  /** 24bit multiples of 64ms */\n  referenceTime!: number;\n  fbPktCount!: number;\n  packetChunks: (RunLengthChunk | StatusVectorChunk)[] = [];\n  recvDeltas: RecvDelta[] = [];\n  header!: RtcpHeader;\n\n  constructor(props: Partial<TransportWideCC> = {}) {\n    Object.assign(this, props);\n    if (!this.header) {\n      this.header = new RtcpHeader({\n        type: 205,\n        count: this.count,\n        version: 2,\n      });\n    }\n  }\n\n  static deSerialize(data: Buffer, header: RtcpHeader) {\n    const [\n      senderSsrc,\n      mediaSsrc,\n      baseSequenceNumber,\n      packetStatusCount,\n      referenceTime,\n      fbPktCount,\n    ] = bufferReader(data, [4, 4, 2, 2, 3, 1]);\n    const packetChunks: (RunLengthChunk | StatusVectorChunk)[] = [];\n    const recvDeltas: RecvDelta[] = [];\n\n    let packetStatusPos = 16;\n    for (let processedPacketNum = 0; processedPacketNum < packetStatusCount; ) {\n      const type = getBit(\n        data.slice(packetStatusPos, packetStatusPos + 1)[0],\n        0,\n        1\n      );\n      let iPacketStatus: RunLengthChunk | StatusVectorChunk | undefined;\n      switch (type) {\n        case PacketChunk.TypeTCCRunLengthChunk:\n          {\n            const packetStatus = RunLengthChunk.deSerialize(\n              data.slice(packetStatusPos, packetStatusPos + 2)\n            );\n            iPacketStatus = packetStatus;\n            const packetNumberToProcess = Math.min(\n              packetStatusCount - processedPacketNum,\n              packetStatus.runLength\n            );\n            if (\n              packetStatus.packetStatus ===\n                PacketStatus.TypeTCCPacketReceivedSmallDelta ||\n              packetStatus.packetStatus ===\n                PacketStatus.TypeTCCPacketReceivedLargeDelta\n            ) {\n              range(packetNumberToProcess).forEach(() => {\n                recvDeltas.push(\n                  new RecvDelta({ type: packetStatus.packetStatus as any })\n                );\n              });\n            }\n            processedPacketNum += packetNumberToProcess;\n          }\n          break;\n        case PacketChunk.TypeTCCStatusVectorChunk:\n          {\n            const packetStatus = StatusVectorChunk.deSerialize(\n              data.slice(packetStatusPos, packetStatusPos + 2)\n            );\n            iPacketStatus = packetStatus;\n            if (packetStatus.symbolSize === 0) {\n              packetStatus.symbolList.forEach((v) => {\n                if (v === PacketStatus.TypeTCCPacketReceivedSmallDelta) {\n                  recvDeltas.push(\n                    new RecvDelta({\n                      type: PacketStatus.TypeTCCPacketReceivedSmallDelta,\n                    })\n                  );\n                }\n              });\n            }\n            if (packetStatus.symbolSize === 1) {\n              packetStatus.symbolList.forEach((v) => {\n                if (\n                  v === PacketStatus.TypeTCCPacketReceivedSmallDelta ||\n                  v === PacketStatus.TypeTCCPacketReceivedLargeDelta\n                ) {\n                  recvDeltas.push(\n                    new RecvDelta({\n                      type: v,\n                    })\n                  );\n                }\n              });\n            }\n            processedPacketNum += packetStatus.symbolList.length;\n          }\n          break;\n      }\n      if (!iPacketStatus) throw new Error();\n      packetStatusPos += 2;\n      packetChunks.push(iPacketStatus);\n    }\n\n    let recvDeltaPos = packetStatusPos;\n    recvDeltas.forEach((delta) => {\n      if (delta.type === PacketStatus.TypeTCCPacketReceivedSmallDelta) {\n        delta.deSerialize(data.slice(recvDeltaPos, recvDeltaPos + 1));\n        recvDeltaPos++;\n      }\n      if (delta.type === PacketStatus.TypeTCCPacketReceivedLargeDelta) {\n        delta.deSerialize(data.slice(recvDeltaPos, recvDeltaPos + 2));\n        recvDeltaPos += 2;\n      }\n    });\n\n    return new TransportWideCC({\n      senderSsrc,\n      mediaSourceSsrc: mediaSsrc,\n      baseSequenceNumber,\n      packetStatusCount,\n      referenceTime,\n      fbPktCount,\n      recvDeltas,\n      packetChunks,\n      header,\n    });\n  }\n\n  serialize() {\n    const constBuf = bufferWriter(\n      [4, 4, 2, 2, 3, 1],\n      [\n        this.senderSsrc,\n        this.mediaSourceSsrc,\n        this.baseSequenceNumber,\n        this.packetStatusCount,\n        this.referenceTime,\n        this.fbPktCount,\n      ]\n    );\n\n    const chunks = Buffer.concat(\n      this.packetChunks.map((chunk) => chunk.serialize())\n    );\n\n    const deltas = Buffer.concat(\n      this.recvDeltas\n        .map((delta) => {\n          try {\n            return delta.serialize();\n          } catch (error) {\n            log(error.message);\n            return undefined;\n          }\n        })\n        .filter((v) => v) as Buffer[]\n    );\n\n    const buf = Buffer.concat([constBuf, chunks, deltas]);\n\n    if (this.header.padding && buf.length % 4 !== 0) {\n      const rest = 4 - (buf.length % 4);\n      const padding = Buffer.alloc(rest);\n      padding[padding.length - 1] = padding.length;\n\n      this.header.length = Math.floor((buf.length + padding.length) / 4);\n      return Buffer.concat([this.header.serialize(), buf, padding]);\n    }\n\n    this.header.length = Math.floor(buf.length / 4);\n    return Buffer.concat([this.header.serialize(), buf]);\n  }\n\n  get packetResults(): PacketResult[] {\n    const currentSequenceNumber = this.baseSequenceNumber - 1;\n    const results = this.packetChunks\n      .filter((v) => v instanceof RunLengthChunk)\n      .map((chunk) => (chunk as RunLengthChunk).results(currentSequenceNumber))\n      .flatMap((v) => v);\n\n    let deltaIdx = 0;\n    const referenceTime = BigInt(this.referenceTime) * 64n;\n    let currentReceivedAtMs = referenceTime;\n\n    for (const result of results) {\n      const recvDelta = this.recvDeltas[deltaIdx];\n      if (!result.received || !recvDelta) {\n        continue;\n      }\n      currentReceivedAtMs += BigInt(recvDelta.delta) / 1000n;\n      result.delta = recvDelta.delta;\n      result.receivedAtMs = Number(currentReceivedAtMs);\n      deltaIdx++;\n    }\n    return results;\n  }\n}\n\n//  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n// |T| S |       Run Length        |\n// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nexport class RunLengthChunk {\n  type!: PacketChunk.TypeTCCRunLengthChunk;\n  packetStatus!: PacketStatus;\n  /** 13bit */\n  runLength!: number;\n\n  constructor(props: Partial<RunLengthChunk> = {}) {\n    Object.assign(this, props);\n    this.type = PacketChunk.TypeTCCRunLengthChunk;\n  }\n\n  static deSerialize(data: Buffer) {\n    const packetStatus = getBit(data[0], 1, 2);\n    const runLength = (getBit(data[0], 3, 5) << 8) + data[1];\n\n    return new RunLengthChunk({ type: 0, packetStatus, runLength });\n  }\n\n  serialize() {\n    const buf = Buffer.alloc(2);\n\n    const writer = new BitWriter(16);\n    writer.set(1, 0, 0);\n    writer.set(2, 1, this.packetStatus);\n    writer.set(13, 3, this.runLength);\n\n    buf.writeUInt16BE(writer.value);\n    return buf;\n  }\n\n  results(currentSequenceNumber: number) {\n    const received =\n      this.packetStatus === PacketStatus.TypeTCCPacketReceivedSmallDelta ||\n      this.packetStatus === PacketStatus.TypeTCCPacketReceivedLargeDelta;\n\n    const results: PacketResult[] = [];\n    for (let i = 0; i <= this.runLength; ++i) {\n      results.push(\n        new PacketResult({ sequenceNumber: ++currentSequenceNumber, received })\n      );\n    }\n    return results;\n  }\n}\n\n//  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\n// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n// |T|S|       symbol list         |\n// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nexport class StatusVectorChunk {\n  type!: number;\n  symbolSize!: number;\n  symbolList: number[] = [];\n\n  constructor(props: Partial<StatusVectorChunk> = {}) {\n    Object.assign(this, props);\n  }\n\n  static deSerialize(data: Buffer) {\n    const type = PacketChunk.TypeTCCStatusVectorChunk;\n    let symbolSize = getBit(data[0], 1, 1);\n    const symbolList: number[] = [];\n\n    switch (symbolSize) {\n      case 0:\n        range(6).forEach((_, i) => symbolList.push(getBit(data[0], 2 + i, 1)));\n        range(8).forEach((_, i) => symbolList.push(getBit(data[1], i, 1)));\n        break;\n      case 1:\n        range(3).forEach((i) => symbolList.push(getBit(data[0], 2 + i * 2, 2)));\n        range(4).forEach((i) => symbolList.push(getBit(data[1], i * 2, 2)));\n        break;\n      default:\n        symbolSize = (getBit(data[0], 2, 6) << 8) + data[1];\n    }\n\n    return new StatusVectorChunk({ type, symbolSize, symbolList });\n  }\n\n  serialize() {\n    const buf = Buffer.alloc(2);\n\n    const writer = new BitWriter(16);\n    writer.set(1, 0, 1);\n    writer.set(1, 1, this.symbolSize);\n\n    const bits = this.symbolSize === 0 ? 1 : 2;\n\n    this.symbolList.forEach((v, i) => {\n      const index = bits * i + 2;\n      writer.set(bits, index, v);\n    });\n    buf.writeUInt16BE(writer.value);\n    return buf;\n  }\n}\n\nexport class RecvDelta {\n  /**optional (If undefined, it will be set automatically.)*/\n  type?:\n    | PacketStatus.TypeTCCPacketReceivedSmallDelta\n    | PacketStatus.TypeTCCPacketReceivedLargeDelta;\n  /**micro sec */\n  delta!: number;\n\n  constructor(props: Partial<RecvDelta> = {}) {\n    Object.assign(this, props);\n  }\n\n  static deSerialize(data: Buffer) {\n    let type: number | undefined;\n    let delta: number | undefined;\n\n    if (data.length === 1) {\n      type = PacketStatus.TypeTCCPacketReceivedSmallDelta;\n      delta = 250 * data[0];\n    } else if (data.length === 2) {\n      type = PacketStatus.TypeTCCPacketReceivedLargeDelta;\n      delta = 250 * data.readInt16BE();\n    }\n\n    if (type === undefined || delta === undefined) throw new Error();\n\n    return new RecvDelta({ type, delta });\n  }\n\n  deSerialize(data: Buffer) {\n    const res = RecvDelta.deSerialize(data);\n    this.delta = res.delta;\n  }\n\n  parsed = false; // todo refactor\n  parseDelta() {\n    this.delta = Math.floor(this.delta / 250);\n\n    if (this.delta < 0 || this.delta > 255) {\n      if (this.delta > 32767) this.delta = 32767; // maxInt16\n      if (this.delta < -32768) this.delta = -32768; // minInt16\n      if (!this.type) this.type = PacketStatus.TypeTCCPacketReceivedLargeDelta;\n    } else {\n      if (!this.type) this.type = PacketStatus.TypeTCCPacketReceivedSmallDelta;\n    }\n    this.parsed = true;\n  }\n\n  serialize() {\n    if (!this.parsed) this.parseDelta();\n    if (this.type === PacketStatus.TypeTCCPacketReceivedSmallDelta) {\n      const buf = Buffer.alloc(1);\n      buf.writeUInt8(this.delta);\n      return buf;\n    } else if (this.type === PacketStatus.TypeTCCPacketReceivedLargeDelta) {\n      const buf = Buffer.alloc(2);\n      buf.writeInt16BE(this.delta);\n      return buf;\n    }\n\n    throw new Error(\"errDeltaExceedLimit \" + this.delta + \" \" + this.type);\n  }\n}\n\nexport enum PacketChunk {\n  TypeTCCRunLengthChunk,\n  TypeTCCStatusVectorChunk,\n  packetStatusChunkLength,\n}\n\nexport enum PacketStatus {\n  TypeTCCPacketNotReceived,\n  TypeTCCPacketReceivedSmallDelta,\n  TypeTCCPacketReceivedLargeDelta,\n  TypeTCCPacketReceivedWithoutDelta,\n}\n\nexport class PacketResult {\n  sequenceNumber = 0;\n  delta = 0;\n  received = false;\n  receivedAtMs = 0;\n  constructor(props: Partial<PacketResult>) {\n    Object.assign(this, props);\n  }\n}\n"]}