{"version":3,"file":"nack.js","sourceRoot":"","sources":["../../../../../../rtp/src/rtcp/rtpfb/nack.ts"],"names":[],"mappings":"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","sourcesContent":["import { range } from \"lodash\";\n\nimport { bufferReader, bufferWriter } from \"../../../../common/src\";\nimport { RtcpHeader } from \"../header\";\n\nexport class GenericNack {\n  static count = 1;\n  readonly count = GenericNack.count;\n  header!: RtcpHeader;\n  senderSsrc!: number;\n  mediaSourceSsrc!: number;\n  lost: number[] = [];\n\n  constructor(props: Partial<GenericNack> = {}) {\n    Object.assign(this, props);\n    if (!this.header) {\n      this.header = new RtcpHeader({\n        type: 205,\n        count: this.count,\n        version: 2,\n      });\n    }\n  }\n\n  static deSerialize(data: Buffer, header: RtcpHeader) {\n    const [senderSsrc, mediaSourceSsrc] = bufferReader(data, [4, 4]);\n    const lost = range(8, data.length, 4)\n      .map((pos) => {\n        const lost: number[] = [];\n        const [pid, blp] = bufferReader(data.slice(pos), [2, 2]);\n        lost.push(pid);\n        range(0, 16).forEach((d) => {\n          if ((blp >> d) & 1) {\n            lost.push(pid + d + 1);\n          }\n        });\n        return lost;\n      })\n      .flatMap((v) => v);\n\n    return new GenericNack({\n      header,\n      senderSsrc,\n      mediaSourceSsrc,\n      lost,\n    });\n  }\n\n  serialize() {\n    const ssrcs = bufferWriter([4, 4], [this.senderSsrc, this.mediaSourceSsrc]);\n    const fics: Buffer[] = [];\n    if (this.lost.length > 0) {\n      let pid = this.lost[0],\n        blp = 0;\n      this.lost.slice(1).forEach((p) => {\n        const d = p - pid - 1;\n        if (d < 16) {\n          blp |= 1 << d;\n        } else {\n          fics.push(bufferWriter([2, 2], [pid, blp]));\n          pid = p;\n          blp = 0;\n        }\n      });\n      fics.push(bufferWriter([2, 2], [pid, blp]));\n    }\n    const buf = Buffer.concat([ssrcs, Buffer.concat(fics)]);\n    this.header.length = buf.length / 4;\n    return Buffer.concat([this.header.serialize(), buf]);\n  }\n}\n"]}