{"version":3,"file":"sdes.js","sourceRoot":"","sources":["../../../../../rtp/src/rtcp/sdes.ts"],"names":[],"mappings":"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","sourcesContent":["import { bufferWriter } from \"../../../common/src\";\nimport { RtcpHeader } from \"./header\";\nimport { RtcpPacketConverter } from \"./rtcp\";\n\nexport class RtcpSourceDescriptionPacket {\n  static type = 202;\n  type = RtcpSourceDescriptionPacket.type;\n  chunks: SourceDescriptionChunk[] = [];\n\n  constructor(props: Partial<RtcpSourceDescriptionPacket>) {\n    Object.assign(this, props);\n  }\n\n  get length() {\n    let length = 0;\n    this.chunks.forEach((chunk) => (length += chunk.length));\n    return length;\n  }\n\n  serialize() {\n    let payload = Buffer.concat(this.chunks.map((chunk) => chunk.serialize()));\n    while (payload.length % 4)\n      payload = Buffer.concat([payload, Buffer.from([0])]);\n    return RtcpPacketConverter.serialize(\n      this.type,\n      this.chunks.length,\n      payload,\n      payload.length / 4\n    );\n  }\n\n  static deSerialize(payload: Buffer, header: RtcpHeader) {\n    const chunks: SourceDescriptionChunk[] = [];\n    for (let i = 0; i < payload.length; ) {\n      const chunk = SourceDescriptionChunk.deSerialize(payload.slice(i));\n      chunks.push(chunk);\n      i += chunk.length;\n    }\n\n    return new RtcpSourceDescriptionPacket({ chunks });\n  }\n}\n\nexport class SourceDescriptionChunk {\n  source!: number;\n  items: SourceDescriptionItem[] = [];\n\n  constructor(props: Partial<SourceDescriptionChunk> = {}) {\n    Object.assign(this, props);\n  }\n\n  get length() {\n    let length = 4;\n    this.items.forEach((item) => (length += item.length));\n    length += 1;\n    length += getPadding(length);\n    return length;\n  }\n\n  serialize() {\n    const data = Buffer.concat([\n      bufferWriter([4], [this.source]),\n      Buffer.concat(this.items.map((item) => item.serialize())),\n    ]);\n\n    const res = Buffer.concat([data, Buffer.alloc(getPadding(data.length))]);\n    return res;\n  }\n\n  static deSerialize(data: Buffer) {\n    const source = data.readUInt32BE();\n    const items: SourceDescriptionItem[] = [];\n    for (let i = 4; i < data.length; ) {\n      const type = data[i];\n      if (type === 0) break;\n\n      const item = SourceDescriptionItem.deSerialize(data.slice(i));\n      items.push(item);\n      i += item.length;\n    }\n\n    return new SourceDescriptionChunk({ source, items });\n  }\n}\n\nexport class SourceDescriptionItem {\n  type!: number;\n  text!: string;\n\n  constructor(props: Partial<SourceDescriptionItem>) {\n    Object.assign(this, props);\n  }\n\n  get length() {\n    return 1 + 1 + Buffer.from(this.text).length;\n  }\n\n  serialize() {\n    const text = Buffer.from(this.text);\n    return Buffer.concat([\n      bufferWriter([1, 1], [this.type, text.length]),\n      text,\n    ]);\n  }\n\n  static deSerialize(data: Buffer) {\n    const type = data[0];\n    const octetCount = data[1];\n    const text = data.slice(2, 2 + octetCount).toString();\n    return new SourceDescriptionItem({ type, text });\n  }\n}\n\nfunction getPadding(len: number) {\n  if (len % 4 == 0) {\n    return 0;\n  }\n  return 4 - (len % 4);\n}\n"]}