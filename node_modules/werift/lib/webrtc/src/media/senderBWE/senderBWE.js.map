{"version":3,"file":"senderBWE.js","sourceRoot":"","sources":["../../../../../src/media/senderBWE/senderBWE.ts"],"names":[],"mappings":"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","sourcesContent":["import Event from \"rx.mini\";\n\nimport { TransportWideCC } from \"../../../../rtp/src\";\nimport { Int } from \"../../../../rtp/src/helper\";\nimport { milliTime } from \"../../utils\";\nimport { CumulativeResult } from \"./cumulativeResult\";\n\nconst COUNTER_MAX = 20;\nconst SCORE_MAX = 10;\n\nexport class SenderBandwidthEstimator {\n  congestion = false;\n\n  readonly onAvailableBitrate = new Event<[number]>();\n  /**congestion occur or not */\n  readonly onCongestion = new Event<[boolean]>();\n  readonly onCongestionScore = new Event<[number]>();\n\n  private congestionCounter = 0;\n  private cumulativeResult = new CumulativeResult();\n  private sentInfos: { [key: number]: SentInfo } = {};\n  private _congestionScore = 1;\n  /**1~10 big is worth*/\n  get congestionScore() {\n    return this._congestionScore;\n  }\n  set congestionScore(v: number) {\n    this._congestionScore = v;\n    this.onCongestionScore.execute(v);\n  }\n  private _availableBitrate: number = 0;\n  get availableBitrate() {\n    return this._availableBitrate;\n  }\n  set availableBitrate(v: number) {\n    this._availableBitrate = v;\n    this.onAvailableBitrate.execute(v);\n  }\n\n  constructor() {}\n\n  receiveTWCC(feedback: TransportWideCC) {\n    const nowMs = milliTime();\n    const elapsedMs = nowMs - this.cumulativeResult.firstPacketSentAtMs;\n    if (elapsedMs > 1000) {\n      this.cumulativeResult.reset();\n\n      // Congestion may be occurring.\n\n      if (this.congestionCounter < COUNTER_MAX) {\n        this.congestionCounter++;\n      } else if (this.congestionScore < SCORE_MAX) {\n        this.congestionScore++;\n      }\n\n      if (this.congestionCounter >= COUNTER_MAX && !this.congestion) {\n        this.congestion = true;\n        this.onCongestion.execute(this.congestion);\n      }\n    }\n\n    for (const result of feedback.packetResults) {\n      if (!result.received) continue;\n\n      const wideSeq = result.sequenceNumber;\n      const info = this.sentInfos[wideSeq];\n      if (!info) continue;\n      if (!result.receivedAtMs) continue;\n\n      this.cumulativeResult.addPacket(\n        info.size,\n        info.sendingAtMs,\n        result.receivedAtMs\n      );\n    }\n\n    if (elapsedMs >= 100 && this.cumulativeResult.numPackets >= 20) {\n      this.availableBitrate = Math.min(\n        this.cumulativeResult.sendBitrate,\n        this.cumulativeResult.receiveBitrate\n      );\n      this.cumulativeResult.reset();\n\n      if (this.congestionCounter > -COUNTER_MAX) {\n        const maxBonus = Int(COUNTER_MAX / 2) + 1;\n        const minBonus = Int(COUNTER_MAX / 4) + 1;\n        const bonus =\n          maxBonus - ((maxBonus - minBonus) / 10) * this.congestionScore;\n\n        this.congestionCounter = this.congestionCounter - bonus;\n      }\n\n      if (this.congestionCounter <= -COUNTER_MAX) {\n        if (this.congestionScore > 1) {\n          this.congestionScore--;\n          this.onCongestion.execute(false);\n        }\n        this.congestionCounter = 0;\n      }\n\n      if (this.congestionCounter <= 0 && this.congestion) {\n        this.congestion = false;\n        this.onCongestion.execute(this.congestion);\n      }\n    }\n  }\n\n  rtpPacketSent(sentInfo: SentInfo) {\n    Object.keys(sentInfo)\n      .map((v) => Number(v))\n      .sort()\n      .filter((seq) => seq < sentInfo.wideSeq)\n      .forEach((seq) => {\n        delete this.sentInfos[seq];\n      });\n    this.sentInfos[sentInfo.wideSeq] = sentInfo;\n  }\n}\n\nexport interface SentInfo {\n  wideSeq: number;\n  /**\n   * byte\n   */\n  size: number;\n  isProbation?: boolean;\n  sendingAtMs: number;\n  sentAtMs: number;\n}\n"]}