{"version":3,"file":"cumulativeResult.js","sourceRoot":"","sources":["../../../../../src/media/senderBWE/cumulativeResult.ts"],"names":[],"mappings":";;;AAAA,uDAAiD;AAEjD,qBAAqB;AACrB,MAAa,gBAAgB;IAA7B;QACE,eAAU,GAAG,CAAC,CAAC;QACf,UAAU;QACV,cAAS,GAAG,CAAC,CAAC;QACd,wBAAmB,GAAG,CAAC,CAAC;QACxB,uBAAkB,GAAG,CAAC,CAAC;QACvB,4BAAuB,GAAG,CAAC,CAAC;QAC5B,2BAAsB,GAAG,CAAC,CAAC;IAkD7B,CAAC;IAhDC;;;;;OAKG;IACH,SAAS,CAAC,IAAY,EAAE,QAAgB,EAAE,YAAoB;QAC5D,IAAI,IAAI,CAAC,UAAU,KAAK,CAAC,EAAE;YACzB,IAAI,CAAC,mBAAmB,GAAG,QAAQ,CAAC;YACpC,IAAI,CAAC,uBAAuB,GAAG,YAAY,CAAC;YAC5C,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;YACnC,IAAI,CAAC,sBAAsB,GAAG,YAAY,CAAC;SAC5C;aAAM;YACL,IAAI,QAAQ,GAAG,IAAI,CAAC,mBAAmB;gBACrC,IAAI,CAAC,mBAAmB,GAAG,QAAQ,CAAC;YACtC,IAAI,YAAY,GAAG,IAAI,CAAC,uBAAuB;gBAC7C,IAAI,CAAC,uBAAuB,GAAG,YAAY,CAAC;YAC9C,IAAI,QAAQ,GAAG,IAAI,CAAC,kBAAkB;gBACpC,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC;YACrC,IAAI,YAAY,GAAG,IAAI,CAAC,sBAAsB;gBAC5C,IAAI,CAAC,sBAAsB,GAAG,YAAY,CAAC;SAC9C;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC;IACzB,CAAC;IAED,KAAK;QACH,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC;QACjC,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;IAClC,CAAC;IAED,IAAI,cAAc;QAChB,MAAM,cAAc,GAClB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAC7D,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAC7D,OAAO,YAAG,CAAC,OAAO,CAAC,CAAC;IACtB,CAAC;IAED,IAAI,WAAW;QACb,MAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAC1E,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAC7D,OAAO,YAAG,CAAC,OAAO,CAAC,CAAC;IACtB,CAAC;CACF;AAzDD,4CAyDC","sourcesContent":["import { Int } from \"../../../../rtp/src/helper\";\n\n// refer by mediasoup\nexport class CumulativeResult {\n  numPackets = 0;\n  /**byte */\n  totalSize = 0;\n  firstPacketSentAtMs = 0;\n  lastPacketSentAtMs = 0;\n  firstPacketReceivedAtMs = 0;\n  lastPacketReceivedAtMs = 0;\n\n  /**\n   *\n   * @param size byte\n   * @param sentAtMs\n   * @param receivedAtMs\n   */\n  addPacket(size: number, sentAtMs: number, receivedAtMs: number) {\n    if (this.numPackets === 0) {\n      this.firstPacketSentAtMs = sentAtMs;\n      this.firstPacketReceivedAtMs = receivedAtMs;\n      this.lastPacketSentAtMs = sentAtMs;\n      this.lastPacketReceivedAtMs = receivedAtMs;\n    } else {\n      if (sentAtMs < this.firstPacketSentAtMs)\n        this.firstPacketSentAtMs = sentAtMs;\n      if (receivedAtMs < this.firstPacketReceivedAtMs)\n        this.firstPacketReceivedAtMs = receivedAtMs;\n      if (sentAtMs > this.lastPacketSentAtMs)\n        this.lastPacketSentAtMs = sentAtMs;\n      if (receivedAtMs > this.lastPacketReceivedAtMs)\n        this.lastPacketReceivedAtMs = receivedAtMs;\n    }\n\n    this.numPackets++;\n    this.totalSize += size;\n  }\n\n  reset() {\n    this.numPackets = 0;\n    this.totalSize = 0;\n    this.firstPacketSentAtMs = 0;\n    this.lastPacketSentAtMs = 0;\n    this.firstPacketReceivedAtMs = 0;\n    this.lastPacketReceivedAtMs = 0;\n  }\n\n  get receiveBitrate() {\n    const recvIntervalMs =\n      this.lastPacketReceivedAtMs - this.firstPacketReceivedAtMs;\n    const bitrate = (this.totalSize / recvIntervalMs) * 8 * 1000;\n    return Int(bitrate);\n  }\n\n  get sendBitrate() {\n    const sendIntervalMs = this.lastPacketSentAtMs - this.firstPacketSentAtMs;\n    const bitrate = (this.totalSize / sendIntervalMs) * 8 * 1000;\n    return Int(bitrate);\n  }\n}\n"]}