import { RtcpPacket, RtpPacket } from "../../../rtp/src";
import { RTCDtlsTransport } from "../transport/dtls";
import { Kind } from "../types/domain";
import { RTCRtpReceiveParameters } from "./parameters";
import { ReceiverTWCC } from "./receiver/receiverTwcc";
import { Extensions } from "./router";
import { MediaStreamTrack } from "./track";
export declare class RTCRtpReceiver {
    kind: Kind;
    dtlsTransport: RTCDtlsTransport;
    rtcpSsrc: number;
    private readonly codecs;
    private readonly ssrcByRtx;
    private readonly nack;
    readonly type = "receiver";
    readonly uuid: string;
    readonly tracks: MediaStreamTrack[];
    readonly trackBySSRC: {
        [ssrc: string]: MediaStreamTrack;
    };
    readonly trackByRID: {
        [rid: string]: MediaStreamTrack;
    };
    readonly lsr: {
        [ssrc: number]: BigInt;
    };
    readonly lsrTime: {
        [ssrc: number]: number;
    };
    readonly onPacketLost: import("rx.mini").default<[import("../../../rtp/src").GenericNack]>;
    sdesMid?: string;
    latestRid?: string;
    latestRepairedRid?: string;
    receiverTWCC?: ReceiverTWCC;
    supportTWCC: boolean;
    stopped: boolean;
    remoteStreamId?: string;
    remoteTrackId?: string;
    rtcpRunning: boolean;
    private rtcpCancel;
    private remoteStreams;
    constructor(kind: Kind, dtlsTransport: RTCDtlsTransport, rtcpSsrc: number);
    get track(): MediaStreamTrack;
    prepareReceive(params: RTCRtpReceiveParameters): void;
    /**
     * setup TWCC if supported
     */
    setupTWCC(mediaSourceSsrc?: number): void;
    addTrack(track: MediaStreamTrack): boolean;
    stop(): void;
    runRtcp(): Promise<void>;
    /**todo impl */
    getStats(): void;
    sendRtcpPLI(mediaSsrc: number): Promise<void>;
    handleRtcpPacket(packet: RtcpPacket): void;
    handleRtpBySsrc: (packet: RtpPacket, extensions: Extensions) => void;
    handleRtpByRid: (packet: RtpPacket, rid: string, extensions: Extensions) => void;
    private handleRTP;
}
export declare function unwrapRtx(rtx: RtpPacket, payloadType: number, ssrc: number): RtpPacket;
