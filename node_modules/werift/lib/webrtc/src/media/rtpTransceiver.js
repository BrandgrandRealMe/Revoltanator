"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Directions = exports.RTCRtpTransceiver = void 0;
const rx_mini_1 = __importDefault(require("rx.mini"));
const uuid = __importStar(require("uuid"));
const const_1 = require("../const");
class RTCRtpTransceiver {
    constructor(kind, receiver, sender, 
    /**RFC 8829 4.2.4.  direction the transceiver was initialized with */
    direction, dtlsTransport) {
        this.kind = kind;
        this.receiver = receiver;
        this.sender = sender;
        this.direction = direction;
        this.dtlsTransport = dtlsTransport;
        this.uuid = uuid.v4();
        this.onTrack = new rx_mini_1.default();
        this.usedForSender = false;
        this.codecs = [];
        this.headerExtensions = [];
        this.options = {};
        this.stopping = false;
        this.stopped = false;
    }
    set currentDirection(direction) {
        this._currentDirection = direction;
        if (const_1.SenderDirections.includes(this._currentDirection || "")) {
            this.usedForSender = true;
        }
    }
    /**RFC 8829 4.2.5. last negotiated direction */
    get currentDirection() {
        return this._currentDirection;
    }
    get msid() {
        return `${this.sender.streamId} ${this.sender.trackId}`;
    }
    addTrack(track) {
        const res = this.receiver.addTrack(track);
        if (res)
            this.onTrack.execute(track);
    }
    // todo impl
    // https://www.w3.org/TR/webrtc/#methods-8
    stop() {
        if (this.stopping)
            return;
        // todo Stop sending and receiving with transceiver.
        this.stopping = true;
    }
}
exports.RTCRtpTransceiver = RTCRtpTransceiver;
exports.Directions = [
    "inactive",
    "sendonly",
    "recvonly",
    "sendrecv",
];
//# sourceMappingURL=rtpTransceiver.js.map