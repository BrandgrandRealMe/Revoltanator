{"version":3,"file":"receiverTwcc.js","sourceRoot":"","sources":["../../../../../src/media/receiver/receiverTwcc.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,8CAA6C;AAE7C,gDAAqE;AACrE,6CAO6B;AAE7B,uCAAwC;AAExC,MAAM,GAAG,GAAG,eAAK,CAAC,2CAA2C,CAAC,CAAC;AAI/D,MAAa,YAAY;IASvB,YACU,aAA+B,EAC/B,QAAgB,EAChB,eAAuB;QAFvB,kBAAa,GAAb,aAAa,CAAkB;QAC/B,aAAQ,GAAR,QAAQ,CAAQ;QAChB,oBAAe,GAAf,eAAe,CAAQ;QAXjC,kBAAa,GAET,EAAE,CAAC;QACP,gBAAW,GAAG,KAAK,CAAC;QACpB,YAAY;QACZ,eAAU,GAAG,CAAC,CAAC;QAQb,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,UAAU,CAAC,uBAA+B;QACxC,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,GAAG;YAC5C,GAAG,EAAE,uBAAuB;YAC5B,SAAS,EAAE,iBAAS,EAAE;SACvB,CAAC;QAEF,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,EAAE,EAAE;YAC/C,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB;IACH,CAAC;IAEO,KAAK,CAAC,OAAO;QACnB,OAAO,IAAI,CAAC,WAAW,EAAE;YACvB,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,MAAM,qBAAU,CAAC,GAAG,CAAC,CAAC;SACvB;IACH,CAAC;IAEO,QAAQ;QACd,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO;QACzD,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAC1D,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CACxB,CAAC;QAEF,MAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QACpC,MAAM,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QAE9C,MAAM,YAAY,GAA2C,EAAE,CAAC;QAChE,MAAM,kBAAkB,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;QAChD,MAAM,iBAAiB,GAAG,eAAS,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC;QACxD,eAAe;QACf,IAAI,aAAsB,CAAC;QAC3B,IAAI,gBAAsE,CAAC;QAC3E,MAAM,UAAU,GAAgB,EAAE,CAAC;QAEnC,KAAK,IAAI,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,eAAe;YACf,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC;YAEnD,IAAI,SAAS,EAAE;gBACb,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;oBACvB,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;iBAChC;gBACD,IAAI,CAAC,aAAa,EAAE;oBAClB,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;iBACpC;gBAED,MAAM,KAAK,GAAG,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;gBAC7C,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;gBAE/B,MAAM,SAAS,GAAG,IAAI,eAAS,CAAC;oBAC9B,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;iBACrB,CAAC,CAAC;gBACH,SAAS,CAAC,UAAU,EAAE,CAAC;gBACvB,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAE3B,sBAAsB;gBACtB,IACE,gBAAgB,IAAI,SAAS;oBAC7B,gBAAgB,CAAC,MAAM,KAAK,SAAS,CAAC,IAAI,EAC1C;oBACA,YAAY,CAAC,IAAI,CACf,IAAI,oBAAc,CAAC;wBACjB,YAAY,EAAE,gBAAgB,CAAC,MAAM;wBACrC,SAAS,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM;qBACvC,CAAC,CACH,CAAC;oBACF,gBAAgB,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,SAAS,CAAC,IAAK,EAAE,CAAC;iBAC3D;gBACD,cAAc;gBACd,IAAI,CAAC,KAAK,MAAM,EAAE;oBAChB,IAAI,gBAAgB,IAAI,SAAS,EAAE;wBACjC,YAAY,CAAC,IAAI,CACf,IAAI,oBAAc,CAAC;4BACjB,YAAY,EAAE,gBAAgB,CAAC,MAAM;4BACrC,SAAS,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,GAAG,CAAC;yBAC3C,CAAC,CACH,CAAC;qBACH;yBAAM;wBACL,YAAY,CAAC,IAAI,CACf,IAAI,oBAAc,CAAC;4BACjB,YAAY,EAAE,SAAS,CAAC,IAAI;4BAC5B,SAAS,EAAE,CAAC;yBACb,CAAC,CACH,CAAC;qBACH;iBACF;gBAED,IAAI,gBAAgB,IAAI,SAAS,EAAE;oBACjC,gBAAgB,GAAG,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,SAAS,CAAC,IAAK,EAAE,CAAC;iBAC3D;aACF;SACF;QAED,IAAI,CAAC,aAAa,EAAE;YAClB,OAAO;SACR;QAED,MAAM,MAAM,GAAG,IAAI,gCAA0B,CAAC;YAC5C,QAAQ,EAAE,IAAI,qBAAe,CAAC;gBAC5B,UAAU,EAAE,IAAI,CAAC,QAAQ;gBACzB,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,kBAAkB;gBAClB,iBAAiB;gBACjB,aAAa,EAAE,YAAM,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;gBAC5D,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,UAAU;gBACV,YAAY;aACb,CAAC;SACH,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YAClD,GAAG,CAAC,GAAG,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,cAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC;CACF;AAtID,oCAsIC","sourcesContent":["import debug from \"debug\";\nimport { setTimeout } from \"timers/promises\";\n\nimport { uint8Add, uint16Add, uint24 } from \"../../../../common/src\";\nimport {\n  PacketStatus,\n  RecvDelta,\n  RtcpTransportLayerFeedback,\n  RunLengthChunk,\n  StatusVectorChunk,\n  TransportWideCC,\n} from \"../../../../rtp/src\";\nimport { RTCDtlsTransport } from \"../../transport/dtls\";\nimport { microTime } from \"../../utils\";\n\nconst log = debug(\"werift/webrtc/media/receiver/receiverTwcc\");\n\ntype ExtensionInfo = { tsn: number; timestamp: number };\n\nexport class ReceiverTWCC {\n  extensionInfo: {\n    [tsn: number]: ExtensionInfo;\n  } = {};\n  twccRunning = false;\n  /** uint8 */\n  fbPktCount = 0;\n  lastTimestamp?: number;\n\n  constructor(\n    private dtlsTransport: RTCDtlsTransport,\n    private rtcpSsrc: number,\n    private mediaSourceSsrc: number\n  ) {\n    this.runTWCC();\n  }\n\n  handleTWCC(transportSequenceNumber: number) {\n    this.extensionInfo[transportSequenceNumber] = {\n      tsn: transportSequenceNumber,\n      timestamp: microTime(),\n    };\n\n    if (Object.keys(this.extensionInfo).length > 10) {\n      this.sendTWCC();\n    }\n  }\n\n  private async runTWCC() {\n    while (this.twccRunning) {\n      this.sendTWCC();\n      await setTimeout(100);\n    }\n  }\n\n  private sendTWCC() {\n    if (Object.keys(this.extensionInfo).length === 0) return;\n    const extensionsArr = Object.values(this.extensionInfo).sort(\n      (a, b) => a.tsn - b.tsn\n    );\n\n    const minTSN = extensionsArr[0].tsn;\n    const maxTSN = extensionsArr.slice(-1)[0].tsn;\n\n    const packetChunks: (RunLengthChunk | StatusVectorChunk)[] = [];\n    const baseSequenceNumber = extensionsArr[0].tsn;\n    const packetStatusCount = uint16Add(maxTSN - minTSN, 1);\n    /**micro sec */\n    let referenceTime!: number;\n    let lastPacketStatus: { status: PacketStatus; minTSN: number } | undefined;\n    const recvDeltas: RecvDelta[] = [];\n\n    for (let i = minTSN; i <= maxTSN; i++) {\n      /**micro sec */\n      const timestamp = this.extensionInfo[i]?.timestamp;\n\n      if (timestamp) {\n        if (!this.lastTimestamp) {\n          this.lastTimestamp = timestamp;\n        }\n        if (!referenceTime) {\n          referenceTime = this.lastTimestamp;\n        }\n\n        const delta = timestamp - this.lastTimestamp;\n        this.lastTimestamp = timestamp;\n\n        const recvDelta = new RecvDelta({\n          delta: Number(delta),\n        });\n        recvDelta.parseDelta();\n        recvDeltas.push(recvDelta);\n\n        // when status changed\n        if (\n          lastPacketStatus != undefined &&\n          lastPacketStatus.status !== recvDelta.type\n        ) {\n          packetChunks.push(\n            new RunLengthChunk({\n              packetStatus: lastPacketStatus.status,\n              runLength: i - lastPacketStatus.minTSN,\n            })\n          );\n          lastPacketStatus = { minTSN: i, status: recvDelta.type! };\n        }\n        // last status\n        if (i === maxTSN) {\n          if (lastPacketStatus != undefined) {\n            packetChunks.push(\n              new RunLengthChunk({\n                packetStatus: lastPacketStatus.status,\n                runLength: i - lastPacketStatus.minTSN + 1,\n              })\n            );\n          } else {\n            packetChunks.push(\n              new RunLengthChunk({\n                packetStatus: recvDelta.type,\n                runLength: 1,\n              })\n            );\n          }\n        }\n\n        if (lastPacketStatus == undefined) {\n          lastPacketStatus = { minTSN: i, status: recvDelta.type! };\n        }\n      }\n    }\n\n    if (!referenceTime) {\n      return;\n    }\n\n    const packet = new RtcpTransportLayerFeedback({\n      feedback: new TransportWideCC({\n        senderSsrc: this.rtcpSsrc,\n        mediaSourceSsrc: this.mediaSourceSsrc,\n        baseSequenceNumber,\n        packetStatusCount,\n        referenceTime: uint24(Math.floor(referenceTime / 1000 / 64)),\n        fbPktCount: this.fbPktCount,\n        recvDeltas,\n        packetChunks,\n      }),\n    });\n\n    this.dtlsTransport.sendRtcp([packet]).catch((err) => {\n      log(err);\n    });\n    this.extensionInfo = {};\n    this.fbPktCount = uint8Add(this.fbPktCount, 1);\n  }\n}\n"]}