{"version":3,"file":"rtpSender.js","sourceRoot":"","sources":["../../../../src/media/rtpSender.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomBytes } from \"crypto\";\nimport debug from \"debug\";\nimport { jspack } from \"jspack\";\nimport Event from \"rx.mini\";\nimport { setTimeout } from \"timers/promises\";\nimport * as uuid from \"uuid\";\n\nimport {\n  bufferWriter,\n  random16,\n  uint16Add,\n  uint32Add,\n} from \"../../../common/src\";\nimport {\n  Extension,\n  GenericNack,\n  PictureLossIndication,\n  ReceiverEstimatedMaxBitrate,\n  RtcpPacket,\n  RtcpPayloadSpecificFeedback,\n  RtcpRrPacket,\n  RtcpSenderInfo,\n  RtcpSourceDescriptionPacket,\n  RtcpSrPacket,\n  RtcpTransportLayerFeedback,\n  RtpHeader,\n  RtpPacket,\n  SourceDescriptionChunk,\n  SourceDescriptionItem,\n  TransportWideCC,\n} from \"../../../rtp/src\";\nimport { RTP_EXTENSION_URI } from \"../extension/rtpExtension\";\nimport { RTCDtlsTransport } from \"../transport/dtls\";\nimport { Kind } from \"../types/domain\";\nimport { milliTime, ntpTime } from \"../utils\";\nimport {\n  RTCRtpCodecParameters,\n  RTCRtpHeaderExtensionParameters,\n  RTCRtpSendParameters,\n} from \"./parameters\";\nimport { SenderBandwidthEstimator, SentInfo } from \"./senderBWE/senderBWE\";\nimport { MediaStreamTrack } from \"./track\";\n\nconst log = debug(\"werift:packages/webrtc/src/media/rtpSender.ts\");\n\nconst RTP_HISTORY_SIZE = 128;\nconst RTT_ALPHA = 0.85;\n\nexport class RTCRtpSender {\n  readonly type = \"sender\";\n  readonly kind =\n    typeof this.trackOrKind === \"string\"\n      ? this.trackOrKind\n      : this.trackOrKind.kind;\n  readonly ssrc = jspack.Unpack(\"!L\", randomBytes(4))[0];\n  readonly rtxSsrc = jspack.Unpack(\"!L\", randomBytes(4))[0];\n  readonly streamId = uuid.v4();\n  readonly trackId = uuid.v4();\n  readonly onReady = new Event();\n  readonly onRtcp = new Event<[RtcpPacket]>();\n  readonly onPictureLossIndication = new Event<[]>();\n  readonly onGenericNack = new Event<[GenericNack]>();\n  readonly senderBWE = new SenderBandwidthEstimator();\n\n  private cname?: string;\n  private mid?: string;\n  private rtpStreamId?: string;\n  private repairedRtpStreamId?: string;\n  private rtxPayloadType?: number;\n  private rtxSequenceNumber = random16();\n  private headerExtensions: RTCRtpHeaderExtensionParameters[] = [];\n  private disposeTrack?: () => void;\n\n  // # stats\n  private lsr?: bigint;\n  private lsrTime: number = Date.now() / 1000;\n  private ntpTimestamp = 0n;\n  private rtpTimestamp = 0;\n  private octetCount = 0;\n  private packetCount = 0;\n  private rtt?: number;\n  receiverEstimatedMaxBitrate: bigint = 0n;\n\n  // rtp\n  private sequenceNumber?: number;\n  private timestamp?: number;\n  private timestampOffset = 0;\n  private seqOffset = 0;\n  private rtpCache: RtpPacket[] = [];\n  private codec?: RTCRtpCodecParameters;\n\n  track?: MediaStreamTrack;\n  stopped = false;\n  rtcpRunning = false;\n  private rtcpCancel = new AbortController();\n\n  constructor(\n    public trackOrKind: Kind | MediaStreamTrack,\n    public dtlsTransport: RTCDtlsTransport\n  ) {\n    dtlsTransport.onStateChange.subscribe((state) => {\n      if (state === \"connected\") {\n        this.onReady.execute();\n      }\n    });\n    if (trackOrKind instanceof MediaStreamTrack) {\n      this.registerTrack(trackOrKind);\n    }\n  }\n\n  prepareSend(params: RTCRtpSendParameters) {\n    this.cname = params.rtcp?.cname;\n    this.mid = params.muxId;\n    this.headerExtensions = params.headerExtensions;\n    this.rtpStreamId = params.rtpStreamId;\n    this.repairedRtpStreamId = params.repairedRtpStreamId;\n\n    for (const codec of params.codecs) {\n      if (\n        codec.name.toLowerCase() === \"rtx\" &&\n        codec.parameters[\"apt\"] === params.codecs[0].payloadType\n      ) {\n        this.rtxPayloadType = codec.payloadType;\n        break;\n      }\n    }\n\n    this.codec = params.codecs[0];\n    if (this.track) {\n      this.track.codec = this.codec;\n    }\n  }\n\n  registerTrack(track: MediaStreamTrack) {\n    if (track.stopped) throw new Error(\"track is ended\");\n\n    if (this.disposeTrack) {\n      this.disposeTrack();\n    }\n\n    track.id = this.trackId;\n\n    const { unSubscribe } = track.onReceiveRtp.subscribe((rtp) => {\n      this.sendRtp(rtp);\n    });\n    this.track = track;\n    this.disposeTrack = unSubscribe;\n\n    if (this.codec) {\n      track.codec = this.codec;\n    }\n  }\n\n  async replaceTrack(track: MediaStreamTrack | null) {\n    if (track === null) {\n      // todo impl\n      return;\n    }\n\n    if (track.stopped) throw new Error(\"track is ended\");\n\n    if (this.sequenceNumber != undefined) {\n      const header =\n        track.header || (await track.onReceiveRtp.asPromise())[0].header;\n\n      this.replaceRTP(header);\n    }\n\n    this.registerTrack(track);\n    log(\"replaceTrack\", \"ssrc\", track.ssrc, \"rid\", track.rid);\n  }\n\n  stop() {\n    this.stopped = true;\n    this.rtcpRunning = false;\n    this.rtcpCancel.abort();\n\n    this.track = undefined;\n  }\n\n  async runRtcp() {\n    if (this.rtcpRunning || this.stopped) return;\n    this.rtcpRunning = true;\n\n    try {\n      while (this.rtcpRunning) {\n        await setTimeout(500 + Math.random() * 1000, undefined, {\n          signal: this.rtcpCancel.signal,\n        });\n\n        const packets: RtcpPacket[] = [\n          new RtcpSrPacket({\n            ssrc: this.ssrc,\n            senderInfo: new RtcpSenderInfo({\n              ntpTimestamp: this.ntpTimestamp,\n              rtpTimestamp: this.rtpTimestamp,\n              packetCount: this.packetCount,\n              octetCount: this.octetCount,\n            }),\n          }),\n        ];\n        this.lsr = (this.ntpTimestamp >> 16n) & 0xffffffffn;\n        this.lsrTime = Date.now() / 1000;\n\n        if (this.cname) {\n          packets.push(\n            new RtcpSourceDescriptionPacket({\n              chunks: [\n                new SourceDescriptionChunk({\n                  source: this.ssrc,\n                  items: [\n                    new SourceDescriptionItem({ type: 1, text: this.cname }),\n                  ],\n                }),\n              ],\n            })\n          );\n        }\n\n        try {\n          await this.dtlsTransport.sendRtcp(packets);\n        } catch (error) {\n          log(\"sendRtcp failed\", error);\n          await setTimeout(500 + Math.random() * 1000);\n        }\n      }\n    } catch (error) {}\n  }\n\n  private replaceRTP({ sequenceNumber, timestamp }: RtpHeader) {\n    if (this.sequenceNumber != undefined) {\n      this.seqOffset = uint16Add(this.sequenceNumber, -sequenceNumber);\n    }\n    if (this.timestamp != undefined) {\n      this.timestampOffset = Number(\n        uint32Add(BigInt(this.timestamp), BigInt(-timestamp))\n      );\n    }\n    this.rtpCache = [];\n    log(\"replaceRTP\", this.sequenceNumber, sequenceNumber, this.seqOffset);\n  }\n\n  sendRtp(rtp: Buffer | RtpPacket) {\n    if (this.dtlsTransport.state !== \"connected\" || !this.codec) {\n      return;\n    }\n\n    rtp = Buffer.isBuffer(rtp) ? RtpPacket.deSerialize(rtp) : rtp;\n\n    const header = rtp.header;\n    header.ssrc = this.ssrc;\n    header.payloadType = this.codec.payloadType;\n    header.timestamp = Number(\n      uint32Add(BigInt(header.timestamp), BigInt(this.timestampOffset))\n    );\n    header.sequenceNumber = uint16Add(header.sequenceNumber, this.seqOffset);\n    this.timestamp = header.timestamp;\n    this.sequenceNumber = header.sequenceNumber;\n\n    header.extensions = this.headerExtensions\n      .map((extension) => {\n        const payload = (() => {\n          switch (extension.uri) {\n            case RTP_EXTENSION_URI.sdesMid:\n              if (this.mid) {\n                return Buffer.from(this.mid);\n              }\n              return;\n            // todo : sender simulcast unsupported now\n            case RTP_EXTENSION_URI.sdesRTPStreamID:\n              if (this.rtpStreamId) {\n                return Buffer.from(this.rtpStreamId);\n              }\n              return;\n            // todo : sender simulcast unsupported now\n            case RTP_EXTENSION_URI.repairedRtpStreamId:\n              if (this.repairedRtpStreamId) {\n                return Buffer.from(this.repairedRtpStreamId);\n              }\n              return;\n            case RTP_EXTENSION_URI.transportWideCC:\n              this.dtlsTransport.transportSequenceNumber = uint16Add(\n                this.dtlsTransport.transportSequenceNumber,\n                1\n              );\n              return bufferWriter(\n                [2],\n                [this.dtlsTransport.transportSequenceNumber]\n              );\n            case RTP_EXTENSION_URI.absSendTime:\n              const buf = Buffer.alloc(3);\n              const time = (ntpTime() >> 14n) & 0x00ffffffn;\n              buf.writeUIntBE(Number(time), 0, 3);\n              return buf;\n          }\n        })();\n\n        if (payload) return { id: extension.id, payload };\n      })\n      .filter((v) => v) as Extension[];\n\n    this.ntpTimestamp = ntpTime();\n    this.rtpTimestamp = rtp.header.timestamp;\n    this.octetCount += rtp.payload.length;\n    this.packetCount = Number(uint32Add(BigInt(this.packetCount), 1n));\n\n    rtp.header = header;\n\n    this.rtpCache.push(rtp);\n    this.rtpCache = this.rtpCache.slice(-RTP_HISTORY_SIZE);\n\n    const size = this.dtlsTransport.sendRtp(rtp.payload, header);\n\n    this.runRtcp();\n    const sentInfo: SentInfo = {\n      wideSeq: this.dtlsTransport.transportSequenceNumber,\n      size,\n      sendingAtMs: milliTime(),\n      sentAtMs: milliTime(),\n    };\n    this.senderBWE.rtpPacketSent(sentInfo);\n  }\n\n  handleRtcpPacket(rtcpPacket: RtcpPacket) {\n    switch (rtcpPacket.type) {\n      case RtcpSrPacket.type:\n      case RtcpRrPacket.type:\n        {\n          const packet = rtcpPacket as RtcpSrPacket | RtcpRrPacket;\n          packet.reports\n            .filter((report) => report.ssrc === this.ssrc)\n            .forEach((report) => {\n              if (this.lsr === BigInt(report.lsr) && report.dlsr) {\n                const rtt =\n                  Date.now() / 1000 - this.lsrTime - report.dlsr / 65536;\n                if (this.rtt === undefined) {\n                  this.rtt = rtt;\n                } else {\n                  this.rtt = RTT_ALPHA * this.rtt + (1 - RTT_ALPHA) * rtt;\n                }\n              }\n            });\n        }\n        break;\n      case RtcpTransportLayerFeedback.type:\n        {\n          const packet = rtcpPacket as RtcpTransportLayerFeedback;\n          switch (packet.feedback.count) {\n            case TransportWideCC.count:\n              {\n                const feedback = packet.feedback as TransportWideCC;\n                this.senderBWE.receiveTWCC(feedback);\n              }\n              break;\n            case GenericNack.count:\n              {\n                const feedback = packet.feedback as GenericNack;\n                feedback.lost.forEach((seqNum) => {\n                  let packet = this.rtpCache.find(\n                    (rtp) => rtp.header.sequenceNumber === seqNum\n                  );\n                  if (packet) {\n                    if (this.rtxPayloadType != undefined) {\n                      packet = wrapRtx(\n                        packet,\n                        this.rtxPayloadType,\n                        this.rtxSequenceNumber,\n                        this.rtxSsrc\n                      );\n                      this.rtxSequenceNumber = uint16Add(\n                        this.rtxSequenceNumber,\n                        1\n                      );\n                    }\n                    this.dtlsTransport.sendRtp(packet.payload, packet.header);\n                  }\n                });\n                this.onGenericNack.execute(feedback);\n              }\n              break;\n          }\n        }\n        break;\n      case RtcpPayloadSpecificFeedback.type:\n        {\n          const packet = rtcpPacket as RtcpPayloadSpecificFeedback;\n          switch (packet.feedback.count) {\n            case ReceiverEstimatedMaxBitrate.count:\n              {\n                const feedback = packet.feedback as ReceiverEstimatedMaxBitrate;\n                this.receiverEstimatedMaxBitrate = feedback.bitrate;\n              }\n              break;\n            case PictureLossIndication.count:\n              {\n                this.onPictureLossIndication.execute();\n              }\n              break;\n          }\n        }\n        break;\n    }\n    this.onRtcp.execute(rtcpPacket);\n  }\n}\n\nexport function wrapRtx(\n  packet: RtpPacket,\n  payloadType: number,\n  sequenceNumber: number,\n  ssrc: number\n) {\n  const rtx = new RtpPacket(\n    new RtpHeader({\n      payloadType,\n      marker: packet.header.marker,\n      sequenceNumber,\n      timestamp: packet.header.timestamp,\n      ssrc,\n      csrc: packet.header.csrc,\n      extensions: packet.header.extensions,\n    }),\n    Buffer.concat([\n      Buffer.from(jspack.Pack(\"!H\", [packet.header.sequenceNumber])),\n      packet.payload,\n    ])\n  );\n  return rtx;\n}\n"]}