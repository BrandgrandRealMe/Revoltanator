{"version":3,"file":"statistics.js","sourceRoot":"","sources":["../../../../src/media/statistics.ts"],"names":[],"mappings":"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","sourcesContent":["import { int, uint16Gt } from \"../../../common/src\";\nimport { RtpPacket } from \"../../../rtp/src\";\n\n// from aiortc\n\nexport class StreamStatistics {\n  base_seq?: number;\n  max_seq?: number;\n  cycles = 0;\n  packets_received = 0;\n\n  // # jitter\n  private clockRate: number;\n  jitter_q4 = 0;\n  private last_arrival?: number;\n  private last_timestamp?: number;\n\n  // # fraction lost\n  expected_prior = 0;\n  received_prior = 0;\n\n  constructor(clockRate: number) {\n    this.clockRate = clockRate;\n  }\n\n  add(packet: RtpPacket, now: number = Date.now() / 1000) {\n    const inOrder =\n      this.max_seq == undefined ||\n      uint16Gt(packet.header.sequenceNumber, this.max_seq);\n    this.packets_received++;\n\n    if (this.base_seq == undefined) {\n      this.base_seq = packet.header.sequenceNumber;\n    }\n\n    if (inOrder) {\n      const arrival = int(now * this.clockRate);\n\n      if (\n        this.max_seq != undefined &&\n        packet.header.sequenceNumber < this.max_seq\n      ) {\n        this.cycles += 1 << 16;\n      }\n      this.max_seq = packet.header.sequenceNumber;\n\n      if (\n        packet.header.timestamp !== this.last_timestamp &&\n        this.packets_received > 1\n      ) {\n        const diff = Math.abs(\n          arrival -\n            (this.last_arrival ?? 0) -\n            (packet.header.timestamp - (this.last_timestamp ?? 0))\n        );\n        this.jitter_q4 += diff - ((this.jitter_q4 + 8) >> 4);\n      }\n\n      this.last_arrival = arrival;\n      this.last_timestamp = packet.header.timestamp;\n    }\n  }\n\n  get fraction_lost() {\n    const expected_interval = this.packets_expected - this.expected_prior;\n    this.expected_prior = this.packets_expected;\n    const received_interval = this.packets_received - this.received_prior;\n    this.received_prior = this.packets_received;\n    const lost_interval = expected_interval - received_interval;\n    if (expected_interval == 0 || lost_interval <= 0) {\n      return 0;\n    } else {\n      return Math.floor((lost_interval << 8) / expected_interval);\n    }\n  }\n\n  get jitter() {\n    return this.jitter_q4 >> 4;\n  }\n\n  get packets_expected() {\n    return this.cycles + (this.max_seq ?? 0) - (this.base_seq ?? 0) + 1;\n  }\n\n  get packets_lost() {\n    const lost = this.packets_expected - this.packets_received;\n    return lost < 0 ? 0 : lost;\n  }\n}\n"]}