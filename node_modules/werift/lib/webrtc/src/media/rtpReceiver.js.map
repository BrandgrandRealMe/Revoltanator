{"version":3,"file":"rtpReceiver.js","sourceRoot":"","sources":["../../../../src/media/rtpReceiver.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug } from \"debug\";\nimport { jspack } from \"jspack\";\nimport { setTimeout } from \"timers/promises\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { int } from \"../../../common/src\";\nimport {\n  PictureLossIndication,\n  RtcpPacket,\n  RtcpPayloadSpecificFeedback,\n  RtcpReceiverInfo,\n  RtcpRrPacket,\n  RtcpSrPacket,\n  RtpHeader,\n  RtpPacket,\n} from \"../../../rtp/src\";\nimport { RTP_EXTENSION_URI } from \"../extension/rtpExtension\";\nimport { RTCDtlsTransport } from \"../transport/dtls\";\nimport { Kind } from \"../types/domain\";\nimport { Nack } from \"./nack\";\nimport { RTCRtpCodecParameters, RTCRtpReceiveParameters } from \"./parameters\";\nimport { ReceiverTWCC } from \"./receiver/receiverTwcc\";\nimport { Extensions } from \"./router\";\nimport { StreamStatistics } from \"./statistics\";\nimport { MediaStreamTrack } from \"./track\";\n\nconst log = debug(\"werift:packages/webrtc/src/media/rtpReceiver.ts\");\n\nexport class RTCRtpReceiver {\n  private readonly codecs: { [pt: number]: RTCRtpCodecParameters } = {};\n  private readonly ssrcByRtx: { [rtxSsrc: number]: number } = {};\n  private readonly nack = new Nack(this);\n\n  readonly type = \"receiver\";\n  readonly uuid = uuid();\n  readonly tracks: MediaStreamTrack[] = [];\n  readonly trackBySSRC: { [ssrc: string]: MediaStreamTrack } = {};\n  readonly trackByRID: { [rid: string]: MediaStreamTrack } = {};\n  // last senderReport\n  readonly lsr: { [ssrc: number]: BigInt } = {};\n  readonly lsrTime: { [ssrc: number]: number } = {};\n  readonly onPacketLost = this.nack.onPacketLost;\n\n  sdesMid?: string;\n  latestRid?: string;\n  latestRepairedRid?: string;\n\n  receiverTWCC?: ReceiverTWCC;\n  supportTWCC = false;\n  stopped = false;\n  remoteStreamId?: string;\n  remoteTrackId?: string;\n\n  rtcpRunning = false;\n  private rtcpCancel = new AbortController();\n  private remoteStreams: { [ssrc: number]: StreamStatistics } = {};\n\n  constructor(\n    public kind: Kind,\n    public dtlsTransport: RTCDtlsTransport,\n    public rtcpSsrc: number\n  ) {}\n\n  // todo fix\n  get track() {\n    return this.tracks[0];\n  }\n\n  prepareReceive(params: RTCRtpReceiveParameters) {\n    params.codecs.forEach((c) => {\n      this.codecs[c.payloadType] = c;\n    });\n    params.encodings.forEach((e) => {\n      if (e.rtx) {\n        this.ssrcByRtx[e.rtx.ssrc] = e.ssrc;\n      }\n    });\n  }\n\n  /**\n   * setup TWCC if supported\n   */\n  setupTWCC(mediaSourceSsrc?: number) {\n    this.supportTWCC = !!Object.values(this.codecs).find((codec) =>\n      codec.rtcpFeedback.find((v) => v.type === \"transport-cc\")\n    );\n    log(\"twcc support\", this.supportTWCC);\n\n    if (this.supportTWCC && mediaSourceSsrc) {\n      this.receiverTWCC = new ReceiverTWCC(\n        this.dtlsTransport,\n        this.rtcpSsrc,\n        mediaSourceSsrc\n      );\n    }\n  }\n\n  addTrack(track: MediaStreamTrack) {\n    const exist = this.tracks.find((t) => {\n      if (t.rid) return t.rid === track.rid;\n      if (t.ssrc) return t.ssrc === track.ssrc;\n    });\n    if (exist) return false;\n    this.tracks.push(track);\n    if (track.ssrc) this.trackBySSRC[track.ssrc] = track;\n    if (track.rid) this.trackByRID[track.rid] = track;\n    return true;\n  }\n\n  stop() {\n    this.stopped = true;\n    this.rtcpRunning = false;\n    this.rtcpCancel.abort();\n\n    if (this.receiverTWCC) this.receiverTWCC.twccRunning = false;\n    this.nack.close();\n  }\n\n  async runRtcp() {\n    if (this.rtcpRunning || this.stopped) return;\n    this.rtcpRunning = true;\n\n    try {\n      while (this.rtcpRunning) {\n        await setTimeout(500 + Math.random() * 1000, undefined, {\n          signal: this.rtcpCancel.signal,\n        });\n\n        const reports = Object.entries(this.remoteStreams).map(\n          ([ssrc, stream]) => {\n            let lsr = 0n,\n              dlsr = 0;\n            if (this.lsr[ssrc]) {\n              lsr = this.lsr[ssrc];\n              const delay = Date.now() / 1000 - this.lsrTime[ssrc];\n              if (delay > 0 && delay < 65536) {\n                dlsr = int(delay * 65536);\n              }\n            }\n\n            return new RtcpReceiverInfo({\n              ssrc: Number(ssrc),\n              fractionLost: stream.fraction_lost,\n              packetsLost: stream.packets_lost,\n              highestSequence: stream.max_seq,\n              jitter: stream.jitter,\n              lsr: Number(lsr),\n              dlsr,\n            });\n          }\n        );\n\n        const packet = new RtcpRrPacket({ ssrc: this.rtcpSsrc, reports });\n\n        try {\n          await this.dtlsTransport.sendRtcp([packet]);\n        } catch (error) {\n          log(\"sendRtcp failed\", error);\n          await setTimeout(500 + Math.random() * 1000);\n        }\n      }\n    } catch (error) {}\n  }\n\n  /**todo impl */\n  getStats() {}\n\n  async sendRtcpPLI(mediaSsrc: number) {\n    const packet = new RtcpPayloadSpecificFeedback({\n      feedback: new PictureLossIndication({\n        senderSsrc: this.rtcpSsrc,\n        mediaSsrc,\n      }),\n    });\n    try {\n      await this.dtlsTransport.sendRtcp([packet]);\n    } catch (error) {\n      log(error);\n    }\n  }\n\n  handleRtcpPacket(packet: RtcpPacket) {\n    switch (packet.type) {\n      case RtcpSrPacket.type:\n        {\n          const sr = packet as RtcpSrPacket;\n          this.lsr[sr.ssrc] = (sr.senderInfo.ntpTimestamp >> 16n) & 0xffffffffn;\n          this.lsrTime[sr.ssrc] = Date.now() / 1000;\n        }\n        break;\n    }\n  }\n\n  handleRtpBySsrc = (packet: RtpPacket, extensions: Extensions) => {\n    const track = this.trackBySSRC[packet.header.ssrc];\n\n    this.handleRTP(packet, extensions, track);\n  };\n\n  handleRtpByRid = (packet: RtpPacket, rid: string, extensions: Extensions) => {\n    const track = this.trackByRID[rid];\n    if (!this.trackBySSRC[packet.header.ssrc]) {\n      this.trackBySSRC[packet.header.ssrc] = track;\n    }\n\n    this.handleRTP(packet, extensions, track);\n  };\n\n  private handleRTP(\n    packet: RtpPacket,\n    extensions: Extensions,\n    track?: MediaStreamTrack\n  ) {\n    if (this.stopped) return;\n\n    const codec = this.codecs[packet.header.payloadType];\n    if (!codec) {\n      log(\"unknown codec \" + packet.header.payloadType);\n      return;\n    }\n\n    this.remoteStreams[packet.header.ssrc] =\n      this.remoteStreams[packet.header.ssrc] ??\n      new StreamStatistics(codec.clockRate);\n    this.remoteStreams[packet.header.ssrc].add(packet);\n\n    if (this.receiverTWCC) {\n      const transportSequenceNumber = extensions[\n        RTP_EXTENSION_URI.transportWideCC\n      ] as number;\n      if (!transportSequenceNumber == undefined) {\n        throw new Error(\"undefined\");\n      }\n\n      this.receiverTWCC.handleTWCC(transportSequenceNumber);\n    } else if (this.supportTWCC) {\n      this.setupTWCC(packet.header.ssrc);\n    }\n\n    if (codec.name.toLowerCase() === \"rtx\") {\n      const originalSsrc = this.ssrcByRtx[packet.header.ssrc];\n      const rtxCodec = this.codecs[codec.parameters[\"apt\"]];\n      if (packet.payload.length < 2) return;\n\n      packet = unwrapRtx(packet, rtxCodec.payloadType, originalSsrc);\n      track = this.trackBySSRC[originalSsrc];\n    }\n\n    // todo fix select use or not use nack\n    if (track?.kind === \"video\") this.nack.addPacket(packet);\n\n    if (track) track.onReceiveRtp.execute(packet.clone());\n\n    this.runRtcp();\n  }\n}\n\nexport function unwrapRtx(rtx: RtpPacket, payloadType: number, ssrc: number) {\n  const packet = new RtpPacket(\n    new RtpHeader({\n      payloadType,\n      marker: rtx.header.marker,\n      sequenceNumber: jspack.Unpack(\"!H\", rtx.payload.slice(0, 2))[0],\n      timestamp: rtx.header.timestamp,\n      ssrc,\n    }),\n    rtx.payload.slice(2)\n  );\n  return packet;\n}\n"]}