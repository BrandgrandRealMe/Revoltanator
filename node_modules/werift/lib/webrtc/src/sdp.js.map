{"version":3,"file":"sdp.js","sourceRoot":"","sources":["../../../src/sdp.ts"],"names":[],"mappings":";;;AAAA,mCAAqC;AACrC,+CAAwC;AACxC,mCAA+B;AAC/B,6BAA6B;AAE7B,mCAKiB;AACjB,qCAAkC;AAClC,mDAM4B;AAE5B,2CAI0B;AAC1B,yCAAiE;AACjE,2CAAuD;AAGvD,MAAa,kBAAkB;IAA/B;QACE,YAAO,GAAG,CAAC,CAAC;QAEZ,SAAI,GAAG,GAAG,CAAC;QACX,SAAI,GAAG,KAAK,CAAC;QAEb,UAAK,GAAuB,EAAE,CAAC;QAC/B,qBAAgB,GAAG,IAAI,CAAC;QACxB,iBAAY,GAAuB,EAAE,CAAC;QACtC,UAAK,GAAuB,EAAE,CAAC;QAO/B,qBAAgB,GAAyB,EAAE,CAAC;IAgS9C,CAAC;IA9RC,MAAM,CAAC,KAAK,CAAC,GAAW;QACtB,MAAM,CAAC,YAAY,EAAE,WAAW,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QAEpD,MAAM,OAAO,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACzC,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC5B,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBACzB,OAAO,CAAC,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;aAC/C;iBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBAChC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAChC;iBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBAChC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAC9B;iBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBAChC,OAAO,CAAC,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aAChD;iBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBAChC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAC9B;iBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;gBAChC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;gBACtC,QAAQ,IAAI,EAAE;oBACZ,KAAK,aAAa;wBAChB,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;wBACzD,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAC3B,IAAI,yBAAkB,CAAC,SAAS,EAAE,WAAW,CAAC,CAC/C,CAAC;wBACF,MAAM;oBACR,KAAK,UAAU;wBACb,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;wBACvB,MAAM;oBACR,KAAK,aAAa;wBAChB,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC;wBAC3B,MAAM;oBACR,KAAK,SAAS;wBACZ,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC;wBAC5B,MAAM;oBACR,KAAK,WAAW;wBACd,OAAO,CAAC,mBAAmB,GAAG,KAAK,CAAC;wBACpC,MAAM;oBACR,KAAK,OAAO;wBACV,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;wBACjC,MAAM;oBACR,KAAK,eAAe;wBAClB,UAAU,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;wBACxC,MAAM;oBACR,KAAK,OAAO;wBACV,OAAO,CAAC,QAAQ,GAAG,uBAAe,CAAC,KAAK,CAAC,CAAC;wBAC1C,MAAM;oBACR,KAAK,oBAAoB;wBACvB,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;wBAChC,MAAM;iBACT;aACF;QACH,CAAC,CAAC,CAAC;QAEH,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACjC,MAAM,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;YAC7D,IAAI,CAAC,CAAC,EAAE;gBACN,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;aACrC;YAED,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAS,CAAC;YAC1B,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC5B,WAAW;YACX,MAAM,MAAM,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAC9C,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC3B,CAAC,CAAC,SAAS,CAAC;YAEd,MAAM,YAAY,GAAG,IAAI,gBAAgB,CACvC,IAAI,EACJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACd,CAAC,CAAC,CAAC,CAAC,EACJ,MAAM,IAAI,GAAG,CACd,CAAC;YACF,YAAY,CAAC,UAAU,GAAG,IAAI,wBAAiB,CAC7C,CAAC,GAAG,OAAO,CAAC,gBAAgB,CAAC,EAC7B,OAAO,CAAC,QAAQ,CACjB,CAAC;YACF,YAAY,CAAC,SAAS,GAAG,IAAI,sBAAgB,CAAC;gBAC5C,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,gBAAgB,EAAE,OAAO,CAAC,mBAAmB;gBAC7C,QAAQ,EAAE,OAAO,CAAC,WAAW;aAC9B,CAAC,CAAC;YACH,YAAY,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;YAC7C,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAEjC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACnC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;oBACzB,YAAY,CAAC,IAAI,GAAG,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBACrD;qBAAM,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;oBAChC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;oBAEtC,QAAQ,IAAI,EAAE;wBACZ,KAAK,WAAW;4BACd,IAAI,CAAC,KAAK;gCAAE,MAAM,IAAI,KAAK,EAAE,CAAC;4BAC9B,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;4BACzD,MAAM;wBACR,KAAK,mBAAmB;4BACtB,YAAY,CAAC,qBAAqB,GAAG,IAAI,CAAC;4BAC1C,MAAM;wBACR,KAAK,QAAQ;4BACX,wCAAwC;4BACxC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;4BACvC,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gCACvB,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;6BAC5B;4BACD,YAAY,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CACpC,IAAI,4CAA+B,CAAC;gCAClC,EAAE,EAAE,QAAQ,CAAC,KAAK,CAAC;gCACnB,GAAG,EAAE,MAAM;6BACZ,CAAC,CACH,CAAC;4BACF,MAAM;wBACR,KAAK,aAAa;4BAChB,IAAI,CAAC,KAAK;gCAAE,MAAM,IAAI,KAAK,EAAE,CAAC;4BAC9B,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;4BAClD,YAAY,CAAC,UAAU,EAAE,YAAY,CAAC,IAAI,CACxC,IAAI,yBAAkB,CAAC,SAAS,EAAE,WAAW,CAAC,CAC/C,CAAC;4BACF,MAAM;wBACR,KAAK,aAAa;4BAChB,YAAY,CAAC,UAAU,GAAG,KAAK,CAAC;4BAChC,MAAM;wBACR,KAAK,SAAS;4BACZ,YAAY,CAAC,SAAU,CAAC,QAAQ,GAAG,KAAK,CAAC;4BACzC,MAAM;wBACR,KAAK,WAAW;4BACd,YAAY,CAAC,SAAU,CAAC,gBAAgB,GAAG,KAAK,CAAC;4BACjD,MAAM;wBACR,KAAK,UAAU;4BACb,YAAY,CAAC,SAAU,CAAC,OAAO,GAAG,IAAI,CAAC;4BACvC,MAAM;wBACR,KAAK,kBAAkB;4BACrB,YAAY,CAAC,gBAAgB,GAAG,IAAI,0BAAmB,CACrD,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CACpB,CAAC;4BACF,MAAM;wBACR,KAAK,KAAK;4BACR,YAAY,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;4BAC/B,MAAM;wBACR,KAAK,MAAM;4BACT,YAAY,CAAC,IAAI,GAAG,KAAK,CAAC;4BAC1B,MAAM;wBACR,KAAK,MAAM;4BACT,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,eAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;4BACxC,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;4BACvC,YAAY,CAAC,QAAQ,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;4BAC/C,MAAM;wBACR,KAAK,UAAU;4BACb,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC;4BAC5B,MAAM;wBACR,KAAK,OAAO;4BACV,YAAY,CAAC,UAAW,CAAC,IAAI,GAAG,uBAAe,CAAC,KAAK,CAAC,CAAC;4BACvD,MAAM;wBACR,KAAK,UAAU,CAAC;wBAChB,KAAK,UAAU,CAAC;wBAChB,KAAK,UAAU,CAAC;wBAChB,KAAK,UAAU;4BACb,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC;4BAC9B,MAAM;wBACR,KAAK,QAAQ;4BACX;gCACE,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAG,eAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gCAClD,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gCACrD,IAAI,QAA4B,CAAC;gCACjC,IAAI,YAAY,CAAC,IAAI,KAAK,OAAO,EAAE;oCACjC,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iCAC5C;gCACD,MAAM,KAAK,GAAG,IAAI,kCAAqB,CAAC;oCACtC,QAAQ,EAAE,YAAY,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI;oCACxC,QAAQ;oCACR,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC;oCAC1B,WAAW,EAAE,QAAQ,CAAC,QAAQ,CAAC;iCAChC,CAAC,CAAC;gCACH,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;6BACrC;4BACD,MAAM;wBACR,KAAK,SAAS;4BACZ,IAAI,CAAC,KAAK;gCAAE,MAAM,IAAI,KAAK,EAAE,CAAC;4BAC9B,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAG,eAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;4BACjD,YAAoB,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC;4BAC7D,MAAM;wBACR,KAAK,WAAW;4BACd,IAAI,CAAC,KAAK;gCAAE,MAAM,IAAI,KAAK,EAAE,CAAC;4BAC9B,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;4BACxC,MAAM;wBACR,KAAK,MAAM;4BACT,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,eAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;4BAC/C,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;4BAC/B,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,GAAG,eAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;4BACpD,IAAI,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;4BAC9D,IAAI,CAAC,QAAQ,EAAE;gCACb,QAAQ,GAAG,IAAI,eAAe,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;gCACzC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;6BAClC;4BACD,IAAI,uBAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gCACtC,QAAQ,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC;6BAChC;4BACD,MAAM;wBACR,KAAK,YAAY;4BACf,UAAU,CAAC,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;4BAC1C,MAAM;wBACR,KAAK,KAAK;4BACR;gCACE,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,eAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gCAE5C,YAAY,CAAC,mBAAmB,CAAC,IAAI,CACnC,IAAI,sCAAyB,CAAC;oCAC5B,GAAG;oCACH,SAAS,EAAE,SAAgB;iCAC5B,CAAC,CACH,CAAC;6BACH;4BACD,MAAM;qBACT;iBACF;YACH,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE;gBACjC,YAAY,CAAC,UAAU,GAAG,SAAS,CAAC;aACrC;YAED,MAAM,SAAS,GAAG,CAAC,EAAU,EAAE,EAAE,CAC/B,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,EAAE,CAAC,CAAC;YAE5D,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACnC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;oBACzB,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;oBACtC,IAAI,IAAI,KAAK,MAAM,EAAE;wBACnB,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAG,eAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;wBAClD,MAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAE,CAAC;wBAC3C,KAAK,CAAC,UAAU,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;qBAClD;yBAAM,IAAI,IAAI,KAAK,SAAS,EAAE;wBAC7B,MAAM,CAAC,WAAW,EAAE,YAAY,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACpE,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;4BACxC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,WAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;gCAC9D,KAAK,CAAC,YAAY,CAAC,IAAI,CACrB,IAAI,4BAAe,CAAC;oCAClB,IAAI,EAAE,YAAY;oCAClB,SAAS,EAAE,aAAa;iCACzB,CAAC,CACH,CAAC;6BACH;wBACH,CAAC,CAAC,CAAC;qBACJ;iBACF;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,aAAa,CAAC,KAAuB;QACnC,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC1C,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrC,IACE,KAAK,CAAC,QAAQ,KAAK,KAAK;oBACxB,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAC5D;oBACA,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;iBAChB;aACF;SACF;QACD,OAAO;IACT,CAAC;IAED,IAAI,MAAM;QACR,MAAM,KAAK,GAAG,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE,EAAE,KAAK,IAAI,CAAC,MAAM,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAC1E,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,KAAK,CAAC,IAAI,CAAC,KAAK,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAChD;QACD,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAClE,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAClC,KAAK,CAAC,IAAI,CAAC,mBAAmB,KAAK,CAAC,GAAG,EAAE,CAAC,CAC3C,CAAC;QACF,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3D,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,KAAK,CAAC;QAChD,OAAO,GAAG,CAAC;IACb,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;CACF;AAhTD,gDAgTC;AAED,MAAa,gBAAgB;IAmC3B,YACS,IAAU,EACV,IAAY,EACZ,OAAe,EACf,GAAwB;QAHxB,SAAI,GAAJ,IAAI,CAAM;QACV,SAAI,GAAJ,IAAI,CAAQ;QACZ,YAAO,GAAP,OAAO,CAAQ;QACf,QAAG,GAAH,GAAG,CAAqB;QA9BjC,YAAO,GAAG,KAAK,CAAC;QAEhB,OAAO;QACP,SAAI,GAAsB,EAAE,CAAC;QAC7B,cAAS,GAAuB,EAAE,CAAC;QAEnC,UAAU;QACV,QAAG,GAAqB,EAAE,MAAM,EAAE,EAAE,EAAE,gBAAgB,EAAE,EAAE,EAAE,CAAC;QAI7D,YAAO,GAA8B,EAAE,CAAC;QAQxC,kBAAa,GAAmB,EAAE,CAAC;QACnC,0BAAqB,GAAG,KAAK,CAAC;QAG9B,YAAY;QACZ,wBAAmB,GAAgC,EAAE,CAAC;IAOnD,CAAC;IAEJ,QAAQ;QACN,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,KAAK,CAAC,IAAI,CACR,KAAK,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,IAAK,IAAI,CAAC,GAAgB;aAClE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;aACxB,IAAI,CAAC,GAAG,CAAC,EAAE,CACf,CAAC;QACF,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,KAAK,CAAC,IAAI,CAAC,KAAK,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC9C;QACD,MAAM;QACN,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;YACvC,KAAK,CAAC,IAAI,CAAC,eAAe,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QACH,IAAI,IAAI,CAAC,qBAAqB,EAAE;YAC9B,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;SACnC;QACD,IAAI,IAAI,CAAC,SAAS,EAAE,gBAAgB,EAAE;YACpC,KAAK,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC;SAC9D;QACD,IAAI,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE;YAC5B,KAAK,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;SACpD;QACD,IAAI,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE;YAC3B,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SAC1B;QACD,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,KAAK,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;SAChD;QAED,OAAO;QACP,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;gBACnD,KAAK,CAAC,IAAI,CACR,iBAAiB,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,EAAE,CAC9D,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,IAAI,CAAC,WAAW,uBAAe,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAChE;QAED,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;SACnC;QACD,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;YAClB,KAAK,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;SACvC;QACD,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,KAAK,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SACnC;QAED,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClC,KAAK,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,QAAQ,IAAI,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YACvE,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aAC1B;SACF;QAED,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC/B,KAAK,CAAC,IAAI,CAAC,gBAAgB,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC7B,uBAAe,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACnC,MAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACrC,IAAI,SAAS,KAAK,SAAS,EAAE;oBAC3B,KAAK,CAAC,IAAI,CAAC,UAAU,QAAQ,CAAC,IAAI,IAAI,QAAQ,IAAI,SAAS,EAAE,CAAC,CAAC;iBAChE;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAChC,KAAK,CAAC,IAAI,CAAC,YAAY,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;YAEzD,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACtC,IAAI,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC;gBAC1B,IAAI,QAAQ,CAAC,SAAS;oBAAE,KAAK,IAAI,IAAI,QAAQ,CAAC,SAAS,EAAE,CAAC;gBAC1D,KAAK,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,WAAW,IAAI,KAAK,EAAE,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,eAAe,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,MAAM,EAAE;gBACV,KAAK,CAAC,IAAI,CAAC,UAAU,KAAK,CAAC,WAAW,IAAI,MAAM,EAAE,CAAC,CAAC;aACrD;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YACtC,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QACH,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,KAAK,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC5C;QACD,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,KAAK,CAAC,IAAI,CAAC,sBAAsB,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC,CAAC;SAC1E;QAED,gBAAgB;QAChB,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE,CAC9C,KAAK,CAAC,IAAI,CAAC,YAAY,SAAS,CAAC,EAAE,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CACxD,CAAC;QAEF,YAAY;QACZ,IAAI,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE;YACnC,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBACzC,KAAK,CAAC,IAAI,CAAC,SAAS,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;YACH,IAAI,IAAI,GAAG,cAAc,CAAC;YAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAC1C,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,MAAM,CAC9B,CAAC;YACF,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,IAAI,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;aACrD;YACD,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAC1C,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,MAAM,CAC9B,CAAC;YACF,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,IAAI,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;aACpD;YAED,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;QAED,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;IACrC,CAAC;CACF;AAtKD,4CAsKC;AAED,MAAa,gBAAgB;IAC3B,YAAmB,QAAgB,EAAS,KAAe;QAAxC,aAAQ,GAAR,QAAQ,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAU;IAAG,CAAC;IAE/D,IAAI,GAAG;QACL,OAAO,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;IACpD,CAAC;CACF;AAND,4CAMC;AAED,SAAS,gBAAgB,CAAC,GAAW;IACnC,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC9C,IAAI,CAAC,CAAC;QAAE,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;IACrC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC;AAED,SAAS,cAAc,CAAC,IAAY;IAClC,MAAM,OAAO,GAAG,YAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,OAAO,QAAQ,OAAO,IAAI,IAAI,EAAE,CAAC;AACnC,CAAC;AAED,SAAgB,cAAc,CAAC,CAAe;IAC5C,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC;IACvG,IAAI,CAAC,CAAC,cAAc,EAAE;QACpB,GAAG,IAAI,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC;KACrC;IACD,IAAI,CAAC,CAAC,WAAW,EAAE;QACjB,GAAG,IAAI,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;KAClC;IACD,IAAI,CAAC,CAAC,OAAO,EAAE;QACb,GAAG,IAAI,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC;KAChC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAZD,wCAYC;AAED,SAAS,UAAU,CAAC,GAAW;IAC7B,MAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,MAAM,KAAK,GAAe,EAAE,CAAC;IAE7B,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC9B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KACzB;IAED,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACrB,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YACzB,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACpB;aAAM,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpC;aAAM;YACL,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpB;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAC1B,CAAC;AAED,SAAS,SAAS,CAAC,IAAY;IAC7B,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACtB,MAAM,IAAI,GAAG,eAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACxC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;KAC3B;SAAM;QACL,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,SAAgB,CAAC,CAAC;KAC1C;AACH,CAAC;AAED,SAAgB,UAAU,CACxB,IAAwB,EACxB,KAAa,EACb,OAA2B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE;IAE9C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC9B,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QACnB,IAAI,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACnE;AACH,CAAC;AATD,gCASC;AAED,SAAgB,gBAAgB,CAAC,GAAW;IAC1C,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC5B,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QACnB,MAAM,IAAI,KAAK,EAAE,CAAC;KACnB;IAED,MAAM,SAAS,GAAG,IAAI,kBAAY,CAChC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EACrB,IAAI,CAAC,CAAC,CAAC,EACP,IAAI,CAAC,CAAC,CAAC,EACP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EACrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EACrB,IAAI,CAAC,CAAC,CAAC,EACP,IAAI,CAAC,CAAC,CAAC,CACR,CAAC;IAEF,cAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;QACzC,QAAQ,IAAI,CAAC,CAAC,CAAC,EAAE;YACf,KAAK,OAAO;gBACV,SAAS,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACvC,MAAM;YACR,KAAK,OAAO;gBACV,SAAS,CAAC,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC9C,MAAM;YACR,KAAK,SAAS;gBACZ,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAChC,MAAM;SACT;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC;AACnB,CAAC;AA/BD,4CA+BC;AAED,MAAa,qBAAqB;IAChC,YAAmB,GAAW,EAAS,IAAwB;QAA5C,QAAG,GAAH,GAAG,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAoB;IAAG,CAAC;IAEnE,IAAI,MAAM;QACR,OAAO,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5C,CAAC;CACF;AAND,sDAMC;AAED,SAAgB,YAAY,CAC1B,IAAwB,EACxB,WAA+B;IAE/B,MAAM,QAAQ,GAAG,GAAG,CAAC;IACrB,MAAM,SAAS,GAAG,IAAI,uBAAQ,CAAC,oBAAW,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvE,MAAM,cAAc,GAAG,CAAC,CAAC;IAEzB,WAAW,CAAC,MAAM,GAAG,GAAG,QAAQ,IAAI,SAAS,IAAI,cAAc,iBAAiB,CAAC;IACjF,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClE,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC;AAC1B,CAAC;AAXD,oCAWC;AAED,SAAS,iBAAiB,CAAC,GAAW;IACpC,MAAM,UAAU,GAAG,EAAE,CAAC;IACtB,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;QAC/B,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACvB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,eAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAClC,IAAI,2BAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;gBACnC,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;aAC3B;iBAAM;gBACL,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;aACnB;SACF;aAAM;YACL,UAAU,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;SAC/B;IACH,CAAC,CAAC,CAAC;IACH,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,SAAS,eAAe,CAAC,UAAqC;IAC5D,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE;QACvD,IAAI,CAAC;YAAE,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;;YACrB,OAAO,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC;IACH,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACrB,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACzB;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAa,eAAe;IAO1B,YAAY,KAA+B;QACzC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;CACF;AAVD,0CAUC","sourcesContent":["import { randomBytes } from \"crypto\";\nimport { Uint64BE } from \"int64-buffer\";\nimport { range } from \"lodash\";\nimport { isIPv4 } from \"net\";\n\nimport {\n  DTLS_ROLE_SETUP,\n  DTLS_SETUP_ROLE,\n  FMTP_INT_PARAMETERS,\n  SSRC_INFO_ATTRS,\n} from \"./const\";\nimport { divide } from \"./helper\";\nimport {\n  RTCRtcpFeedback,\n  RTCRtpCodecParameters,\n  RTCRtpHeaderExtensionParameters,\n  RTCRtpParameters,\n  RTCRtpSimulcastParameters,\n} from \"./media/parameters\";\nimport { Direction } from \"./media/rtpTransceiver\";\nimport {\n  DtlsRole,\n  RTCDtlsFingerprint,\n  RTCDtlsParameters,\n} from \"./transport/dtls\";\nimport { IceCandidate, RTCIceParameters } from \"./transport/ice\";\nimport { RTCSctpCapabilities } from \"./transport/sctp\";\nimport { Kind } from \"./types/domain\";\n\nexport class SessionDescription {\n  version = 0;\n  origin?: string;\n  name = \"-\";\n  time = \"0 0\";\n  host?: string;\n  group: GroupDescription[] = [];\n  extMapAllowMixed = true;\n  msidSemantic: GroupDescription[] = [];\n  media: MediaDescription[] = [];\n  type!: \"offer\" | \"answer\";\n  dtlsRole!: DtlsRole;\n  iceOptions!: string;\n  iceLite!: boolean;\n  icePassword!: string;\n  iceUsernameFragment!: string;\n  dtlsFingerprints: RTCDtlsFingerprint[] = [];\n\n  static parse(sdp: string) {\n    const [sessionLines, mediaGroups] = groupLines(sdp);\n\n    const session = new SessionDescription();\n    sessionLines.forEach((line) => {\n      if (line.startsWith(\"v=\")) {\n        session.version = parseInt(line.slice(2), 10);\n      } else if (line.startsWith(\"o=\")) {\n        session.origin = line.slice(2);\n      } else if (line.startsWith(\"s=\")) {\n        session.name = line.slice(2);\n      } else if (line.startsWith(\"c=\")) {\n        session.host = ipAddressFromSdp(line.slice(2));\n      } else if (line.startsWith(\"t=\")) {\n        session.time = line.slice(2);\n      } else if (line.startsWith(\"a=\")) {\n        const [attr, value] = parseAttr(line);\n        switch (attr) {\n          case \"fingerprint\":\n            const [algorithm, fingerprint] = value?.split(\" \") || [];\n            session.dtlsFingerprints.push(\n              new RTCDtlsFingerprint(algorithm, fingerprint)\n            );\n            break;\n          case \"ice-lite\":\n            session.iceLite = true;\n            break;\n          case \"ice-options\":\n            session.iceOptions = value;\n            break;\n          case \"ice-pwd\":\n            session.icePassword = value;\n            break;\n          case \"ice-ufrag\":\n            session.iceUsernameFragment = value;\n            break;\n          case \"group\":\n            parseGroup(session.group, value);\n            break;\n          case \"msid-semantic\":\n            parseGroup(session.msidSemantic, value);\n            break;\n          case \"setup\":\n            session.dtlsRole = DTLS_SETUP_ROLE[value];\n            break;\n          case \"extmap-allow-mixed\":\n            session.extMapAllowMixed = true;\n            break;\n        }\n      }\n    });\n\n    mediaGroups.forEach((mediaLines) => {\n      const target = mediaLines[0];\n      const m = target.match(/^m=([^ ]+) ([0-9]+) ([A-Z/]+) (.+)/);\n      if (!m) {\n        throw new Error(\"m line not found\");\n      }\n\n      const kind = m[1] as Kind;\n      const fmt = m[4].split(\" \");\n      // todo fix\n      const fmtInt = [\"audio\", \"video\"].includes(kind)\n        ? fmt.map((v) => Number(v))\n        : undefined;\n\n      const currentMedia = new MediaDescription(\n        kind,\n        parseInt(m[2]),\n        m[3],\n        fmtInt || fmt\n      );\n      currentMedia.dtlsParams = new RTCDtlsParameters(\n        [...session.dtlsFingerprints],\n        session.dtlsRole\n      );\n      currentMedia.iceParams = new RTCIceParameters({\n        iceLite: session.iceLite,\n        usernameFragment: session.iceUsernameFragment,\n        password: session.icePassword,\n      });\n      currentMedia.iceOptions = session.iceOptions;\n      session.media.push(currentMedia);\n\n      mediaLines.slice(1).forEach((line) => {\n        if (line.startsWith(\"c=\")) {\n          currentMedia.host = ipAddressFromSdp(line.slice(2));\n        } else if (line.startsWith(\"a=\")) {\n          const [attr, value] = parseAttr(line);\n\n          switch (attr) {\n            case \"candidate\":\n              if (!value) throw new Error();\n              currentMedia.iceCandidates.push(candidateFromSdp(value));\n              break;\n            case \"end-of-candidates\":\n              currentMedia.iceCandidatesComplete = true;\n              break;\n            case \"extmap\":\n              // eslint-disable-next-line prefer-const\n              let [extId, extUri] = value.split(\" \");\n              if (extId.includes(\"/\")) {\n                [extId] = extId.split(\"/\");\n              }\n              currentMedia.rtp.headerExtensions.push(\n                new RTCRtpHeaderExtensionParameters({\n                  id: parseInt(extId),\n                  uri: extUri,\n                })\n              );\n              break;\n            case \"fingerprint\":\n              if (!value) throw new Error();\n              const [algorithm, fingerprint] = value.split(\" \");\n              currentMedia.dtlsParams?.fingerprints.push(\n                new RTCDtlsFingerprint(algorithm, fingerprint)\n              );\n              break;\n            case \"ice-options\":\n              currentMedia.iceOptions = value;\n              break;\n            case \"ice-pwd\":\n              currentMedia.iceParams!.password = value;\n              break;\n            case \"ice-ufrag\":\n              currentMedia.iceParams!.usernameFragment = value;\n              break;\n            case \"ice-lite\":\n              currentMedia.iceParams!.iceLite = true;\n              break;\n            case \"max-message-size\":\n              currentMedia.sctpCapabilities = new RTCSctpCapabilities(\n                parseInt(value, 10)\n              );\n              break;\n            case \"mid\":\n              currentMedia.rtp.muxId = value;\n              break;\n            case \"msid\":\n              currentMedia.msid = value;\n              break;\n            case \"rtcp\":\n              const [port, rest] = divide(value, \" \");\n              currentMedia.rtcpPort = parseInt(port);\n              currentMedia.rtcpHost = ipAddressFromSdp(rest);\n              break;\n            case \"rtcp-mux\":\n              currentMedia.rtcpMux = true;\n              break;\n            case \"setup\":\n              currentMedia.dtlsParams!.role = DTLS_SETUP_ROLE[value];\n              break;\n            case \"recvonly\":\n            case \"sendonly\":\n            case \"sendrecv\":\n            case \"inactive\":\n              currentMedia.direction = attr;\n              break;\n            case \"rtpmap\":\n              {\n                const [formatId, formatDesc] = divide(value, \" \");\n                const [type, clock, channel] = formatDesc.split(\"/\");\n                let channels: number | undefined;\n                if (currentMedia.kind === \"audio\") {\n                  channels = channel ? parseInt(channel) : 1;\n                }\n                const codec = new RTCRtpCodecParameters({\n                  mimeType: currentMedia.kind + \"/\" + type,\n                  channels,\n                  clockRate: parseInt(clock),\n                  payloadType: parseInt(formatId),\n                });\n                currentMedia.rtp.codecs.push(codec);\n              }\n              break;\n            case \"sctpmap\":\n              if (!value) throw new Error();\n              const [formatId, formatDesc] = divide(value, \" \");\n              (currentMedia as any)[attr][parseInt(formatId)] = formatDesc;\n              break;\n            case \"sctp-port\":\n              if (!value) throw new Error();\n              currentMedia.sctpPort = parseInt(value);\n              break;\n            case \"ssrc\":\n              const [ssrcStr, ssrcDesc] = divide(value, \" \");\n              const ssrc = parseInt(ssrcStr);\n              const [ssrcAttr, ssrcValue] = divide(ssrcDesc, \":\");\n              let ssrcInfo = currentMedia.ssrc.find((v) => v.ssrc === ssrc);\n              if (!ssrcInfo) {\n                ssrcInfo = new SsrcDescription({ ssrc });\n                currentMedia.ssrc.push(ssrcInfo);\n              }\n              if (SSRC_INFO_ATTRS.includes(ssrcAttr)) {\n                ssrcInfo[ssrcAttr] = ssrcValue;\n              }\n              break;\n            case \"ssrc-group\":\n              parseGroup(currentMedia.ssrcGroup, value);\n              break;\n            case \"rid\":\n              {\n                const [rid, direction] = divide(value, \" \");\n\n                currentMedia.simulcastParameters.push(\n                  new RTCRtpSimulcastParameters({\n                    rid,\n                    direction: direction as any,\n                  })\n                );\n              }\n              break;\n          }\n        }\n      });\n\n      if (!currentMedia.dtlsParams.role) {\n        currentMedia.dtlsParams = undefined;\n      }\n\n      const findCodec = (pt: number) =>\n        currentMedia.rtp.codecs.find((v) => v.payloadType === pt);\n\n      mediaLines.slice(1).forEach((line) => {\n        if (line.startsWith(\"a=\")) {\n          const [attr, value] = parseAttr(line);\n          if (attr === \"fmtp\") {\n            const [formatId, formatDesc] = divide(value, \" \");\n            const codec = findCodec(Number(formatId))!;\n            codec.parameters = parametersFromSdp(formatDesc);\n          } else if (attr === \"rtcp-fb\") {\n            const [payloadType, feedbackType, feedbackParam] = value.split(\" \");\n            currentMedia.rtp.codecs.forEach((codec) => {\n              if ([\"*\", codec.payloadType!.toString()].includes(payloadType)) {\n                codec.rtcpFeedback.push(\n                  new RTCRtcpFeedback({\n                    type: feedbackType,\n                    parameter: feedbackParam,\n                  })\n                );\n              }\n            });\n          }\n        }\n      });\n    });\n\n    return session;\n  }\n\n  webrtcTrackId(media: MediaDescription) {\n    if (media.msid && media.msid.includes(\" \")) {\n      const bits = media.msid.split(\" \");\n      for (const group of this.msidSemantic) {\n        if (\n          group.semantic === \"WMS\" &&\n          (group.items.includes(bits[0]) || group.items.includes(\"*\"))\n        ) {\n          return bits[1];\n        }\n      }\n    }\n    return;\n  }\n\n  get string() {\n    const lines = [`v=${this.version}`, `o=${this.origin}`, `s=${this.name}`];\n    if (this.host) {\n      lines.push(`c=${ipAddressFromSdp(this.host)}`);\n    }\n    lines.push(`t=${this.time}`);\n    this.group.forEach((group) => lines.push(`a=group:${group.str}`));\n    if (this.extMapAllowMixed) {\n      lines.push(`a=extmap-allow-mixed`);\n    }\n    this.msidSemantic.forEach((group) =>\n      lines.push(`a=msid-semantic:${group.str}`)\n    );\n    const media = this.media.map((m) => m.toString()).join(\"\");\n    const sdp = lines.join(\"\\r\\n\") + \"\\r\\n\" + media;\n    return sdp;\n  }\n\n  toJSON() {\n    return new RTCSessionDescription(this.string, this.type);\n  }\n}\n\nexport class MediaDescription {\n  // rtp\n  host?: string;\n  direction?: Direction;\n  msid?: string;\n\n  // rtcp\n  rtcpPort?: number;\n  rtcpHost?: string;\n  rtcpMux = false;\n\n  // ssrc\n  ssrc: SsrcDescription[] = [];\n  ssrcGroup: GroupDescription[] = [];\n\n  // formats\n  rtp: RTCRtpParameters = { codecs: [], headerExtensions: [] };\n\n  // sctp\n  sctpCapabilities?: RTCSctpCapabilities;\n  sctpMap: { [key: number]: string } = {};\n  sctpPort?: number;\n\n  // DTLS\n  dtlsParams?: RTCDtlsParameters;\n\n  // ICE\n  iceParams?: RTCIceParameters;\n  iceCandidates: IceCandidate[] = [];\n  iceCandidatesComplete = false;\n  iceOptions?: string;\n\n  // Simulcast\n  simulcastParameters: RTCRtpSimulcastParameters[] = [];\n\n  constructor(\n    public kind: Kind,\n    public port: number,\n    public profile: string,\n    public fmt: string[] | number[]\n  ) {}\n\n  toString() {\n    const lines: string[] = [];\n    lines.push(\n      `m=${this.kind} ${this.port} ${this.profile} ${(this.fmt as number[])\n        .map((v) => v.toString())\n        .join(\" \")}`\n    );\n    if (this.host) {\n      lines.push(`c=${ipAddressToSdp(this.host)}`);\n    }\n    // ice\n    this.iceCandidates.forEach((candidate) => {\n      lines.push(`a=candidate:${candidateToSdp(candidate)}`);\n    });\n    if (this.iceCandidatesComplete) {\n      lines.push(\"a=end-of-candidates\");\n    }\n    if (this.iceParams?.usernameFragment) {\n      lines.push(`a=ice-ufrag:${this.iceParams.usernameFragment}`);\n    }\n    if (this.iceParams?.password) {\n      lines.push(`a=ice-pwd:${this.iceParams.password}`);\n    }\n    if (this.iceParams?.iceLite) {\n      lines.push(`a=ice-lite`);\n    }\n    if (this.iceOptions) {\n      lines.push(`a=ice-options:${this.iceOptions}`);\n    }\n\n    // dtls\n    if (this.dtlsParams) {\n      this.dtlsParams.fingerprints.forEach((fingerprint) => {\n        lines.push(\n          `a=fingerprint:${fingerprint.algorithm} ${fingerprint.value}`\n        );\n      });\n      lines.push(`a=setup:${DTLS_ROLE_SETUP[this.dtlsParams.role]}`);\n    }\n\n    if (this.direction) {\n      lines.push(`a=${this.direction}`);\n    }\n    if (this.rtp.muxId) {\n      lines.push(`a=mid:${this.rtp.muxId}`);\n    }\n    if (this.msid) {\n      lines.push(`a=msid:${this.msid}`);\n    }\n\n    if (this.rtcpPort && this.rtcpHost) {\n      lines.push(`a=rtcp:${this.rtcpPort} ${ipAddressToSdp(this.rtcpHost)}`);\n      if (this.rtcpMux) {\n        lines.push(\"a=rtcp-mux\");\n      }\n    }\n\n    this.ssrcGroup.forEach((group) => {\n      lines.push(`a=ssrc-group:${group.str}`);\n    });\n    this.ssrc.forEach((ssrcInfo) => {\n      SSRC_INFO_ATTRS.forEach((ssrcAttr) => {\n        const ssrcValue = ssrcInfo[ssrcAttr];\n        if (ssrcValue !== undefined) {\n          lines.push(`a=ssrc:${ssrcInfo.ssrc} ${ssrcAttr}:${ssrcValue}`);\n        }\n      });\n    });\n\n    this.rtp.codecs.forEach((codec) => {\n      lines.push(`a=rtpmap:${codec.payloadType} ${codec.str}`);\n\n      codec.rtcpFeedback.forEach((feedback) => {\n        let value = feedback.type;\n        if (feedback.parameter) value += ` ${feedback.parameter}`;\n        lines.push(`a=rtcp-fb:${codec.payloadType} ${value}`);\n      });\n\n      const params = parametersToSDP(codec.parameters);\n      if (params) {\n        lines.push(`a=fmtp:${codec.payloadType} ${params}`);\n      }\n    });\n\n    Object.keys(this.sctpMap).forEach((k) => {\n      const v = this.sctpMap[Number(k)];\n      lines.push(`a=sctpmap:${k} ${v}`);\n    });\n    if (this.sctpPort) {\n      lines.push(`a=sctp-port:${this.sctpPort}`);\n    }\n    if (this.sctpCapabilities) {\n      lines.push(`a=max-message-size:${this.sctpCapabilities.maxMessageSize}`);\n    }\n\n    // rtp extension\n    this.rtp.headerExtensions.forEach((extension) =>\n      lines.push(`a=extmap:${extension.id} ${extension.uri}`)\n    );\n\n    // simulcast\n    if (this.simulcastParameters.length) {\n      this.simulcastParameters.forEach((param) => {\n        lines.push(`a=rid:${param.rid} ${param.direction}`);\n      });\n      let line = `a=simulcast:`;\n      const recv = this.simulcastParameters.filter(\n        (v) => v.direction === \"recv\"\n      );\n      if (recv.length) {\n        line += `recv ${recv.map((v) => v.rid).join(\";\")} `;\n      }\n      const send = this.simulcastParameters.filter(\n        (v) => v.direction === \"send\"\n      );\n      if (send.length) {\n        line += `send ${send.map((v) => v.rid).join(\";\")}`;\n      }\n\n      lines.push(line);\n    }\n\n    return lines.join(\"\\r\\n\") + \"\\r\\n\";\n  }\n}\n\nexport class GroupDescription {\n  constructor(public semantic: string, public items: string[]) {}\n\n  get str() {\n    return `${this.semantic} ${this.items.join(\" \")}`;\n  }\n}\n\nfunction ipAddressFromSdp(sdp: string) {\n  const m = sdp.match(/^IN (IP4|IP6) ([^ ]+)$/);\n  if (!m) throw new Error(\"exception\");\n  return m[2];\n}\n\nfunction ipAddressToSdp(addr: string) {\n  const version = isIPv4(addr) ? 4 : 6;\n  return `IN IP${version} ${addr}`;\n}\n\nexport function candidateToSdp(c: IceCandidate) {\n  let sdp = `${c.foundation} ${c.component} ${c.protocol} ${c.priority} ${c.ip} ${c.port} typ ${c.type}`;\n  if (c.relatedAddress) {\n    sdp += ` raddr ${c.relatedAddress}`;\n  }\n  if (c.relatedPort) {\n    sdp += ` rport ${c.relatedPort}`;\n  }\n  if (c.tcpType) {\n    sdp += ` tcptype ${c.tcpType}`;\n  }\n  return sdp;\n}\n\nfunction groupLines(sdp: string): [string[], string[][]] {\n  const session: string[] = [];\n  const media: string[][] = [];\n\n  let lines = sdp.split(\"\\r\\n\");\n  if (lines.length === 1) {\n    lines = sdp.split(\"\\n\");\n  }\n\n  lines.forEach((line) => {\n    if (line.startsWith(\"m=\")) {\n      media.push([line]);\n    } else if (media.length > 0) {\n      media[media.length - 1].push(line);\n    } else {\n      session.push(line);\n    }\n  });\n\n  return [session, media];\n}\n\nfunction parseAttr(line: string): [string, string] {\n  if (line.includes(\":\")) {\n    const bits = divide(line.slice(2), \":\");\n    return [bits[0], bits[1]];\n  } else {\n    return [line.slice(2), undefined as any];\n  }\n}\n\nexport function parseGroup(\n  dest: GroupDescription[],\n  value: string,\n  type: (v: string) => any = (v) => v.toString()\n) {\n  const bits = value.split(\" \");\n  if (bits.length > 0) {\n    dest.push(new GroupDescription(bits[0], bits.slice(1).map(type)));\n  }\n}\n\nexport function candidateFromSdp(sdp: string) {\n  const bits = sdp.split(\" \");\n  if (bits.length < 8) {\n    throw new Error();\n  }\n\n  const candidate = new IceCandidate(\n    parseInt(bits[1], 10),\n    bits[0],\n    bits[4],\n    parseInt(bits[5], 10),\n    parseInt(bits[3], 10),\n    bits[2],\n    bits[7]\n  );\n\n  range(8, bits.length - 1, 2).forEach((i) => {\n    switch (bits[i]) {\n      case \"raddr\":\n        candidate.relatedAddress = bits[i + 1];\n        break;\n      case \"rport\":\n        candidate.relatedPort = parseInt(bits[i + 1]);\n        break;\n      case \"tcptype\":\n        candidate.tcpType = bits[i + 1];\n        break;\n    }\n  });\n\n  return candidate;\n}\n\nexport class RTCSessionDescription {\n  constructor(public sdp: string, public type: \"offer\" | \"answer\") {}\n\n  get object() {\n    return SessionDescription.parse(this.sdp);\n  }\n}\n\nexport function addSDPHeader(\n  type: \"offer\" | \"answer\",\n  description: SessionDescription\n) {\n  const username = \"-\";\n  const sessionId = new Uint64BE(randomBytes(64)).toString().slice(0, 8);\n  const sessionVersion = 0;\n\n  description.origin = `${username} ${sessionId} ${sessionVersion} IN IP4 0.0.0.0`;\n  description.msidSemantic.push(new GroupDescription(\"WMS\", [\"*\"]));\n  description.type = type;\n}\n\nfunction parametersFromSdp(sdp: string) {\n  const parameters = {};\n  sdp.split(\";\").forEach((param) => {\n    if (param.includes(\"=\")) {\n      const [k, v] = divide(param, \"=\");\n      if (FMTP_INT_PARAMETERS.includes(k)) {\n        parameters[k] = Number(v);\n      } else {\n        parameters[k] = v;\n      }\n    } else {\n      parameters[param] = undefined;\n    }\n  });\n  return parameters;\n}\n\nfunction parametersToSDP(parameters: { [key: string]: string }) {\n  const params = Object.entries(parameters).map(([k, v]) => {\n    if (v) return `${k}=${v}`;\n    else return k;\n  });\n  if (params.length > 0) {\n    return params.join(\";\");\n  }\n  return undefined;\n}\n\nexport class SsrcDescription {\n  ssrc!: number;\n  cname?: string;\n  msid?: string;\n  msLabel?: string;\n  label?: string;\n\n  constructor(props: Partial<SsrcDescription>) {\n    Object.assign(this, props);\n  }\n}\n"]}