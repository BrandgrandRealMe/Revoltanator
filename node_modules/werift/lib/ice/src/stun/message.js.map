{"version":3,"file":"message.js","sourceRoot":"","sources":["../../../../../ice/src/stun/message.ts"],"names":[],"mappings":"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","sourcesContent":["import crc32 from \"buffer-crc32\";\nimport { createHmac } from \"crypto\";\nimport { jspack } from \"jspack\";\n\nimport { bufferXor, randomTransactionId } from \"../helper\";\nimport {\n  ATTRIBUTES_BY_NAME,\n  ATTRIBUTES_BY_TYPE,\n  packXorAddress,\n  unpackXorAddress,\n} from \"./attributes\";\nimport {\n  ATTRIBUTES,\n  classes,\n  COOKIE,\n  FINGERPRINT_LENGTH,\n  FINGERPRINT_XOR,\n  HEADER_LENGTH,\n  INTEGRITY_LENGTH,\n  methods,\n} from \"./const\";\n\nexport function parseMessage(\n  data: Buffer,\n  integrityKey?: Buffer\n): Message | undefined {\n  if (data.length < HEADER_LENGTH) {\n    return undefined;\n  }\n  const [messageType, length] = jspack.Unpack(\n    \"!HHI\",\n    data.slice(0, HEADER_LENGTH)\n  );\n\n  const transactionId = Buffer.from(\n    data.slice(HEADER_LENGTH - 12, HEADER_LENGTH)\n  );\n\n  if (data.length !== HEADER_LENGTH + length) {\n    return undefined;\n  }\n\n  const attributes: { [key: string]: any } = {};\n\n  for (let pos = HEADER_LENGTH; pos <= data.length - 4; ) {\n    const [attrType, attrLen] = jspack.Unpack(\"!HH\", data.slice(pos, pos + 4));\n    const v = data.slice(pos + 4, pos + 4 + attrLen);\n    const padLen = 4 * Math.floor((attrLen + 3) / 4) - attrLen;\n    const attributesTypes = Object.keys(ATTRIBUTES_BY_TYPE);\n    if (attributesTypes.includes(attrType.toString())) {\n      const [, attrName, , attrUnpack] = ATTRIBUTES_BY_TYPE[attrType];\n      if (attrUnpack.name === unpackXorAddress.name) {\n        attributes[attrName] = attrUnpack(v, transactionId);\n      } else {\n        attributes[attrName] = attrUnpack(v);\n      }\n\n      if (attrName === \"FINGERPRINT\") {\n        const fingerprint = messageFingerprint(data.slice(0, pos));\n        if (attributes[attrName] !== fingerprint) {\n          return undefined;\n        }\n      } else if (attrName === \"MESSAGE-INTEGRITY\") {\n        if (integrityKey) {\n          const integrity = messageIntegrity(data.slice(0, pos), integrityKey);\n          if (!integrity.equals(attributes[attrName])) {\n            return undefined;\n          }\n        }\n      }\n    }\n    pos += 4 + attrLen + padLen;\n  }\n\n  return new Message(\n    messageType & 0x3eef,\n    messageType & 0x0110,\n    transactionId,\n    attributes\n  );\n}\n\nexport class Message {\n  constructor(\n    public messageMethod: methods,\n    public messageClass: classes,\n    public transactionId: Buffer = randomTransactionId(),\n    public attributes: { [key in typeof ATTRIBUTES[number]]?: any } = {}\n  ) {}\n\n  get attributesKeys(): typeof ATTRIBUTES[number][] {\n    return Object.keys(this.attributes) as any;\n  }\n\n  get transactionIdHex() {\n    return this.transactionId.toString(\"hex\");\n  }\n\n  get bytes() {\n    let data = Buffer.from([]);\n    for (const attrName of this.attributesKeys) {\n      const attrValue = (this.attributes as any)[attrName];\n      const [attrType, , attrPack] = ATTRIBUTES_BY_NAME[attrName];\n      const v =\n        attrPack.name === packXorAddress.name\n          ? attrPack(attrValue, this.transactionId)\n          : attrPack(attrValue);\n      const attrLen = v.length;\n      const padLen = 4 * Math.floor((attrLen + 3) / 4) - attrLen;\n      data = Buffer.concat([\n        data,\n        Buffer.from(jspack.Pack(\"!HH\", [attrType, attrLen])),\n        v,\n        ...[...Array(padLen)].map(() => Buffer.from(\"\\x00\")),\n      ]);\n    }\n    const buf = Buffer.from(\n      jspack.Pack(\"!HHI\", [\n        this.messageMethod | this.messageClass,\n        data.length,\n        COOKIE,\n      ])\n    );\n\n    return Buffer.concat([buf, this.transactionId, data]);\n  }\n\n  addFingerprint() {\n    this.attributes[\"FINGERPRINT\"] = messageFingerprint(this.bytes);\n  }\n\n  addMessageIntegrity(key: Buffer) {\n    this.attributes[\"MESSAGE-INTEGRITY\"] = messageIntegrity(this.bytes, key);\n  }\n}\n\nconst setBodyLength = (data: Buffer, length: number) => {\n  return Buffer.concat([\n    data.slice(0, 2),\n    Buffer.from(jspack.Pack(\"!H\", [length])),\n    data.slice(4),\n  ]);\n};\n\nfunction messageFingerprint(data: Buffer) {\n  const checkData = setBodyLength(\n    data,\n    data.length - HEADER_LENGTH + FINGERPRINT_LENGTH\n  );\n  const crc32Buf = crc32(checkData);\n  const xorBuf = Buffer.alloc(4);\n  xorBuf.writeInt32BE(FINGERPRINT_XOR, 0);\n  const fingerprint = bufferXor(crc32Buf, xorBuf);\n  return fingerprint.readUInt32BE(0);\n}\n\nfunction messageIntegrity(data: Buffer, key: Buffer) {\n  const checkData = setBodyLength(\n    data,\n    data.length - HEADER_LENGTH + INTEGRITY_LENGTH\n  );\n  return Buffer.from(\n    createHmac(\"sha1\", key).update(checkData).digest(\"hex\"),\n    \"hex\"\n  );\n}\n"]}