{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../../ice/src/stun/transaction.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,qCAAgC;AAEhC,8CAAsE;AAEtE,mCAAwD;AAGxD,MAAM,GAAG,GAAG,eAAK,CAAC,iDAAiD,CAAC,CAAC;AAErE,MAAa,WAAW;IAStB,YACU,OAAgB,EAChB,IAAa,EACb,QAAkB,EAClB,eAAwB;QAHxB,YAAO,GAAP,OAAO,CAAS;QAChB,SAAI,GAAJ,IAAI,CAAS;QACb,aAAQ,GAAR,QAAQ,CAAU;QAClB,oBAAe,GAAf,eAAe,CAAS;QAX1B,iBAAY,GAAG,iBAAS,CAAC;QAEzB,UAAK,GAAG,CAAC,CAAC;QACD,aAAQ,GACvB,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAS,CAAC,CAAC;QAC/C,eAAU,GAAG,IAAI,eAAK,EAAsB,CAAC;QAS9D,qBAAgB,GAAG,CAAC,OAAgB,EAAE,IAAa,EAAE,EAAE;YACrD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC9B,IAAI,OAAO,CAAC,YAAY,KAAK,eAAO,CAAC,QAAQ,EAAE;oBAC7C,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;oBACvC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;iBAC5B;qBAAM;oBACL,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,8BAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;iBACvD;aACF;QACH,CAAC,CAAC;QAEF,QAAG,GAAG,KAAK,IAAI,EAAE;YACf,IAAI;gBACF,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;aAC1C;oBAAS;gBACR,IAAI,IAAI,CAAC,aAAa,EAAE;oBACtB,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;iBAClC;aACF;QACH,CAAC,CAAC;QAEM,UAAK,GAAG,GAAG,EAAE;YACnB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAC/B,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,+BAAkB,EAAE,CAAC,CAAC;gBAChD,OAAO;aACR;YACD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,aAAa,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAC/D,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC;YACvB,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC,CAAC;IAlCC,CAAC;IAoCJ,MAAM;QACJ,IAAI,IAAI,CAAC,aAAa;YAAE,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3D,CAAC;CACF;AArDD,kCAqDC","sourcesContent":["import debug from \"debug\";\nimport { Event } from \"rx.mini\";\n\nimport { TransactionFailed, TransactionTimeout } from \"../exceptions\";\nimport { Address, Protocol } from \"../types/model\";\nimport { classes, RETRY_MAX, RETRY_RTO } from \"./const\";\nimport { Message } from \"./message\";\n\nconst log = debug(\"werift-ice:packages/ice/src/stun/transaction.ts\");\n\nexport class Transaction {\n  integrityKey?: Buffer;\n  private timeoutDelay = RETRY_RTO;\n  private timeoutHandle?: any;\n  private tries = 0;\n  private readonly triesMax =\n    1 + (this.retransmissions ? this.retransmissions : RETRY_MAX);\n  private readonly onResponse = new Event<[Message, Address]>();\n\n  constructor(\n    private request: Message,\n    private addr: Address,\n    private protocol: Protocol,\n    private retransmissions?: number\n  ) {}\n\n  responseReceived = (message: Message, addr: Address) => {\n    if (this.onResponse.length > 0) {\n      if (message.messageClass === classes.RESPONSE) {\n        this.onResponse.execute(message, addr);\n        this.onResponse.complete();\n      } else {\n        this.onResponse.error(new TransactionFailed(message));\n      }\n    }\n  };\n\n  run = async () => {\n    try {\n      this.retry();\n      return await this.onResponse.asPromise();\n    } finally {\n      if (this.timeoutHandle) {\n        clearTimeout(this.timeoutHandle);\n      }\n    }\n  };\n\n  private retry = () => {\n    if (this.tries >= this.triesMax) {\n      log(\"retry failed\", this.tries);\n      this.onResponse.error(new TransactionTimeout());\n      return;\n    }\n    this.protocol.sendStun(this.request, this.addr);\n    this.timeoutHandle = setTimeout(this.retry, this.timeoutDelay);\n    this.timeoutDelay *= 2;\n    this.tries++;\n  };\n\n  cancel() {\n    if (this.timeoutHandle) clearTimeout(this.timeoutHandle);\n  }\n}\n"]}