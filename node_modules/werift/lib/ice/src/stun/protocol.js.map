{"version":3,"file":"protocol.js","sourceRoot":"","sources":["../../../../../ice/src/stun/protocol.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event } from \"rx.mini\";\n\nimport { Candidate } from \"../candidate\";\nimport { Connection } from \"../ice\";\nimport { UdpTransport } from \"../transport\";\nimport { Address, Protocol } from \"../types/model\";\nimport { classes } from \"./const\";\nimport { Message, parseMessage } from \"./message\";\nimport { Transaction } from \"./transaction\";\n\nexport class StunProtocol implements Protocol {\n  readonly type = \"stun\";\n  transport!: UdpTransport;\n  transactions: { [key: string]: Transaction } = {};\n  get transactionsKeys() {\n    return Object.keys(this.transactions);\n  }\n  localCandidate?: Candidate;\n  sentMessage?: Message;\n  localAddress?: string;\n\n  private readonly closed = new Event();\n\n  constructor(public receiver: Connection) {}\n\n  connectionLost() {\n    this.closed.execute();\n    this.closed.complete();\n  }\n\n  connectionMade = async (useIpv4: boolean, portRange?: [number, number]) => {\n    if (useIpv4) {\n      this.transport = await UdpTransport.init(\"udp4\", portRange);\n    } else {\n      this.transport = await UdpTransport.init(\"udp6\", portRange);\n    }\n\n    this.transport.onData = (data, addr) => this.datagramReceived(data, addr);\n  };\n\n  private datagramReceived(data: Buffer, addr: Address) {\n    if (!this.localCandidate) throw new Error(\"not exist\");\n\n    const message = parseMessage(data);\n    if (!message) {\n      this.receiver.dataReceived(data, this.localCandidate.component);\n      return;\n    }\n    // log(\"parseMessage\", addr, message);\n    if (\n      (message.messageClass === classes.RESPONSE ||\n        message.messageClass === classes.ERROR) &&\n      this.transactionsKeys.includes(message.transactionIdHex)\n    ) {\n      const transaction = this.transactions[message.transactionIdHex];\n      transaction.responseReceived(message, addr);\n    } else if (message.messageClass === classes.REQUEST) {\n      this.receiver.requestReceived(message, addr, this, data);\n    }\n  }\n\n  getExtraInfo(): Address {\n    const { address: host, port } = this.transport.address();\n    return [host, port];\n  }\n\n  async sendStun(message: Message, addr: Address) {\n    const data = message.bytes;\n    await this.transport.send(data, addr);\n  }\n\n  async sendData(data: Buffer, addr: Address) {\n    await this.transport.send(data, addr);\n  }\n\n  async request(\n    request: Message,\n    addr: Address,\n    integrityKey?: Buffer,\n    retransmissions?: number\n  ) {\n    // \"\"\"\n    // Execute a STUN transaction and return the response.\n    // \"\"\"\n    if (this.transactionsKeys.includes(request.transactionIdHex))\n      throw new Error(\"already request ed\");\n\n    if (integrityKey) {\n      request.addMessageIntegrity(integrityKey);\n      request.addFingerprint();\n    }\n\n    const transaction: Transaction = new Transaction(\n      request,\n      addr,\n      this,\n      retransmissions\n    );\n    transaction.integrityKey = integrityKey;\n    this.transactions[request.transactionIdHex] = transaction;\n\n    try {\n      return await transaction.run();\n    } finally {\n      delete this.transactions[request.transactionIdHex];\n    }\n  }\n\n  async close() {\n    Object.values(this.transactions).forEach((transaction) => {\n      transaction.cancel();\n    });\n    await this.transport.close();\n  }\n}\n"]}