"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UdpTransport = void 0;
const debug_1 = __importDefault(require("debug"));
const dgram_1 = require("dgram");
const utils_1 = require("./utils");
const log = debug_1.default("werift-ice:packages/ice/src/transport.ts");
class UdpTransport {
    constructor(type, portRange) {
        this.type = type;
        this.portRange = portRange;
        this.socket = dgram_1.createSocket(this.type);
        this.onData = () => { };
        this.send = (data, addr) => new Promise((r) => {
            try {
                this.socket.send(data, addr[1], addr[0], (error) => {
                    if (error) {
                        log("send error", addr, data);
                    }
                    r();
                });
            }
            catch (error) {
                log("send error", addr, data);
                r();
            }
        });
        this.close = () => new Promise((r) => {
            this.socket.once("close", r);
            try {
                this.socket.close();
            }
            catch (error) {
                r();
            }
        });
        this.socket.on("message", (data, info) => {
            if (info.family === "IPv6") {
                [info.address] = info.address.split("%"); // example fe80::1d3a:8751:4ffd:eb80%wlp82s0
            }
            try {
                this.onData(data, [info.address, info.port]);
            }
            catch (error) {
                log("onData error", error);
            }
        });
    }
    static async init(type, portRange) {
        const transport = new UdpTransport(type, portRange);
        await transport.init();
        return transport;
    }
    async init() {
        if (this.portRange) {
            const port = await utils_1.findPort(this.portRange[0], this.portRange[1], this.type);
            this.socket.bind(port);
        }
        else {
            this.socket.bind();
        }
        await new Promise((r) => this.socket.once("listening", r));
    }
    address() {
        return this.socket.address();
    }
}
exports.UdpTransport = UdpTransport;
//# sourceMappingURL=transport.js.map