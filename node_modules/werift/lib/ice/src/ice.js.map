{"version":3,"file":"ice.js","sourceRoot":"","sources":["../../../../ice/src/ice.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomBytes } from \"crypto\";\nimport debug from \"debug\";\nimport dns from \"dns\";\nimport { Uint64BE } from \"int64-buffer\";\nimport * as nodeIp from \"ip\";\nimport { isEqual, range } from \"lodash\";\nimport { isIPv4 } from \"net\";\nimport PCancelable from \"p-cancelable\";\nimport { Event } from \"rx.mini\";\nimport timers from \"timers/promises\";\nimport util from \"util\";\n\nimport { Candidate, candidateFoundation, candidatePriority } from \"./candidate\";\nimport { TransactionError } from \"./exceptions\";\nimport { difference, Future, future, PQueue, randomString } from \"./helper\";\nimport { classes, methods } from \"./stun/const\";\nimport { Message, parseMessage } from \"./stun/message\";\nimport { StunProtocol } from \"./stun/protocol\";\nimport { createTurnEndpoint } from \"./turn/protocol\";\nimport { Address, Protocol } from \"./types/model\";\n\nconst log = debug(\"werift-ice : packages/ice/src/ice.ts : log\");\n\nexport class Connection {\n  readonly localUserName = randomString(4);\n  readonly localPassword = randomString(22);\n  remotePassword: string = \"\";\n  remoteUsername: string = \"\";\n  remoteIsLite = false;\n  checkList: CandidatePair[] = [];\n  localCandidates: Candidate[] = [];\n  stunServer?: Address;\n  turnServer?: Address;\n  useIpv4: boolean;\n  useIpv6: boolean;\n  options: IceOptions;\n  remoteCandidatesEnd = false;\n  _components: Set<number>;\n  _localCandidatesEnd = false;\n  _tieBreaker: BigInt = BigInt(new Uint64BE(randomBytes(64)).toString());\n  state: IceState = \"new\";\n\n  readonly onData = new Event<[Buffer, number]>();\n  readonly stateChanged = new Event<[IceState]>();\n\n  private _remoteCandidates: Candidate[] = [];\n  // P2P接続完了したソケット\n  private nominated: { [key: number]: CandidatePair } = {};\n  get nominatedKeys() {\n    return Object.keys(this.nominated).map((v) => v.toString());\n  }\n  private nominating = new Set<number>();\n  get remoteAddr() {\n    return Object.values(this.nominated)[0].remoteAddr;\n  }\n  private checkListDone = false;\n  private checkListState = new PQueue<number>();\n  private earlyChecks: [Message, Address, Protocol][] = [];\n  private localCandidatesStart = false;\n  private protocols: Protocol[] = [];\n  private queryConsentHandle?: Future;\n  private promiseGatherCandidates?: Event<[]>;\n\n  constructor(public iceControlling: boolean, options?: Partial<IceOptions>) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n    const { components, stunServer, turnServer, useIpv4, useIpv6 } =\n      this.options;\n    this.stunServer = validateAddress(stunServer);\n    this.turnServer = validateAddress(turnServer);\n    this.useIpv4 = useIpv4;\n    this.useIpv6 = useIpv6;\n    this._components = new Set(range(1, components + 1));\n  }\n\n  // 4.1.1 Gathering Candidates\n  async gatherCandidates(cb?: (candidate: Candidate) => void) {\n    if (!this.localCandidatesStart) {\n      this.localCandidatesStart = true;\n      this.promiseGatherCandidates = new Event();\n\n      const address = getHostAddress(this.useIpv4, this.useIpv6);\n      for (const component of this._components) {\n        const candidates = await this.getComponentCandidates(\n          component,\n          address,\n          5,\n          cb\n        );\n        this.localCandidates = [...this.localCandidates, ...candidates];\n      }\n\n      this._localCandidatesEnd = true;\n      this.promiseGatherCandidates.execute();\n    }\n    this.setState(\"completed\");\n  }\n\n  private async getComponentCandidates(\n    component: number,\n    addresses: string[],\n    timeout = 5,\n    cb?: (candidate: Candidate) => void\n  ) {\n    let candidates: Candidate[] = [];\n\n    for (const address of addresses) {\n      // # create transport\n      const protocol = new StunProtocol(this);\n      await protocol.connectionMade(isIPv4(address), this.options.portRange);\n      protocol.localAddress = address;\n      this.protocols.push(protocol);\n\n      // # add host candidate\n      const candidateAddress: Address = [address, protocol.getExtraInfo()[1]];\n\n      protocol.localCandidate = new Candidate(\n        candidateFoundation(\"host\", \"udp\", candidateAddress[0]),\n        component,\n        \"udp\",\n        candidatePriority(component, \"host\"),\n        candidateAddress[0],\n        candidateAddress[1],\n        \"host\"\n      );\n\n      candidates.push(protocol.localCandidate);\n      if (cb) cb(protocol.localCandidate);\n    }\n\n    // # query STUN server for server-reflexive candidates (IPv4 only)\n    const stunServer = this.stunServer;\n    if (stunServer) {\n      try {\n        const srflxCandidates = (\n          await Promise.all<Candidate | void>(\n            this.protocols.map(\n              (protocol) =>\n                new Promise(async (r, f) => {\n                  const timer = setTimeout(f, timeout * 1000);\n                  if (\n                    protocol.localCandidate?.host &&\n                    isIPv4(protocol.localCandidate?.host)\n                  ) {\n                    const candidate = await serverReflexiveCandidate(\n                      protocol,\n                      stunServer\n                    ).catch((error) => log(\"error\", error));\n                    if (candidate && cb) cb(candidate);\n\n                    clearTimeout(timer);\n                    r(candidate);\n                  } else {\n                    clearTimeout(timer);\n                    r();\n                  }\n                })\n            )\n          )\n        ).filter((v): v is Candidate => typeof v !== \"undefined\");\n        candidates = [...candidates, ...srflxCandidates];\n      } catch (error) {\n        log(\"query STUN server\", error);\n      }\n    }\n\n    if (\n      this.turnServer &&\n      this.options.turnUsername &&\n      this.options.turnPassword\n    ) {\n      const protocol = await createTurnEndpoint(\n        this.turnServer,\n        this.options.turnUsername,\n        this.options.turnPassword,\n        { portRange: this.options.portRange }\n      );\n      this.protocols.push(protocol);\n\n      const candidateAddress = protocol.turn.relayedAddress;\n      const relatedAddress = protocol.turn.mappedAddress;\n\n      log(\"turn candidateAddress\", candidateAddress);\n\n      protocol.localCandidate = new Candidate(\n        candidateFoundation(\"relay\", \"udp\", candidateAddress[0]),\n        component,\n        \"udp\",\n        candidatePriority(component, \"relay\"),\n        candidateAddress[0],\n        candidateAddress[1],\n        \"relay\",\n        relatedAddress[0],\n        relatedAddress[1]\n      );\n      protocol.receiver = this;\n\n      if (this.options.forceTurn) {\n        candidates = [];\n      }\n\n      candidates.push(protocol.localCandidate);\n    }\n\n    return candidates;\n  }\n\n  async connect() {\n    // \"\"\"\n    // Perform ICE handshake.\n    //\n    // This coroutine returns if a candidate pair was successfully nominated\n    // and raises an exception otherwise.\n    // \"\"\"\n    log(\"start connect ice\");\n    if (!this._localCandidatesEnd) {\n      if (!this.localCandidatesStart)\n        throw new Error(\"Local candidates gathering was not performed\");\n      if (this.promiseGatherCandidates)\n        // wait for GatherCandidates finish\n        await this.promiseGatherCandidates.asPromise();\n    }\n    if (!this.remoteUsername || !this.remotePassword)\n      throw new Error(\"Remote username or password is missing\");\n\n    // # 5.7.1. Forming Candidate Pairs\n    this.remoteCandidates.forEach(this.pairRemoteCandidate);\n    this.sortCheckList();\n\n    this.unfreezeInitial();\n\n    // # handle early checks\n    this.earlyChecks.forEach((earlyCheck) => this.checkIncoming(...earlyCheck));\n    this.earlyChecks = [];\n\n    // # perform checks\n    // 5.8.  Scheduling Checks\n    for (;;) {\n      if (!this.schedulingChecks()) break;\n      await timers.setTimeout(20);\n    }\n\n    // # wait for completion\n    const res: number =\n      this.checkList.length > 0 ? await this.checkListState.get() : ICE_FAILED;\n\n    // # cancel remaining checks\n    this.checkList.forEach((check) => check.handle?.cancel());\n\n    if (res !== ICE_COMPLETED) {\n      throw new Error(\"ICE negotiation failed\");\n    }\n\n    // # start consent freshness tests\n    this.queryConsentHandle = future(this.queryConsent());\n\n    this.setState(\"connected\");\n  }\n\n  private unfreezeInitial() {\n    // # unfreeze first pair for the first component\n    const firstPair = this.checkList.find(\n      (pair) => pair.component === Math.min(...[...this._components])\n    );\n    if (!firstPair) return;\n    if (firstPair.state === CandidatePairState.FROZEN) {\n      this.checkState(firstPair, CandidatePairState.WAITING);\n    }\n\n    // # unfreeze pairs with same component but different foundations\n    const seenFoundations = new Set(firstPair.localCandidate.foundation);\n    for (const pair of this.checkList) {\n      if (\n        pair.component === firstPair.component &&\n        !seenFoundations.has(pair.localCandidate.foundation) &&\n        pair.state === CandidatePairState.FROZEN\n      ) {\n        this.checkState(pair, CandidatePairState.WAITING);\n        seenFoundations.add(pair.localCandidate.foundation);\n      }\n    }\n  }\n\n  // 5.8 Scheduling Checks\n  private schedulingChecks() {\n    // Ordinary Check\n    {\n      // # find the highest-priority pair that is in the waiting state\n      const pair = this.checkList\n        .filter((pair) => {\n          if (this.options.forceTurn && pair.protocol.type === \"stun\")\n            return false;\n          return true;\n        })\n        .find((pair) => pair.state === CandidatePairState.WAITING);\n      if (pair) {\n        pair.handle = future(this.checkStart(pair));\n        return true;\n      }\n    }\n\n    {\n      // # find the highest-priority pair that is in the frozen state\n      const pair = this.checkList.find(\n        (pair) => pair.state === CandidatePairState.FROZEN\n      );\n      if (pair) {\n        pair.handle = future(this.checkStart(pair));\n        return true;\n      }\n    }\n\n    // # if we expect more candidates, keep going\n    if (!this.remoteCandidatesEnd) {\n      return !this.checkListDone;\n    }\n\n    return false;\n  }\n\n  // 4.1.1.4 ? 生存確認 life check\n  private queryConsent = () =>\n    new PCancelable(async (r, f, onCancel) => {\n      let failures = 0;\n\n      const cancelEvent = new AbortController();\n      onCancel(() => {\n        failures += CONSENT_FAILURES;\n        cancelEvent.abort();\n        f(\"cancel\");\n      });\n\n      // \"\"\"\n      // Periodically check consent (RFC 7675).\n      // \"\"\"\n\n      try {\n        while (!this.remoteIsLite && this.state !== \"closed\") {\n          // # randomize between 0.8 and 1.2 times CONSENT_INTERVAL\n          await timers.setTimeout(\n            CONSENT_INTERVAL * (0.8 + 0.4 * Math.random()) * 1000,\n            undefined,\n            { signal: cancelEvent.signal }\n          );\n\n          for (const key of this.nominatedKeys) {\n            const pair = this.nominated[Number(key)];\n            const request = this.buildRequest(pair, false);\n            try {\n              const [msg, addr] = await pair.protocol.request(\n                request,\n                pair.remoteAddr,\n                Buffer.from(this.remotePassword, \"utf8\"),\n                0\n              );\n              failures = 0;\n              if (this.state === \"disconnected\") {\n                this.setState(\"connected\");\n              }\n            } catch (error) {\n              failures++;\n              this.setState(\"disconnected\");\n            }\n            if (failures >= CONSENT_FAILURES) {\n              log(\"Consent to send expired\");\n              this.queryConsentHandle = undefined;\n              // 切断検知\n              r(await this.close());\n              return;\n            }\n          }\n        }\n      } catch (error) {}\n    });\n\n  async close() {\n    // \"\"\"\n    // Close the connection.\n    // \"\"\"\n\n    this.setState(\"closed\");\n\n    // # stop consent freshness tests\n    if (this.queryConsentHandle && !this.queryConsentHandle.done()) {\n      this.queryConsentHandle.cancel();\n      try {\n        await this.queryConsentHandle.promise;\n      } catch (error) {\n        // pass\n      }\n    }\n\n    // # stop check list\n    if (this.checkList && !this.checkListDone) {\n      this.checkListState.put(new Promise((r) => r(ICE_FAILED)));\n    }\n\n    this.nominated = {};\n    for (const protocol of this.protocols) {\n      if (protocol.close) {\n        await protocol.close();\n      }\n    }\n\n    this.protocols = [];\n    this.localCandidates = [];\n  }\n\n  private setState(state: IceState) {\n    this.state = state;\n    this.stateChanged.execute(state);\n  }\n\n  async addRemoteCandidate(remoteCandidate: Candidate | undefined) {\n    // \"\"\"\n    // Add a remote candidate or signal end-of-candidates.\n\n    // To signal end-of-candidates, pass `None`.\n\n    // :param remote_candidate: A :class:`Candidate` instance or `None`.\n    // \"\"\"\n    if (this.remoteCandidatesEnd)\n      throw new Error(\"Cannot add remote candidate after end-of-candidates.\");\n\n    if (!remoteCandidate) {\n      this.pruneComponents();\n      this.remoteCandidatesEnd = true;\n      return;\n    }\n\n    if (remoteCandidate.host.includes(\".local\")) {\n      await timers.setTimeout(10);\n\n      const res = await util\n        .promisify(dns.lookup)(remoteCandidate.host)\n        .catch(() => {});\n      if (!res) return;\n\n      remoteCandidate.host = res.address;\n    }\n\n    try {\n      validateRemoteCandidate(remoteCandidate);\n    } catch (error) {\n      return;\n    }\n    this.remoteCandidates.push(remoteCandidate);\n\n    this.pairRemoteCandidate(remoteCandidate);\n    this.sortCheckList();\n  }\n\n  send = async (data: Buffer) => {\n    // \"\"\"\n    // Send a datagram on the first component.\n\n    // If the connection is not established, a `ConnectionError` is raised.\n\n    // :param data: The data to be sent.\n    // \"\"\"\n    await this.sendTo(data, 1);\n  };\n\n  private async sendTo(data: Buffer, component: number) {\n    // \"\"\"\n    // Send a datagram on the specified component.\n\n    // If the connection is not established, a `ConnectionError` is raised.\n\n    // :param data: The data to be sent.\n    // :param component: The component on which to send the data.\n    // \"\"\"\n    const activePair = this.nominated[component];\n    if (activePair) {\n      await activePair.protocol.sendData(data, activePair.remoteAddr);\n    } else {\n      log(\"Cannot send data, not connected\");\n    }\n  }\n\n  getDefaultCandidate(component: number) {\n    const candidates = this.localCandidates.sort(\n      (a, b) => a.priority - b.priority\n    );\n    const candidate = candidates.find(\n      (candidate) => candidate.component === component\n    );\n    return candidate;\n  }\n\n  requestReceived(\n    message: Message,\n    addr: Address,\n    protocol: Protocol,\n    rawData: Buffer\n  ) {\n    if (message.messageMethod !== methods.BINDING) {\n      this.respondError(message, addr, protocol, [400, \"Bad Request\"]);\n      return;\n    }\n\n    // # authenticate request\n    try {\n      parseMessage(rawData, Buffer.from(this.localPassword, \"utf8\"));\n      if (!this.remoteUsername) {\n        const rxUsername = `${this.localUserName}:${this.remoteUsername}`;\n        if (message.attributes[\"USERNAME\"] != rxUsername)\n          throw new Error(\"Wrong username\");\n      }\n    } catch (error) {\n      this.respondError(message, addr, protocol, [400, \"Bad Request\"]);\n      return;\n    }\n\n    const { iceControlling } = this;\n\n    // 7.2.1.1.  Detecting and Repairing Role Conflicts\n    if (iceControlling && message.attributesKeys.includes(\"ICE-CONTROLLING\")) {\n      if (this._tieBreaker >= message.attributes[\"ICE-CONTROLLING\"]) {\n        this.respondError(message, addr, protocol, [487, \"Role Conflict\"]);\n        return;\n      } else {\n        this.switchRole(false);\n      }\n    } else if (\n      !iceControlling &&\n      message.attributesKeys.includes(\"ICE-CONTROLLED\")\n    ) {\n      if (this._tieBreaker < message.attributes[\"ICE-CONTROLLED\"]) {\n        this.respondError(message, addr, protocol, [487, \"Role Conflict\"]);\n      } else {\n        this.switchRole(true);\n        return;\n      }\n    }\n\n    // # send binding response\n    const response = new Message(\n      methods.BINDING,\n      classes.RESPONSE,\n      message.transactionId\n    );\n    response.attributes[\"XOR-MAPPED-ADDRESS\"] = addr;\n    response.addMessageIntegrity(Buffer.from(this.localPassword, \"utf8\"));\n    response.addFingerprint();\n    protocol.sendStun(response, addr);\n\n    // todo fix\n    // if (this.checkList.length === 0) {\n    //   this.earlyChecks.push([message, addr, protocol]);\n    // } else {\n    this.checkIncoming(message, addr, protocol);\n    // }\n  }\n\n  dataReceived(data: Buffer, component: number) {\n    this.onData.execute(data, component);\n  }\n\n  // for test only\n  set remoteCandidates(value: Candidate[]) {\n    if (this.remoteCandidatesEnd)\n      throw new Error(\"Cannot set remote candidates after end-of-candidates.\");\n    this._remoteCandidates = [];\n    for (const remoteCandidate of value) {\n      try {\n        validateRemoteCandidate(remoteCandidate);\n      } catch (error) {\n        continue;\n      }\n      this.remoteCandidates.push(remoteCandidate);\n    }\n    this.pruneComponents();\n    this.remoteCandidatesEnd = true;\n  }\n  get remoteCandidates() {\n    return this._remoteCandidates;\n  }\n\n  private pruneComponents() {\n    const seenComponents = new Set(\n      this.remoteCandidates.map((v) => v.component)\n    );\n    const missingComponents = [...difference(this._components, seenComponents)];\n    if (missingComponents.length > 0) {\n      this._components = seenComponents;\n    }\n  }\n\n  private sortCheckList() {\n    sortCandidatePairs(this.checkList, this.iceControlling);\n  }\n\n  private findPair(protocol: Protocol, remoteCandidate: Candidate) {\n    const pair = this.checkList.find(\n      (pair) =>\n        isEqual(pair.protocol, protocol) &&\n        isEqual(pair.remoteCandidate, remoteCandidate)\n    );\n    return pair;\n  }\n\n  private checkState(pair: CandidatePair, state: CandidatePairState) {\n    pair.state = state;\n  }\n\n  private switchRole(iceControlling: boolean) {\n    log(\"switch role\", iceControlling);\n    this.iceControlling = iceControlling;\n    this.sortCheckList();\n  }\n\n  private checkComplete(pair: CandidatePair) {\n    pair.handle = undefined;\n    if (pair.state === CandidatePairState.SUCCEEDED) {\n      if (pair.nominated) {\n        this.nominated[pair.component] = pair;\n\n        // 8.1.2.  Updating States\n\n        // The agent MUST remove all Waiting and Frozen pairs in the check\n        // list and triggered check queue for the same component as the\n        // nominated pairs for that media stream.\n        for (const p of this.checkList) {\n          if (\n            p.component === pair.component &&\n            [CandidatePairState.WAITING, CandidatePairState.FROZEN].includes(\n              p.state\n            )\n          ) {\n            this.checkState(p, CandidatePairState.FAILED);\n          }\n        }\n      }\n\n      // Once there is at least one nominated pair in the valid list for\n      // every component of at least one media stream and the state of the\n      // check list is Running:\n      if (this.nominatedKeys.length === this._components.size) {\n        if (!this.checkListDone) {\n          log(\"ICE completed\");\n          this.checkListState.put(new Promise((r) => r(ICE_COMPLETED)));\n          this.checkListDone = true;\n        }\n        return;\n      }\n\n      // 7.1.3.2.3.  Updating Pair States\n      for (const p of this.checkList) {\n        if (\n          p.localCandidate.foundation === pair.localCandidate.foundation &&\n          p.state === CandidatePairState.FROZEN\n        ) {\n          this.checkState(p, CandidatePairState.WAITING);\n        }\n      }\n    }\n\n    {\n      const list = [CandidatePairState.SUCCEEDED, CandidatePairState.FAILED];\n      if (this.checkList.find(({ state }) => !list.includes(state))) {\n        return;\n      }\n    }\n\n    if (!this.iceControlling) {\n      const target = CandidatePairState.SUCCEEDED;\n      if (this.checkList.find(({ state }) => state === target)) {\n        return;\n      }\n    }\n\n    if (!this.checkListDone) {\n      log(\"ICE failed\");\n      this.checkListState.put(new Promise((r) => r(ICE_FAILED)));\n      this.checkListDone = true;\n    }\n  }\n\n  // 3.  Terminology : Check\n  checkStart = (pair: CandidatePair) =>\n    new PCancelable(async (r, f, onCancel) => {\n      onCancel(() => f(\"cancel\"));\n\n      // \"\"\"\n      // Starts a check.\n      // \"\"\"\n\n      log(\"check start\", pair.remoteCandidate);\n\n      this.checkState(pair, CandidatePairState.IN_PROGRESS);\n\n      const nominate = this.iceControlling && !this.remoteIsLite;\n      const request = this.buildRequest(pair, nominate);\n\n      const result: { response?: Message; addr?: Address } = {};\n      try {\n        const [response, addr] = await pair.protocol.request(\n          request,\n          pair.remoteAddr,\n          Buffer.from(this.remotePassword, \"utf8\")\n        );\n        log(\"response\", response, addr);\n        result.response = response;\n        result.addr = addr;\n      } catch (error) {\n        const exc: TransactionError = error;\n        // 7.1.3.1.  Failure Cases\n        log(\"failure case\", exc.response);\n        if (exc.response?.attributes[\"ERROR-CODE\"][0] === 487) {\n          if (request.attributesKeys.includes(\"ICE-CONTROLLED\")) {\n            this.switchRole(true);\n          } else if (request.attributesKeys.includes(\"ICE-CONTROLLING\")) {\n            this.switchRole(false);\n          }\n          await this.checkStart(pair);\n          r();\n          return;\n        } else {\n          log(\"CandidatePairState.FAILED\");\n          this.checkState(pair, CandidatePairState.FAILED);\n          this.checkComplete(pair);\n          r();\n          return;\n        }\n      }\n\n      // # check remote address matches\n      if (!isEqual(result.addr, pair.remoteAddr)) {\n        this.checkState(pair, CandidatePairState.FAILED);\n        this.checkComplete(pair);\n        r();\n        return;\n      }\n\n      // # success\n      if (nominate || pair.remoteNominated) {\n        // # nominated by agressive nomination or the remote party\n        pair.nominated = true;\n      } else if (this.iceControlling && !this.nominating.has(pair.component)) {\n        // # perform regular nomination\n        this.nominating.add(pair.component);\n        const request = this.buildRequest(pair, true);\n        try {\n          await pair.protocol.request(\n            request,\n            pair.remoteAddr,\n            Buffer.from(this.remotePassword, \"utf8\")\n          );\n        } catch (error) {\n          this.checkState(pair, CandidatePairState.FAILED);\n          this.checkComplete(pair);\n          return;\n        }\n        pair.nominated = true;\n      }\n\n      this.checkState(pair, CandidatePairState.SUCCEEDED);\n      this.checkComplete(pair);\n      r();\n    });\n\n  // 7.2.  STUN Server Procedures\n  // 7.2.1.3、7.2.1.4、および7.2.1.5\n  checkIncoming(message: Message, addr: Address, protocol: Protocol) {\n    // \"\"\"\n    // Handle a successful incoming check.\n    // \"\"\"\n    const component = protocol.localCandidate?.component;\n    if (component == undefined) throw new Error();\n\n    // find remote candidate\n    let remoteCandidate: Candidate | undefined;\n    const [host, port] = addr;\n    for (const c of this.remoteCandidates) {\n      if (c.host === host && c.port === port) {\n        remoteCandidate = c;\n        if (remoteCandidate.component !== component)\n          throw new Error(\"checkIncoming\");\n        break;\n      }\n    }\n    if (!remoteCandidate) {\n      // 7.2.1.3.  Learning Peer Reflexive Candidates\n      remoteCandidate = new Candidate(\n        randomString(10),\n        component,\n        \"udp\",\n        message.attributes[\"PRIORITY\"],\n        host,\n        port,\n        \"prflx\"\n      );\n      this.remoteCandidates.push(remoteCandidate);\n    }\n\n    // find pair\n    let pair = this.findPair(protocol, remoteCandidate);\n    if (!pair) {\n      pair = new CandidatePair(protocol, remoteCandidate);\n      pair.state = CandidatePairState.WAITING;\n      this.checkList.push(pair);\n      this.sortCheckList();\n    }\n\n    // 7.2.1.4.  Triggered Checks\n    if (\n      [CandidatePairState.WAITING, CandidatePairState.FAILED].includes(\n        pair.state\n      )\n    ) {\n      pair.handle = future(this.checkStart(pair));\n    }\n\n    // 7.2.1.5. Updating the Nominated Flag\n    if (\n      message.attributesKeys.includes(\"USE-CANDIDATE\") &&\n      !this.iceControlling\n    ) {\n      pair.remoteNominated = true;\n      if (pair.state === CandidatePairState.SUCCEEDED) {\n        pair.nominated = true;\n        this.checkComplete(pair);\n      }\n    }\n  }\n\n  private pairRemoteCandidate = (remoteCandidate: Candidate) => {\n    for (const protocol of this.protocols) {\n      if (\n        protocol.localCandidate?.canPairWith(remoteCandidate) &&\n        !this.findPair(protocol, remoteCandidate)\n      ) {\n        const pair = new CandidatePair(protocol, remoteCandidate);\n        this.checkList.push(pair);\n      }\n    }\n  };\n\n  private buildRequest(pair: CandidatePair, nominate: boolean) {\n    const txUsername = `${this.remoteUsername}:${this.localUserName}`;\n    const request = new Message(methods.BINDING, classes.REQUEST);\n    request.attributes[\"USERNAME\"] = txUsername;\n    request.attributes[\"PRIORITY\"] = candidatePriority(pair.component, \"prflx\");\n    if (this.iceControlling) {\n      request.attributes[\"ICE-CONTROLLING\"] = this._tieBreaker;\n      if (nominate) {\n        request.attributes[\"USE-CANDIDATE\"] = null;\n      }\n    } else {\n      request.attributes[\"ICE-CONTROLLED\"] = this._tieBreaker;\n    }\n    return request;\n  }\n\n  private respondError(\n    request: Message,\n    addr: Address,\n    protocol: Protocol,\n    errorCode: [number, string]\n  ) {\n    const response = new Message(\n      request.messageMethod,\n      classes.ERROR,\n      request.transactionId\n    );\n    response.attributes[\"ERROR-CODE\"] = errorCode;\n    response.addMessageIntegrity(Buffer.from(this.localPassword, \"utf8\"));\n    response.addFingerprint();\n    protocol.sendStun(response, addr);\n  }\n}\n\nexport class CandidatePair {\n  handle?: Future;\n  nominated = false;\n  remoteNominated = false;\n  // 5.7.4.  Computing States\n  state = CandidatePairState.FROZEN;\n\n  constructor(public protocol: Protocol, public remoteCandidate: Candidate) {}\n\n  get localCandidate() {\n    if (!this.protocol.localCandidate)\n      throw new Error(\"localCandidate not exist\");\n    return this.protocol.localCandidate;\n  }\n\n  get remoteAddr(): Address {\n    return [this.remoteCandidate.host, this.remoteCandidate.port];\n  }\n\n  get component() {\n    return this.localCandidate.component;\n  }\n}\n\nconst ICE_COMPLETED = 1 as const;\nconst ICE_FAILED = 2 as const;\n\nconst CONSENT_INTERVAL = 5;\nconst CONSENT_FAILURES = 6;\n\nexport enum CandidatePairState {\n  FROZEN = 0,\n  WAITING = 1,\n  IN_PROGRESS = 2,\n  SUCCEEDED = 3,\n  FAILED = 4,\n}\n\ntype IceState = \"disconnected\" | \"closed\" | \"completed\" | \"new\" | \"connected\";\n\nexport interface IceOptions {\n  components: number;\n  stunServer?: Address;\n  turnServer?: Address;\n  turnUsername?: string;\n  turnPassword?: string;\n  turnSsl?: boolean;\n  turnTransport?: string;\n  forceTurn?: boolean;\n  useIpv4: boolean;\n  useIpv6: boolean;\n  portRange?: [number, number];\n}\n\nconst defaultOptions: IceOptions = {\n  components: 1,\n  useIpv4: true,\n  useIpv6: true,\n};\n\nexport function validateRemoteCandidate(candidate: Candidate) {\n  // \"\"\"\n  // Check the remote candidate is supported.\n  // \"\"\"\n  if (![\"host\", \"relay\", \"srflx\"].includes(candidate.type))\n    throw new Error(`Unexpected candidate type \"${candidate.type}\"`);\n\n  // ipaddress.ip_address(candidate.host)\n  return candidate;\n}\n\nexport function sortCandidatePairs(\n  pairs: CandidatePair[],\n  iceControlling: boolean\n) {\n  pairs.sort(\n    (a, b) =>\n      candidatePairPriority(\n        a.localCandidate,\n        a.remoteCandidate,\n        iceControlling\n      ) -\n      candidatePairPriority(b.localCandidate, b.remoteCandidate, iceControlling)\n  );\n}\n\n// 5.7.2.  Computing Pair Priority and Ordering Pairs\nexport function candidatePairPriority(\n  local: Candidate,\n  remote: Candidate,\n  iceControlling: boolean\n) {\n  const G = (iceControlling && local.priority) || remote.priority;\n  const D = (iceControlling && remote.priority) || local.priority;\n  return (1 << 32) * Math.min(G, D) + 2 * Math.max(G, D) + (G > D ? 1 : 0);\n}\n\nexport function getHostAddress(useIpv4: boolean, useIpv6: boolean) {\n  const address: string[] = [];\n  if (useIpv4) address.push(nodeIp.address(\"\", \"ipv4\"));\n  if (useIpv6) address.push(nodeIp.address(\"\", \"ipv6\"));\n  return address;\n}\n\nexport async function serverReflexiveCandidate(\n  protocol: Protocol,\n  stunServer: Address\n) {\n  // \"\"\"\n  // Query STUN server to obtain a server-reflexive candidate.\n  // \"\"\"\n\n  // # perform STUN query\n  const request = new Message(methods.BINDING, classes.REQUEST);\n  try {\n    const [response] = await protocol.request(request, stunServer);\n\n    const localCandidate = protocol.localCandidate;\n    if (!localCandidate) throw new Error(\"not exist\");\n\n    return new Candidate(\n      candidateFoundation(\"srflx\", \"udp\", localCandidate.host),\n      localCandidate.component,\n      localCandidate.transport,\n      candidatePriority(localCandidate.component, \"srflx\"),\n      response.attributes[\"XOR-MAPPED-ADDRESS\"][0],\n      response.attributes[\"XOR-MAPPED-ADDRESS\"][1],\n      \"srflx\",\n      localCandidate.host,\n      localCandidate.port\n    );\n  } catch (error) {\n    // todo fix\n    log(\"error serverReflexiveCandidate\", error);\n  }\n}\n\nexport function validateAddress(addr?: Address): Address | undefined {\n  if (addr && isNaN(addr[1])) {\n    return [addr[0], 443];\n  }\n  return addr;\n}\n"]}