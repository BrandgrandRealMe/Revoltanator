{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../ice/src/utils.ts"],"names":[],"mappings":";;;AAAA,iCAAiD;AAEjD,+BAA6D;AAC7D,8CAA+C;AAGxC,KAAK,UAAU,UAAU,CAAC,WAAuB,MAAM;IAC5D,MAAM,MAAM,GAAG,oBAAY,CAAC,QAAQ,CAAC,CAAC;IAEtC,YAAY,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAEnC,MAAM,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,EAAE;QAC5B,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC;IACpC,MAAM,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxD,OAAO,IAAI,CAAC;AACd,CAAC;AAbD,gCAaC;AAEM,KAAK,UAAU,QAAQ,CAC5B,GAAW,EACX,GAAW,EACX,WAAuB,MAAM;IAE7B,IAAI,IAAwB,CAAC;IAE7B,KAAK,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,EAAE;QAC/B,MAAM,MAAM,GAAG,oBAAY,CAAC,QAAQ,CAAC,CAAC;QAEtC,YAAY,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAEnC,MAAM,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,EAAE;YAC5B,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC;QAC9B,MAAM,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxD,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,EAAE;YAC9B,MAAM;SACP;KACF;IAED,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAE7C,OAAO,IAAI,CAAC;AACd,CAAC;AA3BD,4BA2BC;AAEM,KAAK,UAAU,WAAW,CAAC,UAAoB;IACpD,MAAM,UAAU,GAAG,IAAI,gBAAU,CAAC,IAAI,EAAE;QACtC,UAAU,EAAE,UAAU,IAAI,CAAC,mBAAmB,EAAE,KAAK,CAAC;KACvD,CAAC,CAAC;IACH,MAAM,UAAU,CAAC,gBAAgB,EAAE,CAAC;IAEpC,MAAM,QAAQ,GAAG,IAAI,uBAAY,CAAC,UAAU,CAAC,CAAC;IAC9C,QAAQ,CAAC,cAAc,GAAG,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IACxD,MAAM,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACpC,MAAM,SAAS,GAAG,MAAM,8BAAwB,CAAC,QAAQ,EAAE;QACzD,mBAAmB;QACnB,KAAK;KACN,CAAC,CAAC;IAEH,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;IACzB,MAAM,QAAQ,CAAC,KAAK,EAAE,CAAC;IAEvB,OAAO,SAAS,EAAE,IAAI,CAAC;AACzB,CAAC;AAlBD,kCAkBC","sourcesContent":["import { createSocket, SocketType } from \"dgram\";\n\nimport { Connection, serverReflexiveCandidate } from \"./ice\";\nimport { StunProtocol } from \"./stun/protocol\";\nimport { Address } from \"./types/model\";\n\nexport async function randomPort(protocol: SocketType = \"udp4\") {\n  const socket = createSocket(protocol);\n\n  setImmediate(() => socket.bind(0));\n\n  await new Promise<void>((r) => {\n    socket.once(\"error\", r);\n    socket.once(\"listening\", r);\n  });\n\n  const port = socket.address()?.port;\n  await new Promise<void>((r) => socket.close(() => r()));\n  return port;\n}\n\nexport async function findPort(\n  min: number,\n  max: number,\n  protocol: SocketType = \"udp4\"\n) {\n  let port: number | undefined;\n\n  for (let i = min; i <= max; i++) {\n    const socket = createSocket(protocol);\n\n    setImmediate(() => socket.bind(i));\n\n    await new Promise<void>((r) => {\n      socket.once(\"error\", r);\n      socket.once(\"listening\", r);\n    });\n\n    port = socket.address()?.port;\n    await new Promise<void>((r) => socket.close(() => r()));\n    if (min <= port && port <= max) {\n      break;\n    }\n  }\n\n  if (!port) throw new Error(\"port not found\");\n\n  return port;\n}\n\nexport async function getGlobalIp(stunServer?: Address) {\n  const connection = new Connection(true, {\n    stunServer: stunServer ?? [\"stun.l.google.com\", 19302],\n  });\n  await connection.gatherCandidates();\n\n  const protocol = new StunProtocol(connection);\n  protocol.localCandidate = connection.localCandidates[0];\n  await protocol.connectionMade(true);\n  const candidate = await serverReflexiveCandidate(protocol, [\n    \"stun.l.google.com\",\n    19302,\n  ]);\n\n  await connection.close();\n  await protocol.close();\n\n  return candidate?.host;\n}\n"]}