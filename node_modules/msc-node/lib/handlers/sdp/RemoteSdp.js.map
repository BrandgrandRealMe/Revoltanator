{"version":3,"file":"RemoteSdp.js","sourceRoot":"","sources":["../../../src/handlers/sdp/RemoteSdp.ts"],"names":[],"mappings":"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","sourcesContent":["import * as sdpTransform from 'sdp-transform';\nimport { Logger } from '../../Logger';\nimport {\n\tMediaSection,\n\tAnswerMediaSection,\n\tOfferMediaSection\n} from './MediaSection';\nimport {\n\tIceParameters,\n\tIceCandidate,\n\tDtlsParameters,\n\tDtlsRole,\n\tPlainRtpParameters\n} from '../../Transport';\nimport { ProducerCodecOptions } from '../../Producer';\nimport { MediaKind, RtpParameters } from '../../RtpParameters';\nimport { SctpParameters } from '../../SctpParameters';\n\nconst logger = new Logger('RemoteSdp');\n\nexport class RemoteSdp\n{\n\t// Remote ICE parameters.\n\tprivate _iceParameters?: IceParameters;\n\t// Remote ICE candidates.\n\tprivate readonly _iceCandidates?: IceCandidate[];\n\t// Remote DTLS parameters.\n\tprivate readonly _dtlsParameters?: DtlsParameters;\n\t// Remote SCTP parameters.\n\tprivate readonly _sctpParameters?: SctpParameters;\n\t// Parameters for plain RTP (no SRTP nor DTLS no BUNDLE).\n\tprivate readonly _plainRtpParameters?: PlainRtpParameters;\n\t// Whether this is Plan-B SDP.\n\tprivate readonly _planB: boolean;\n\t// MediaSection instances with same order as in the SDP.\n\tprivate readonly _mediaSections: MediaSection[] = [];\n\t// MediaSection indices indexed by MID.\n\tprivate readonly _midToIndex: Map<string, number> = new Map();\n\t// First MID.\n\tprivate _firstMid?: string;\n\t// SDP object.\n\tprivate readonly _sdpObject: any;\n\n\tconstructor(\n\t\t{\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\tplainRtpParameters,\n\t\t\tplanB = false\n\t\t}:\n\t\t{\n\t\t\ticeParameters?: IceParameters;\n\t\t\ticeCandidates?: IceCandidate[];\n\t\t\tdtlsParameters?: DtlsParameters;\n\t\t\tsctpParameters?: SctpParameters;\n\t\t\tplainRtpParameters?: PlainRtpParameters;\n\t\t\tplanB?: boolean;\n\t\t}\n\t)\n\t{\n\t\tthis._iceParameters = iceParameters;\n\t\tthis._iceCandidates = iceCandidates;\n\t\tthis._dtlsParameters = dtlsParameters;\n\t\tthis._sctpParameters = sctpParameters;\n\t\tthis._plainRtpParameters = plainRtpParameters;\n\t\tthis._planB = planB;\n\t\tthis._sdpObject =\n\t\t{\n\t\t\tversion : 0,\n\t\t\torigin  :\n\t\t\t{\n\t\t\t\taddress        : '0.0.0.0',\n\t\t\t\tipVer          : 4,\n\t\t\t\tnetType        : 'IN',\n\t\t\t\tsessionId      : 10000,\n\t\t\t\tsessionVersion : 0,\n\t\t\t\tusername       : 'mediasoup-client'\n\t\t\t},\n\t\t\tname   : '-',\n\t\t\ttiming : { start: 0, stop: 0 },\n\t\t\tmedia  : []\n\t\t};\n\n\t\t// If ICE parameters are given, add ICE-Lite indicator.\n\t\tif (iceParameters && iceParameters.iceLite)\n\t\t{\n\t\t\tthis._sdpObject.icelite = 'ice-lite';\n\t\t}\n\n\t\t// If DTLS parameters are given, assume WebRTC and BUNDLE.\n\t\tif (dtlsParameters)\n\t\t{\n\t\t\tthis._sdpObject.msidSemantic = { semantic: 'WMS', token: '*' };\n\n\t\t\t// NOTE: We take the latest fingerprint.\n\t\t\tconst numFingerprints = this._dtlsParameters!.fingerprints.length;\n\n\t\t\tthis._sdpObject.fingerprint =\n\t\t\t{\n\t\t\t\ttype : dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n\t\t\t\thash : dtlsParameters.fingerprints[numFingerprints - 1].value\n\t\t\t};\n\n\t\t\tthis._sdpObject.groups = [ { type: 'BUNDLE', mids: '' } ];\n\t\t}\n\n\t\t// If there are plain RPT parameters, override SDP origin.\n\t\tif (plainRtpParameters)\n\t\t{\n\t\t\tthis._sdpObject.origin.address = plainRtpParameters.ip;\n\t\t\tthis._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n\t\t}\n\t}\n\n\tupdateIceParameters(iceParameters: IceParameters): void\n\t{\n\t\tlogger.debug(\n\t\t\t'updateIceParameters() [iceParameters:%o]',\n\t\t\ticeParameters);\n\n\t\tthis._iceParameters = iceParameters;\n\t\tthis._sdpObject.icelite = iceParameters.iceLite ? 'ice-lite' : undefined;\n\n\t\tfor (const mediaSection of this._mediaSections)\n\t\t{\n\t\t\tmediaSection.setIceParameters(iceParameters);\n\t\t}\n\t}\n\n\tupdateDtlsRole(role: DtlsRole): void\n\t{\n\t\tlogger.debug('updateDtlsRole() [role:%s]', role);\n\n\t\tthis._dtlsParameters!.role = role;\n\n\t\tfor (const mediaSection of this._mediaSections)\n\t\t{\n\t\t\tmediaSection.setDtlsRole(role);\n\t\t}\n\t}\n\n\tgetNextMediaSectionIdx(): { idx: number; reuseMid?: string }\n\t{\n\t\t// If a closed media section is found, return its index.\n\t\tfor (let idx = 0; idx < this._mediaSections.length; ++idx)\n\t\t{\n\t\t\tconst mediaSection = this._mediaSections[idx];\n\n\t\t\tif (mediaSection.closed)\n\t\t\t\treturn { idx, reuseMid: mediaSection.mid };\n\t\t}\n\n\t\t// If no closed media section is found, return next one.\n\t\treturn { idx: this._mediaSections.length };\n\t}\n\n\tsend(\n\t\t{\n\t\t\tofferMediaObject,\n\t\t\treuseMid,\n\t\t\tofferRtpParameters,\n\t\t\tanswerRtpParameters,\n\t\t\tcodecOptions,\n\t\t\textmapAllowMixed = false\n\t\t}:\n\t\t{\n\t\t\tofferMediaObject: any;\n\t\t\treuseMid?: string;\n\t\t\tofferRtpParameters: RtpParameters;\n\t\t\tanswerRtpParameters: RtpParameters;\n\t\t\tcodecOptions?: ProducerCodecOptions;\n\t\t\textmapAllowMixed? : boolean;\n\t\t}\n\t): void\n\t{\n\t\tconst mediaSection = new AnswerMediaSection(\n\t\t\t{\n\t\t\t\ticeParameters      : this._iceParameters,\n\t\t\t\ticeCandidates      : this._iceCandidates,\n\t\t\t\tdtlsParameters     : this._dtlsParameters,\n\t\t\t\tplainRtpParameters : this._plainRtpParameters,\n\t\t\t\tplanB              : this._planB,\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters,\n\t\t\t\tanswerRtpParameters,\n\t\t\t\tcodecOptions,\n\t\t\t\textmapAllowMixed\n\t\t\t});\n\n\t\t// Unified-Plan with closed media section replacement.\n\t\tif (reuseMid)\n\t\t{\n\t\t\tthis._replaceMediaSection(mediaSection, reuseMid);\n\t\t}\n\t\t// Unified-Plan or Plan-B with different media kind.\n\t\telse if (!this._midToIndex.has(mediaSection.mid))\n\t\t{\n\t\t\tthis._addMediaSection(mediaSection);\n\t\t}\n\t\t// Plan-B with same media kind.\n\t\telse\n\t\t{\n\t\t\tthis._replaceMediaSection(mediaSection);\n\t\t}\n\t}\n\n\treceive(\n\t\t{\n\t\t\tmid,\n\t\t\tkind,\n\t\t\tofferRtpParameters,\n\t\t\tstreamId,\n\t\t\ttrackId\n\t\t}:\n\t\t{\n\t\t\tmid: string;\n\t\t\tkind: MediaKind;\n\t\t\tofferRtpParameters: RtpParameters;\n\t\t\tstreamId: string;\n\t\t\ttrackId: string;\n\t\t}\n\t): void\n\t{\n\t\tconst idx = this._midToIndex.get(mid);\n\t\tlet mediaSection: OfferMediaSection | undefined;\n\n\t\tif (idx !== undefined)\n\t\t\tmediaSection = this._mediaSections[idx] as OfferMediaSection;\n\n\t\t// Unified-Plan or different media kind.\n\t\tif (!mediaSection)\n\t\t{\n\t\t\tmediaSection = new OfferMediaSection(\n\t\t\t\t{\n\t\t\t\t\ticeParameters      : this._iceParameters,\n\t\t\t\t\ticeCandidates      : this._iceCandidates,\n\t\t\t\t\tdtlsParameters     : this._dtlsParameters,\n\t\t\t\t\tplainRtpParameters : this._plainRtpParameters,\n\t\t\t\t\tplanB              : this._planB,\n\t\t\t\t\tmid,\n\t\t\t\t\tkind,\n\t\t\t\t\tofferRtpParameters,\n\t\t\t\t\tstreamId,\n\t\t\t\t\ttrackId\n\t\t\t\t});\n\n\t\t\t// Let's try to recycle a closed media section (if any).\n\t\t\t// NOTE: Yes, we can recycle a closed m=audio section with a new m=video.\n\t\t\tconst oldMediaSection = this._mediaSections.find((m) => (m.closed));\n\n\t\t\tif (oldMediaSection)\n\t\t\t{\n\t\t\t\tthis._replaceMediaSection(mediaSection, oldMediaSection.mid);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis._addMediaSection(mediaSection);\n\t\t\t}\n\t\t}\n\t\t// Plan-B.\n\t\telse\n\t\t{\n\t\t\tmediaSection.planBReceive({ offerRtpParameters, streamId, trackId });\n\n\t\t\tthis._replaceMediaSection(mediaSection);\n\t\t}\n\t}\n\n\tdisableMediaSection(mid: string): void\n\t{\n\t\tconst idx = this._midToIndex.get(mid);\n\n\t\tif (idx === undefined)\n\t\t{\n\t\t\tthrow new Error(`no media section found with mid '${mid}'`);\n\t\t}\n\n\t\tconst mediaSection = this._mediaSections[idx];\n\n\t\tmediaSection.disable();\n\t}\n\n\tcloseMediaSection(mid: string): void\n\t{\n\t\tconst idx = this._midToIndex.get(mid);\n\n\t\tif (idx === undefined)\n\t\t{\n\t\t\tthrow new Error(`no media section found with mid '${mid}'`);\n\t\t}\n\n\t\tconst mediaSection = this._mediaSections[idx];\n\n\t\t// NOTE: Closing the first m section is a pain since it invalidates the\n\t\t// bundled transport, so let's avoid it.\n\t\tif (mid === this._firstMid)\n\t\t{\n\t\t\tlogger.debug(\n\t\t\t\t'closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]',\n\t\t\t\tmid);\n\n\t\t\tthis.disableMediaSection(mid);\n\n\t\t\treturn;\n\t\t}\n\n\t\tmediaSection.close();\n\n\t\t// Regenerate BUNDLE mids.\n\t\tthis._regenerateBundleMids();\n\t}\n\n\tplanBStopReceiving(\n\t\t{\n\t\t\tmid,\n\t\t\tofferRtpParameters\n\t\t}:\n\t\t{\n\t\t\tmid: string;\n\t\t\tofferRtpParameters: RtpParameters;\n\t\t}\n\t): void\n\t{\n\t\tconst idx = this._midToIndex.get(mid);\n\n\t\tif (idx === undefined)\n\t\t{\n\t\t\tthrow new Error(`no media section found with mid '${mid}'`);\n\t\t}\n\n\t\tconst mediaSection = this._mediaSections[idx] as OfferMediaSection;\n\n\t\tmediaSection.planBStopReceiving({ offerRtpParameters });\n\t\tthis._replaceMediaSection(mediaSection);\n\t}\n\n\tsendSctpAssociation({ offerMediaObject }: { offerMediaObject: any }): void\n\t{\n\t\tconst mediaSection = new AnswerMediaSection(\n\t\t\t{\n\t\t\t\ticeParameters      : this._iceParameters,\n\t\t\t\ticeCandidates      : this._iceCandidates,\n\t\t\t\tdtlsParameters     : this._dtlsParameters,\n\t\t\t\tsctpParameters     : this._sctpParameters,\n\t\t\t\tplainRtpParameters : this._plainRtpParameters,\n\t\t\t\tofferMediaObject\n\t\t\t});\n\n\t\tthis._addMediaSection(mediaSection);\n\t}\n\n\treceiveSctpAssociation(\n\t\t{ oldDataChannelSpec = false }:\n\t\t{ oldDataChannelSpec?: boolean } = {}\n\t): void\n\t{\n\t\tconst mediaSection = new OfferMediaSection(\n\t\t\t{\n\t\t\t\ticeParameters      : this._iceParameters,\n\t\t\t\ticeCandidates      : this._iceCandidates,\n\t\t\t\tdtlsParameters     : this._dtlsParameters,\n\t\t\t\tsctpParameters     : this._sctpParameters,\n\t\t\t\tplainRtpParameters : this._plainRtpParameters,\n\t\t\t\tmid                : 'datachannel',\n\t\t\t\tkind               : 'application',\n\t\t\t\toldDataChannelSpec\n\t\t\t});\n\n\t\tthis._addMediaSection(mediaSection);\n\t}\n\n\tgetSdp(): string\n\t{\n\t\t// Increase SDP version.\n\t\tthis._sdpObject.origin.sessionVersion++;\n\n\t\treturn sdpTransform.write(this._sdpObject);\n\t}\n\n\t_addMediaSection(newMediaSection: MediaSection): void\n\t{\n\t\tif (!this._firstMid)\n\t\t\tthis._firstMid = newMediaSection.mid;\n\n\t\t// Add to the vector.\n\t\tthis._mediaSections.push(newMediaSection);\n\n\t\t// Add to the map.\n\t\tthis._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);\n\n\t\t// Add to the SDP object.\n\t\tthis._sdpObject.media.push(newMediaSection.getObject());\n\n\t\t// Regenerate BUNDLE mids.\n\t\tthis._regenerateBundleMids();\n\t}\n\n\t_replaceMediaSection(newMediaSection: MediaSection, reuseMid?: string): void\n\t{\n\t\t// Store it in the map.\n\t\tif (typeof reuseMid === 'string')\n\t\t{\n\t\t\tconst idx = this._midToIndex.get(reuseMid);\n\n\t\t\tif (idx === undefined)\n\t\t\t{\n\t\t\t\tthrow new Error(`no media section found for reuseMid '${reuseMid}'`);\n\t\t\t}\n\n\t\t\tconst oldMediaSection = this._mediaSections[idx];\n\n\t\t\t// Replace the index in the vector with the new media section.\n\t\t\tthis._mediaSections[idx] = newMediaSection;\n\n\t\t\t// Update the map.\n\t\t\tthis._midToIndex.delete(oldMediaSection.mid);\n\t\t\tthis._midToIndex.set(newMediaSection.mid, idx);\n\n\t\t\t// Update the SDP object.\n\t\t\tthis._sdpObject.media[idx] = newMediaSection.getObject();\n\n\t\t\t// Regenerate BUNDLE mids.\n\t\t\tthis._regenerateBundleMids();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst idx = this._midToIndex.get(newMediaSection.mid);\n\n\t\t\tif (idx === undefined)\n\t\t\t{\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`no media section found with mid '${newMediaSection.mid}'`);\n\t\t\t}\n\n\t\t\t// Replace the index in the vector with the new media section.\n\t\t\tthis._mediaSections[idx] = newMediaSection;\n\n\t\t\t// Update the SDP object.\n\t\t\tthis._sdpObject.media[idx] = newMediaSection.getObject();\n\t\t}\n\t}\n\n\t_regenerateBundleMids(): void\n\t{\n\t\tif (!this._dtlsParameters)\n\t\t\treturn;\n\n\t\tthis._sdpObject.groups[0].mids = this._mediaSections\n\t\t\t.filter((mediaSection: MediaSection) => !mediaSection.closed)\n\t\t\t.map((mediaSection: MediaSection) => mediaSection.mid)\n\t\t\t.join(' ');\n\t}\n}\n"]}