{"version":3,"file":"commonUtils.js","sourceRoot":"","sources":["../../../src/handlers/sdp/commonUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as sdpTransform from 'sdp-transform';\nimport { DtlsParameters, DtlsRole } from '../../Transport';\nimport {\n\tRtpCapabilities,\n\tRtpCodecCapability,\n\tRtpHeaderExtension,\n\tRtpParameters,\n\tRtcpFeedback\n} from '../../RtpParameters';\n\nexport function extractRtpCapabilities(\n\t{ sdpObject }:\n\t{ sdpObject: any }\n): RtpCapabilities\n{\n\t// Map of RtpCodecParameters indexed by payload type.\n\tconst codecsMap: Map<number, RtpCodecCapability> = new Map();\n\t// Array of RtpHeaderExtensions.\n\tconst headerExtensions: RtpHeaderExtension[] = [];\n\t// Whether a m=audio/video section has been already found.\n\tlet gotAudio = false;\n\tlet gotVideo = false;\n\n\tfor (const m of sdpObject.media)\n\t{\n\t\tconst kind = m.type;\n\n\t\tswitch (kind)\n\t\t{\n\t\t\tcase 'audio':\n\t\t\t{\n\t\t\t\tif (gotAudio)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tgotAudio = true;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'video':\n\t\t\t{\n\t\t\t\tif (gotVideo)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tgotVideo = true;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Get codecs.\n\t\tfor (const rtp of m.rtp)\n\t\t{\n\t\t\tconst codec: RtpCodecCapability =\n\t\t\t{\n\t\t\t\tkind                 : kind,\n\t\t\t\tmimeType             : `${kind}/${rtp.codec}`,\n\t\t\t\tpreferredPayloadType : rtp.payload,\n\t\t\t\tclockRate            : rtp.rate,\n\t\t\t\tchannels             : rtp.encoding,\n\t\t\t\tparameters           : {},\n\t\t\t\trtcpFeedback         : []\n\t\t\t};\n\n\t\t\tcodecsMap.set(codec.preferredPayloadType!, codec);\n\t\t}\n\n\t\t// Get codec parameters.\n\t\tfor (const fmtp of m.fmtp || [])\n\t\t{\n\t\t\tconst parameters = sdpTransform.parseParams(fmtp.config);\n\t\t\tconst codec = codecsMap.get(fmtp.payload);\n\n\t\t\tif (!codec)\n\t\t\t\tcontinue;\n\n\t\t\t// Specials case to convert parameter value to string.\n\t\t\tif (parameters && parameters.hasOwnProperty('profile-level-id'))\n\t\t\t\tparameters['profile-level-id'] = String(parameters['profile-level-id']);\n\n\t\t\tcodec.parameters = parameters;\n\t\t}\n\n\t\t// Get RTCP feedback for each codec.\n\t\tfor (const fb of m.rtcpFb || [])\n\t\t{\n\t\t\tconst codec = codecsMap.get(fb.payload);\n\n\t\t\tif (!codec)\n\t\t\t\tcontinue;\n\n\t\t\tconst feedback: RtcpFeedback =\n\t\t\t{\n\t\t\t\ttype      : fb.type,\n\t\t\t\tparameter : fb.subtype\n\t\t\t};\n\n\t\t\tif (!feedback.parameter)\n\t\t\t\tdelete feedback.parameter;\n\n\t\t\tcodec.rtcpFeedback!.push(feedback);\n\t\t}\n\n\t\t// Get RTP header extensions.\n\t\tfor (const ext of m.ext || [])\n\t\t{\n\t\t\t// Ignore encrypted extensions (not yet supported in mediasoup).\n\t\t\tif (ext['encrypt-uri'])\n\t\t\t\tcontinue;\n\n\t\t\tconst headerExtension: RtpHeaderExtension =\n\t\t\t{\n\t\t\t\tkind        : kind,\n\t\t\t\turi         : ext.uri,\n\t\t\t\tpreferredId : ext.value\n\t\t\t};\n\n\t\t\theaderExtensions.push(headerExtension);\n\t\t}\n\t}\n\n\tconst rtpCapabilities: RtpCapabilities =\n\t{\n\t\tcodecs           : Array.from(codecsMap.values()),\n\t\theaderExtensions : headerExtensions\n\t};\n\n\treturn rtpCapabilities;\n}\n\nexport function extractDtlsParameters(\n\t{ sdpObject }:\n\t{ sdpObject: any }\n): DtlsParameters\n{\n\tconst mediaObject = (sdpObject.media || [])\n\t\t.find((m: { iceUfrag: string; port: number }) => (\n\t\t\tm.iceUfrag && m.port !== 0\n\t\t));\n\n\tif (!mediaObject)\n\t\tthrow new Error('no active media section found');\n\n\tconst fingerprint = mediaObject.fingerprint || sdpObject.fingerprint;\n\tlet role: DtlsRole | undefined;\n\n\tswitch (mediaObject.setup)\n\t{\n\t\tcase 'active':\n\t\t\trole = 'client';\n\t\t\tbreak;\n\t\tcase 'passive':\n\t\t\trole = 'server';\n\t\t\tbreak;\n\t\tcase 'actpass':\n\t\t\trole = 'auto';\n\t\t\tbreak;\n\t}\n\n\tconst dtlsParameters: DtlsParameters =\n\t{\n\t\trole,\n\t\tfingerprints :\n\t\t[\n\t\t\t{\n\t\t\t\talgorithm : fingerprint.type,\n\t\t\t\tvalue     : fingerprint.hash\n\t\t\t}\n\t\t]\n\t};\n\n\treturn dtlsParameters;\n}\n\nexport function getCname(\n\t{ offerMediaObject }:\n\t{ offerMediaObject: any }\n): string\n{\n\tconst ssrcCnameLine = (offerMediaObject.ssrcs || [])\n\t\t.find((line: { attribute: string }) => line.attribute === 'cname');\n\n\tif (!ssrcCnameLine)\n\t\treturn '';\n\n\treturn ssrcCnameLine.value;\n}\n\n/**\n * Apply codec parameters in the given SDP m= section answer based on the\n * given RTP parameters of an offer.\n */\nexport function applyCodecParameters(\n\t{\n\t\tofferRtpParameters,\n\t\tanswerMediaObject\n\t}:\n\t{\n\t\tofferRtpParameters: RtpParameters;\n\t\tanswerMediaObject: any;\n\t}\n): void\n{\n\tfor (const codec of offerRtpParameters.codecs)\n\t{\n\t\tconst mimeType = codec.mimeType.toLowerCase();\n\n\t\t// Avoid parsing codec parameters for unhandled codecs.\n\t\tif (mimeType !== 'audio/opus')\n\t\t\tcontinue;\n\n\t\tconst rtp = (answerMediaObject.rtp || [])\n\t\t\t.find((r: { payload: number }) => r.payload === codec.payloadType);\n\n\t\tif (!rtp)\n\t\t\tcontinue;\n\n\t\t// Just in case.\n\t\tanswerMediaObject.fmtp = answerMediaObject.fmtp || [];\n\n\t\tlet fmtp = answerMediaObject.fmtp\n\t\t\t.find((f: { payload: number }) => f.payload === codec.payloadType);\n\n\t\tif (!fmtp)\n\t\t{\n\t\t\tfmtp = { payload: codec.payloadType, config: '' };\n\t\t\tanswerMediaObject.fmtp.push(fmtp);\n\t\t}\n\n\t\tconst parameters = sdpTransform.parseParams(fmtp.config);\n\n\t\tswitch (mimeType)\n\t\t{\n\t\t\tcase 'audio/opus':\n\t\t\t{\n\t\t\t\tconst spropStereo = codec.parameters['sprop-stereo'];\n\n\t\t\t\tif (spropStereo !== undefined)\n\t\t\t\t\tparameters.stereo = spropStereo ? 1 : 0;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Write the codec fmtp.config back.\n\t\tfmtp.config = '';\n\n\t\tfor (const key of Object.keys(parameters))\n\t\t{\n\t\t\tif (fmtp.config)\n\t\t\t\tfmtp.config += ';';\n\n\t\t\tfmtp.config += `${key}=${parameters[key]}`;\n\t\t}\n\t}\n}\n"]}