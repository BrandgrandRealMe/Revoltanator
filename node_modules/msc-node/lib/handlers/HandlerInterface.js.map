{"version":3,"file":"HandlerInterface.js","sourceRoot":"","sources":["../../src/handlers/HandlerInterface.ts"],"names":[],"mappings":";;;AAAA,kEAA+D;AAqF/D,MAAsB,gBAAiB,SAAQ,2CAAoB;IAElE;;;;;;;OAOG;IACH;QAEC,KAAK,EAAE,CAAC;IACT,CAAC;CAmDD;AAhED,4CAgEC","sourcesContent":["import { EnhancedEventEmitter } from '../EnhancedEventEmitter';\nimport { ProducerCodecOptions } from '../Producer';\nimport {\n\tIceParameters,\n\tIceCandidate,\n\tDtlsParameters\n} from '../Transport';\nimport {\n\tRtpCapabilities,\n\tRtpCodecCapability,\n\tRtpParameters,\n\tRtpEncodingParameters\n} from '../RtpParameters';\nimport {\n\tSctpCapabilities,\n\tSctpParameters,\n\tSctpStreamParameters\n} from '../SctpParameters';\nimport { RTCRtpSender } from 'werift/lib/webrtc/src/media/rtpSender';\n\nexport type HandlerFactory = () => HandlerInterface;\n\nexport type HandlerRunOptions =\n{\n\tdirection: 'send' | 'recv';\n\ticeParameters: IceParameters;\n\ticeCandidates: IceCandidate[];\n\tdtlsParameters: DtlsParameters;\n\tsctpParameters?: SctpParameters;\n\ticeServers?: RTCIceServer[];\n\ticeTransportPolicy?: RTCIceTransportPolicy;\n\tadditionalSettings?: any;\n\tproprietaryConstraints?: any;\n\textendedRtpCapabilities: any;\n};\n\nexport type HandlerSendOptions =\n{\n\ttrack: MediaStreamTrack;\n\tencodings?: RtpEncodingParameters[];\n\tcodecOptions?: ProducerCodecOptions;\n\tcodec?: RtpCodecCapability;\n};\n\nexport type HandlerSendResult =\n{\n\tlocalId: string;\n\trtpParameters: RtpParameters;\n\trtpSender?: RTCRtpSender;\n};\n\nexport type HandlerReceiveOptions =\n{\n\ttrackId: string;\n\tkind: 'audio' | 'video';\n\trtpParameters: RtpParameters;\n};\n\nexport type HandlerReceiveResult =\n{\n\tlocalId: string;\n\ttrack: MediaStreamTrack;\n\trtpReceiver?: RTCRtpReceiver;\n};\n\nexport type HandlerSendDataChannelOptions = SctpStreamParameters;\n\nexport type HandlerSendDataChannelResult =\n{\n\tdataChannel: RTCDataChannel;\n\tsctpStreamParameters: SctpStreamParameters;\n};\n\nexport type HandlerReceiveDataChannelOptions =\n{\n\tsctpStreamParameters: SctpStreamParameters;\n\tlabel?: string;\n\tprotocol?: string;\n}\n\nexport type HandlerReceiveDataChannelResult =\n{\n\tdataChannel: RTCDataChannel;\n}\n\nexport abstract class HandlerInterface extends EnhancedEventEmitter\n{\n\t/**\n\t * @emits @connect - (\n\t *     { dtlsParameters: DtlsParameters },\n\t *     callback: Function,\n\t *     errback: Function\n\t *   )\n\t * @emits @connectionstatechange - (connectionState: ConnectionState)\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tabstract get name(): string;\n\n\tabstract close(): void;\n\n\tabstract getNativeRtpCapabilities(): Promise<RtpCapabilities>;\n\n\tabstract getNativeSctpCapabilities(): Promise<SctpCapabilities>;\n\n\tabstract run(options: HandlerRunOptions): void;\n\n\tabstract updateIceServers(iceServers: RTCIceServer[]): Promise<void>;\n\n\tabstract restartIce(iceParameters: IceParameters): Promise<void>;\n\n\tabstract getTransportStats(): Promise<RTCStatsReport>;\n\n\tabstract send(options: HandlerSendOptions): Promise<HandlerSendResult>;\n\n\tabstract stopSending(localId: string): Promise<void>;\n\n\tabstract replaceTrack(\n\t\tlocalId: string, track: MediaStreamTrack | null\n\t): Promise<void>;\n\n\tabstract setMaxSpatialLayer(\n\t\tlocalId: string, spatialLayer: number\n\t): Promise<void>;\n\n\tabstract setRtpEncodingParameters(\n\t\tlocalId: string, params: any\n\t): Promise<void>;\n\n\tabstract getSenderStats(localId: string): Promise<RTCStatsReport>;\n\n\tabstract sendDataChannel(\n\t\toptions: HandlerSendDataChannelOptions\n\t): Promise<HandlerSendDataChannelResult>;\n\n\tabstract receive(\n\t\toptions: HandlerReceiveOptions\n\t): Promise<HandlerReceiveResult>;\n\n\tabstract stopReceiving(localId: string): Promise<void>;\n\n\tabstract getReceiverStats(localId: string): Promise<RTCStatsReport>;\n\n\tabstract receiveDataChannel(\n\t\toptions: HandlerReceiveDataChannelOptions\n\t): Promise<HandlerReceiveDataChannelResult>;\n}\n"]}