{"version":3,"file":"Safari11.js","sourceRoot":"","sources":["../../src/handlers/Safari11.ts"],"names":[],"mappings":"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","sourcesContent":["import * as sdpTransform from 'sdp-transform';\nimport { Logger } from '../Logger';\nimport * as utils from '../utils';\nimport * as ortc from '../ortc';\nimport * as sdpCommonUtils from './sdp/commonUtils';\nimport * as sdpPlanBUtils from './sdp/planBUtils';\nimport {\n\tHandlerFactory,\n\tHandlerInterface,\n\tHandlerRunOptions,\n\tHandlerSendOptions,\n\tHandlerSendResult,\n\tHandlerReceiveOptions,\n\tHandlerReceiveResult,\n\tHandlerSendDataChannelOptions,\n\tHandlerSendDataChannelResult,\n\tHandlerReceiveDataChannelOptions,\n\tHandlerReceiveDataChannelResult\n} from './HandlerInterface';\nimport { RemoteSdp } from './sdp/RemoteSdp';\nimport { IceParameters, DtlsRole } from '../Transport';\nimport { RtpCapabilities, RtpParameters } from '../RtpParameters';\nimport { SctpCapabilities, SctpStreamParameters } from '../SctpParameters';\n\nconst logger = new Logger('Safari11');\n\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n\nexport class Safari11 extends HandlerInterface\n{\n\t// Handler direction.\n\tprivate _direction?: 'send' | 'recv';\n\t// Remote SDP handler.\n\tprivate _remoteSdp?: RemoteSdp;\n\t// Generic sending RTP parameters for audio and video.\n\tprivate _sendingRtpParametersByKind?: { [key: string]: RtpParameters };\n\t// Generic sending RTP parameters for audio and video suitable for the SDP\n\t// remote answer.\n\tprivate _sendingRemoteRtpParametersByKind?: { [key: string]: RtpParameters };\n\t// RTCPeerConnection instance.\n\tprivate _pc: any;\n\t// Local stream for sending.\n\tprivate readonly _sendStream = new MediaStream();\n\t// Map of RTCRtpSender indexed by localId.\n\tprivate readonly _mapSendLocalIdRtpSender: Map<string, RTCRtpSender> =\n\t\tnew Map();\n\t// Next sending localId.\n\tprivate _nextSendLocalId = 0;\n\t// Map of MID, RTP parameters and RTCRtpReceiver indexed by local id.\n\t// Value is an Object with mid, rtpParameters and rtpReceiver.\n\tprivate readonly _mapRecvLocalIdInfo:\n\t\tMap<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\tmid: string;\n\t\t\t\trtpParameters: RtpParameters;\n\t\t\t\trtpReceiver: RTCRtpReceiver;\n\t\t\t}\n\t\t> = new Map();\n\t// Whether a DataChannel m=application section has been created.\n\tprivate _hasDataChannelMediaSection = false;\n\t// Sending DataChannel id value counter. Incremented for each new DataChannel.\n\tprivate _nextSendSctpStreamId = 0;\n\t// Got transport local and remote parameters.\n\tprivate _transportReady = false;\n\n\t/**\n\t * Creates a factory function.\n\t */\n\tstatic createFactory(): HandlerFactory\n\t{\n\t\treturn (): Safari11 => new Safari11();\n\t}\n\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tget name(): string\n\t{\n\t\treturn 'Safari11';\n\t}\n\n\tclose(): void\n\t{\n\t\tlogger.debug('close()');\n\n\t\t// Close RTCPeerConnection.\n\t\tif (this._pc)\n\t\t{\n\t\t\ttry { this._pc.close(); }\n\t\t\tcatch (error) {}\n\t\t}\n\t}\n\n\tasync getNativeRtpCapabilities(): Promise<RtpCapabilities>\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\tconst pc = new (RTCPeerConnection as any)(\n\t\t\t{\n\t\t\t\ticeServers         : [],\n\t\t\t\ticeTransportPolicy : 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\tsdpSemantics       : 'plan-b'\n\t\t\t});\n\n\t\ttry\n\t\t{\n\t\t\tconst offer = await pc.createOffer(\n\t\t\t\t{\n\t\t\t\t\tofferToReceiveAudio : true,\n\t\t\t\t\tofferToReceiveVideo : true\n\t\t\t\t});\n\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error) {}\n\n\t\t\tconst sdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst nativeRtpCapabilities =\n\t\t\t\tsdpCommonUtils.extractRtpCapabilities({ sdpObject });\n\n\t\t\treturn nativeRtpCapabilities;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\ttry { pc.close(); }\n\t\t\tcatch (error2) {}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync getNativeSctpCapabilities(): Promise<SctpCapabilities>\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn {\n\t\t\tnumStreams : SCTP_NUM_STREAMS\n\t\t};\n\t}\n\n\trun(\n\t\t{\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tadditionalSettings,\n\t\t\tproprietaryConstraints,\n\t\t\textendedRtpCapabilities\n\t\t}: HandlerRunOptions\n\t): void\n\t{\n\t\tlogger.debug('run()');\n\n\t\tthis._direction = direction;\n\n\t\tthis._remoteSdp = new RemoteSdp(\n\t\t\t{\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters,\n\t\t\t\tplanB : true\n\t\t\t});\n\n\t\tthis._sendingRtpParametersByKind =\n\t\t{\n\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t};\n\n\t\tthis._sendingRemoteRtpParametersByKind =\n\t\t{\n\t\t\taudio : ortc.getSendingRemoteRtpParameters('audio', extendedRtpCapabilities),\n\t\t\tvideo : ortc.getSendingRemoteRtpParameters('video', extendedRtpCapabilities)\n\t\t};\n\n\t\tthis._pc = new (RTCPeerConnection as any)(\n\t\t\t{\n\t\t\t\ticeServers         : iceServers || [],\n\t\t\t\ticeTransportPolicy : iceTransportPolicy || 'all',\n\t\t\t\tbundlePolicy       : 'max-bundle',\n\t\t\t\trtcpMuxPolicy      : 'require',\n\t\t\t\t...additionalSettings\n\t\t\t},\n\t\t\tproprietaryConstraints);\n\n\t\t// Handle RTCPeerConnection connection status.\n\t\tthis._pc.addEventListener('iceconnectionstatechange', () =>\n\t\t{\n\t\t\tswitch (this._pc.iceConnectionState)\n\t\t\t{\n\t\t\t\tcase 'checking':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connecting');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'connected':\n\t\t\t\tcase 'completed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'connected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'failed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'failed');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'disconnected':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'disconnected');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'closed':\n\t\t\t\t\tthis.emit('@connectionstatechange', 'closed');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tasync updateIceServers(iceServers: RTCIceServer[]): Promise<void>\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\tconst configuration = this._pc.getConfiguration();\n\n\t\tconfiguration.iceServers = iceServers;\n\n\t\tthis._pc.setConfiguration(configuration);\n\t}\n\n\tasync restartIce(iceParameters: IceParameters): Promise<void>\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\t// Provide the remote SDP handler with new remote ICE parameters.\n\t\tthis._remoteSdp!.updateIceParameters(iceParameters);\n\n\t\tif (!this._transportReady)\n\t\t\treturn;\n\n\t\tif (this._direction === 'send')\n\t\t{\n\t\t\tconst offer = await this._pc.createOffer({ iceRestart: true });\n\n\t\t\tlogger.debug(\n\t\t\t\t'restartIce() | calling pc.setLocalDescription() [offer:%o]',\n\t\t\t\toffer);\n\n\t\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t\tconst answer = { type: 'answer', sdp: this._remoteSdp!.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'restartIce() | calling pc.setRemoteDescription() [answer:%o]',\n\t\t\t\tanswer);\n\n\t\t\tawait this._pc.setRemoteDescription(answer);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst offer = { type: 'offer', sdp: this._remoteSdp!.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'restartIce() | calling pc.setRemoteDescription() [offer:%o]',\n\t\t\t\toffer);\n\n\t\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\t\tconst answer = await this._pc.createAnswer();\n\n\t\t\tlogger.debug(\n\t\t\t\t'restartIce() | calling pc.setLocalDescription() [answer:%o]',\n\t\t\t\tanswer);\n\n\t\t\tawait this._pc.setLocalDescription(answer);\n\t\t}\n\t}\n\n\tasync getTransportStats(): Promise<RTCStatsReport>\n\t{\n\t\treturn this._pc.getStats();\n\t}\n\n\tasync send(\n\t\t{ track, encodings, codecOptions, codec }: HandlerSendOptions\n\t): Promise<HandlerSendResult>\n\t{\n\t\tthis._assertSendDirection();\n\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tif (codec)\n\t\t{\n\t\t\tlogger.warn(\n\t\t\t\t'send() | codec selection is not available in %s handler',\n\t\t\t\tthis.name);\n\t\t}\n\n\t\tthis._sendStream.addTrack(track);\n\t\tthis._pc.addTrack(track, this._sendStream);\n\n\t\tlet offer = await this._pc.createOffer();\n\t\tlet localSdpObject = sdpTransform.parse(offer.sdp);\n\t\tlet offerMediaObject;\n\t\tconst sendingRtpParameters =\n\t\t\tutils.clone(this._sendingRtpParametersByKind![track.kind], {});\n\n\t\tsendingRtpParameters.codecs =\n\t\t\tortc.reduceCodecs(sendingRtpParameters.codecs);\n\n\t\tconst sendingRemoteRtpParameters =\n\t\t\tutils.clone(this._sendingRemoteRtpParametersByKind![track.kind], {});\n\n\t\tsendingRemoteRtpParameters.codecs =\n\t\t\tortc.reduceCodecs(sendingRemoteRtpParameters.codecs);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\tif (track.kind === 'video' && encodings && encodings.length > 1)\n\t\t{\n\t\t\tlogger.debug('send() | enabling simulcast');\n\n\t\t\tlocalSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tofferMediaObject = localSdpObject.media.find(\n\t\t\t\t(m: any) => m.type === 'video');\n\n\t\t\tsdpPlanBUtils.addLegacySimulcast(\n\t\t\t\t{\n\t\t\t\t\tofferMediaObject,\n\t\t\t\t\ttrack,\n\t\t\t\t\tnumStreams : encodings.length\n\t\t\t\t});\n\n\t\t\toffer = { type: 'offer', sdp: sdpTransform.write(localSdpObject) };\n\t\t}\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setLocalDescription() [offer:%o]',\n\t\t\toffer);\n\n\t\tawait this._pc.setLocalDescription(offer);\n\n\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\t\tofferMediaObject = localSdpObject.media\n\t\t\t.find((m: any) => m.type === track.kind);\n\n\t\t// Set RTCP CNAME.\n\t\tsendingRtpParameters.rtcp.cname =\n\t\t\tsdpCommonUtils.getCname({ offerMediaObject });\n\n\t\t// Set RTP encodings.\n\t\tsendingRtpParameters.encodings =\n\t\t\tsdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });\n\n\t\t// Complete encodings with given values.\n\t\tif (encodings)\n\t\t{\n\t\t\tfor (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx)\n\t\t\t{\n\t\t\t\tif (encodings[idx])\n\t\t\t\t\tObject.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n\t\t\t}\n\t\t}\n\n\t\t// If VP8 and there is effective simulcast, add scalabilityMode to each\n\t\t// encoding.\n\t\tif (\n\t\t\tsendingRtpParameters.encodings.length > 1 &&\n\t\t\tsendingRtpParameters.codecs[0].mimeType.toLowerCase() === 'video/vp8'\n\t\t)\n\t\t{\n\t\t\tfor (const encoding of sendingRtpParameters.encodings)\n\t\t\t{\n\t\t\t\tencoding.scalabilityMode = 'S1T3';\n\t\t\t}\n\t\t}\n\n\t\tthis._remoteSdp!.send(\n\t\t\t{\n\t\t\t\tofferMediaObject,\n\t\t\t\tofferRtpParameters  : sendingRtpParameters,\n\t\t\t\tanswerRtpParameters : sendingRemoteRtpParameters,\n\t\t\t\tcodecOptions\n\t\t\t});\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp!.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'send() | calling pc.setRemoteDescription() [answer:%o]',\n\t\t\tanswer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\tconst localId = String(this._nextSendLocalId);\n\n\t\tthis._nextSendLocalId++;\n\n\t\tconst rtpSender = this._pc.getSenders()\n\t\t\t.find((s: RTCRtpSender) => s.track === track);\n\n\t\t// Insert into the map.\n\t\tthis._mapSendLocalIdRtpSender.set(localId, rtpSender);\n\n\t\treturn {\n\t\t\tlocalId       : localId,\n\t\t\trtpParameters : sendingRtpParameters,\n\t\t\trtpSender\n\t\t};\n\t}\n\n\tasync stopSending(localId: string): Promise<void>\n\t{\n\t\tthis._assertSendDirection();\n\n\t\tconst rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\tif (rtpSender.track)\n\t\t\tthis._sendStream.removeTrack(rtpSender.track);\n\n\t\tthis._mapSendLocalIdRtpSender.delete(localId);\n\n\t\tconst offer = await this._pc.createOffer();\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setLocalDescription() [offer:%o]',\n\t\t\toffer);\n\n\t\ttry\n\t\t{\n\t\t\tawait this._pc.setLocalDescription(offer);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\t// NOTE: If there are no sending tracks, setLocalDescription() will fail with\n\t\t\t// \"Failed to create channels\". If so, ignore it.\n\t\t\tif (this._sendStream.getTracks().length === 0)\n\t\t\t{\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'stopSending() | ignoring expected error due no sending tracks: %s',\n\t\t\t\t\terror.toString());\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (this._pc.signalingState === 'stable')\n\t\t\treturn;\n\n\t\tconst answer = { type: 'answer', sdp: this._remoteSdp!.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopSending() | calling pc.setRemoteDescription() [answer:%o]',\n\t\t\tanswer);\n\n\t\tawait this._pc.setRemoteDescription(answer);\n\t}\n\n\tasync replaceTrack(\n\t\tlocalId: string, track: MediaStreamTrack | null\n\t): Promise<void>\n\t{\n\t\tthis._assertSendDirection();\n\n\t\tif (track)\n\t\t{\n\t\t\tlogger.debug(\n\t\t\t\t'replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlogger.debug('replaceTrack() [localId:%s, no track]', localId);\n\t\t}\n\n\t\tconst rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\tconst oldTrack = rtpSender.track;\n\n\t\tawait rtpSender.replaceTrack(track);\n\n\t\t// Remove the old track from the local stream.\n\t\tif (oldTrack)\n\t\t\tthis._sendStream.removeTrack(oldTrack);\n\n\t\t// Add the new track to the local stream.\n\t\tif (track)\n\t\t\tthis._sendStream.addTrack(track);\n\t}\n\n\tasync setMaxSpatialLayer(localId: string, spatialLayer: number): Promise<void>\n\t{\n\t\tthis._assertSendDirection();\n\n\t\tlogger.debug(\n\t\t\t'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',\n\t\t\tlocalId, spatialLayer);\n\n\t\tconst rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\tconst parameters = rtpSender.getParameters();\n\n\t\tparameters.encodings.forEach((encoding: RTCRtpEncodingParameters, idx: number) =>\n\t\t{\n\t\t\tif (idx <= spatialLayer)\n\t\t\t\tencoding.active = true;\n\t\t\telse\n\t\t\t\tencoding.active = false;\n\t\t});\n\n\t\tawait rtpSender.setParameters(parameters);\n\t}\n\n\tasync setRtpEncodingParameters(localId: string, params: any): Promise<void>\n\t{\n\t\tthis._assertSendDirection();\n\n\t\tlogger.debug(\n\t\t\t'setRtpEncodingParameters() [localId:%s, params:%o]',\n\t\t\tlocalId, params);\n\n\t\tconst rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\tconst parameters = rtpSender.getParameters();\n\n\t\tparameters.encodings.forEach((encoding: RTCRtpEncodingParameters, idx: number) =>\n\t\t{\n\t\t\tparameters.encodings[idx] = { ...encoding, ...params };\n\t\t});\n\n\t\tawait rtpSender.setParameters(parameters);\n\t}\n\n\tasync getSenderStats(localId: string): Promise<RTCStatsReport>\n\t{\n\t\tthis._assertSendDirection();\n\n\t\tconst rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n\n\t\tif (!rtpSender)\n\t\t\tthrow new Error('associated RTCRtpSender not found');\n\n\t\treturn rtpSender.getStats();\n\t}\n\n\tasync sendDataChannel(\n\t\t{\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tlabel,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t}: HandlerSendDataChannelOptions\n\t): Promise<HandlerSendDataChannelResult>\n\t{\n\t\tthis._assertSendDirection();\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated : true,\n\t\t\tid         : this._nextSendSctpStreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t};\n\n\t\tlogger.debug('sendDataChannel() [options:%o]', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// Increase next id.\n\t\tthis._nextSendSctpStreamId =\n\t\t\t++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n\n\t\t// If this is the first DataChannel we need to create the SDP answer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tconst offer = await this._pc.createOffer();\n\t\t\tconst localSdpObject = sdpTransform.parse(offer.sdp);\n\t\t\tconst offerMediaObject = localSdpObject.media\n\t\t\t\t.find((m: any) => m.type === 'application');\n\n\t\t\tif (!this._transportReady)\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'server', localSdpObject });\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setLocalDescription() [offer:%o]',\n\t\t\t\toffer);\n\n\t\t\tawait this._pc.setLocalDescription(offer);\n\n\t\t\tthis._remoteSdp!.sendSctpAssociation({ offerMediaObject });\n\n\t\t\tconst answer = { type: 'answer', sdp: this._remoteSdp!.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]',\n\t\t\t\tanswer);\n\n\t\t\tawait this._pc.setRemoteDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\tconst sctpStreamParameters: SctpStreamParameters =\n\t\t{\n\t\t\tstreamId          : options.id,\n\t\t\tordered           : options.ordered,\n\t\t\tmaxPacketLifeTime : options.maxPacketLifeTime,\n\t\t\tmaxRetransmits    : options.maxRetransmits\n\t\t};\n\n\t\treturn { dataChannel, sctpStreamParameters };\n\t}\n\n\tasync receive(\n\t\t{ trackId, kind, rtpParameters }: HandlerReceiveOptions\n\t): Promise<HandlerReceiveResult>\n\t{\n\t\tthis._assertRecvDirection();\n\n\t\tlogger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n\n\t\tconst localId = trackId;\n\t\tconst mid = kind;\n\n\t\tthis._remoteSdp!.receive(\n\t\t\t{\n\t\t\t\tmid,\n\t\t\t\tkind,\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tstreamId           : rtpParameters.rtcp!.cname!,\n\t\t\t\ttrackId\n\t\t\t});\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp!.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setRemoteDescription() [offer:%o]',\n\t\t\toffer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tlet answer = await this._pc.createAnswer();\n\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\t\tconst answerMediaObject = localSdpObject.media\n\t\t\t.find((m: any) => String(m.mid) === mid);\n\n\t\t// May need to modify codec parameters in the answer based on codec\n\t\t// parameters in the offer.\n\t\tsdpCommonUtils.applyCodecParameters(\n\t\t\t{\n\t\t\t\tofferRtpParameters : rtpParameters,\n\t\t\t\tanswerMediaObject\n\t\t\t});\n\n\t\tanswer = { type: 'answer', sdp: sdpTransform.write(localSdpObject) };\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\n\t\tlogger.debug(\n\t\t\t'receive() | calling pc.setLocalDescription() [answer:%o]',\n\t\t\tanswer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\n\t\tconst rtpReceiver = this._pc.getReceivers()\n\t\t\t.find((r: RTCRtpReceiver) => r.track && r.track.id === localId);\n\n\t\tif (!rtpReceiver)\n\t\t\tthrow new Error('new RTCRtpReceiver not');\n\n\t\t// Insert into the map.\n\t\tthis._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters, rtpReceiver });\n\n\t\treturn {\n\t\t\tlocalId,\n\t\t\ttrack : rtpReceiver.track,\n\t\t\trtpReceiver\n\t\t};\n\t}\n\n\tasync stopReceiving(localId: string): Promise<void>\n\t{\n\t\tthis._assertRecvDirection();\n\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tconst { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};\n\n\t\t// Remove from the map.\n\t\tthis._mapRecvLocalIdInfo.delete(localId);\n\n\t\tthis._remoteSdp!.planBStopReceiving(\n\t\t\t{ mid: mid!, offerRtpParameters: rtpParameters! });\n\n\t\tconst offer = { type: 'offer', sdp: this._remoteSdp!.getSdp() };\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setRemoteDescription() [offer:%o]',\n\t\t\toffer);\n\n\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\tconst answer = await this._pc.createAnswer();\n\n\t\tlogger.debug(\n\t\t\t'stopReceiving() | calling pc.setLocalDescription() [answer:%o]',\n\t\t\tanswer);\n\n\t\tawait this._pc.setLocalDescription(answer);\n\t}\n\n\tasync getReceiverStats(localId: string): Promise<RTCStatsReport>\n\t{\n\t\tthis._assertRecvDirection();\n\n\t\tconst { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId) || {};\n\n\t\tif (!rtpReceiver)\n\t\t\tthrow new Error('associated RTCRtpReceiver not found');\n\n\t\treturn rtpReceiver.getStats();\n\t}\n\n\tasync receiveDataChannel(\n\t\t{ sctpStreamParameters, label, protocol }: HandlerReceiveDataChannelOptions\n\t): Promise<HandlerReceiveDataChannelResult>\n\t{\n\t\tthis._assertRecvDirection();\n\n\t\tconst {\n\t\t\tstreamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits\n\t\t} = sctpStreamParameters;\n\n\t\tconst options =\n\t\t{\n\t\t\tnegotiated : true,\n\t\t\tid         : streamId,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tprotocol\n\t\t};\n\n\t\tlogger.debug('receiveDataChannel() [options:%o]', options);\n\n\t\tconst dataChannel = this._pc.createDataChannel(label, options);\n\n\t\t// If this is the first DataChannel we need to create the SDP offer with\n\t\t// m=application section.\n\t\tif (!this._hasDataChannelMediaSection)\n\t\t{\n\t\t\tthis._remoteSdp!.receiveSctpAssociation({ oldDataChannelSpec: true });\n\n\t\t\tconst offer = { type: 'offer', sdp: this._remoteSdp!.getSdp() };\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]',\n\t\t\t\toffer);\n\n\t\t\tawait this._pc.setRemoteDescription(offer);\n\n\t\t\tconst answer = await this._pc.createAnswer();\n\n\t\t\tif (!this._transportReady)\n\t\t\t{\n\t\t\t\tconst localSdpObject = sdpTransform.parse(answer.sdp);\n\n\t\t\t\tawait this._setupTransport({ localDtlsRole: 'client', localSdpObject });\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t'receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]',\n\t\t\t\tanswer);\n\n\t\t\tawait this._pc.setLocalDescription(answer);\n\n\t\t\tthis._hasDataChannelMediaSection = true;\n\t\t}\n\n\t\treturn { dataChannel };\n\t}\n\n\tprivate async _setupTransport(\n\t\t{\n\t\t\tlocalDtlsRole,\n\t\t\tlocalSdpObject\n\t\t}:\n\t\t{\n\t\t\tlocalDtlsRole: DtlsRole;\n\t\t\tlocalSdpObject?: any;\n\t\t}\n\t): Promise<void>\n\t{\n\t\tif (!localSdpObject)\n\t\t\tlocalSdpObject = sdpTransform.parse(this._pc.localDescription.sdp);\n\n\t\t// Get our local DTLS parameters.\n\t\tconst dtlsParameters =\n\t\t\tsdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n\n\t\t// Set our DTLS role.\n\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Update the remote DTLS role in the SDP.\n\t\tthis._remoteSdp!.updateDtlsRole(\n\t\t\tlocalDtlsRole === 'client' ? 'server' : 'client');\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait this.safeEmitAsPromise('@connect', { dtlsParameters });\n\n\t\tthis._transportReady = true;\n\t}\n\n\tprivate _assertSendDirection(): void\n\t{\n\t\tif (this._direction !== 'send')\n\t\t{\n\t\t\tthrow new Error(\n\t\t\t\t'method can just be called for handlers with \"send\" direction');\n\t\t}\n\t}\n\n\tprivate _assertRecvDirection(): void\n\t{\n\t\tif (this._direction !== 'recv')\n\t\t{\n\t\t\tthrow new Error(\n\t\t\t\t'method can just be called for handlers with \"recv\" direction');\n\t\t}\n\t}\n}\n"]}