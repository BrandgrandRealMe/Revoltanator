{"version":3,"file":"FakeHandler.js","sourceRoot":"","sources":["../../src/handlers/FakeHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { EnhancedEventEmitter } from '../EnhancedEventEmitter';\nimport { Logger } from '../Logger';\nimport { FakeMediaStreamTrack } from 'fake-mediastreamtrack';\nimport * as utils from '../utils';\nimport * as ortc from '../ortc';\nimport {\n\tHandlerInterface,\n\tHandlerRunOptions,\n\tHandlerSendOptions,\n\tHandlerSendResult,\n\tHandlerReceiveOptions,\n\tHandlerReceiveResult,\n\tHandlerSendDataChannelOptions,\n\tHandlerSendDataChannelResult,\n\tHandlerReceiveDataChannelOptions,\n\tHandlerReceiveDataChannelResult\n} from './HandlerInterface';\nimport {\n\tIceParameters,\n\tDtlsParameters,\n\tDtlsRole\n} from '../Transport';\nimport { RtpCapabilities, RtpParameters } from '../RtpParameters';\nimport { SctpCapabilities } from '../SctpParameters';\n\nconst logger = new Logger('FakeHandler');\n\nclass FakeDataChannel extends EnhancedEventEmitter\n{\n\tid?: number;\n\tordered?: boolean;\n\tmaxPacketLifeTime?: number;\n\tmaxRetransmits?: number;\n\tpriority?: RTCPriorityType;\n\tlabel?: string;\n\tprotocol?: string;\n\n\tconstructor(\n\t\t{\n\t\t\tid,\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tpriority,\n\t\t\tlabel,\n\t\t\tprotocol\n\t\t}: {\n\t\t\tid: number;\n\t\t\tordered?: boolean;\n\t\t\tmaxPacketLifeTime?: number;\n\t\t\tmaxRetransmits?: number;\n\t\t\tpriority?: RTCPriorityType;\n\t\t\tlabel?: string;\n\t\t\tprotocol?: string;\n\t\t})\n\t{\n\t\tsuper();\n\n\t\tthis.id = id;\n\t\tthis.ordered= ordered;\n\t\tthis.maxPacketLifeTime = maxPacketLifeTime;\n\t\tthis.maxRetransmits = maxRetransmits;\n\t\tthis.priority = priority;\n\t\tthis.label = label;\n\t\tthis.protocol = protocol;\n\t}\n\n\tclose(): void\n\t{\n\t\tthis.safeEmit('close');\n\t}\n\n\tsend(data: any): void\n\t{\n\t\tthis.safeEmit('message', data);\n\t}\n\n\taddEventListener(event: string, fn: () => void): void\n\t{\n\t\tthis.on(event, fn);\n\t}\n}\n\nexport type FakeParameters = {\n\tgenerateNativeRtpCapabilities: () => RtpCapabilities;\n\tgenerateNativeSctpCapabilities: () => SctpCapabilities;\n\tgenerateLocalDtlsParameters: () => DtlsParameters;\n}\n\nexport class FakeHandler extends HandlerInterface\n{\n\t// Fake parameters source of RTP and SCTP parameters and capabilities.\n\tprivate fakeParameters: any;\n\t// Generic sending RTP parameters for audio and video.\n\tprivate _rtpParametersByKind?: { [key: string]: RtpParameters };\n\t// Local RTCP CNAME.\n\tprivate _cname = `CNAME-${utils.generateRandomNumber()}`;\n\t// Got transport local and remote parameters.\n\tprivate _transportReady = false;\n\t// Next localId.\n\tprivate _nextLocalId = 1;\n\t// Sending and receiving tracks indexed by localId.\n\tprivate _tracks: Map<number, MediaStreamTrack | null> = new Map();\n\t// DataChannel id value counter. It must be incremented for each new DataChannel.\n\tprivate _nextSctpStreamId = 0;\n\n\t/**\n\t * Creates a factory function.\n\t */\n\tstatic createFactory(fakeParameters: FakeParameters)\n\t{\n\t\treturn (): FakeHandler => new FakeHandler(fakeParameters);\n\t}\n\n\tconstructor(fakeParameters: any)\n\t{\n\t\tsuper();\n\n\t\tthis.fakeParameters = fakeParameters;\n\t}\n\n\tget name(): string\n\t{\n\t\treturn 'FakeHandler';\n\t}\n\n\tclose(): void\n\t{\n\t\tlogger.debug('close()');\n\t}\n\n\t// NOTE: Custom method for simulation purposes.\n\tsetConnectionState(connectionState: string): void\n\t{\n\t\tthis.emit('@connectionstatechange', connectionState);\n\t}\n\n\tasync getNativeRtpCapabilities(): Promise<RtpCapabilities>\n\t{\n\t\tlogger.debug('getNativeRtpCapabilities()');\n\n\t\treturn this.fakeParameters.generateNativeRtpCapabilities();\n\t}\n\n\tasync getNativeSctpCapabilities(): Promise<SctpCapabilities>\n\t{\n\t\tlogger.debug('getNativeSctpCapabilities()');\n\n\t\treturn this.fakeParameters.generateNativeSctpCapabilities();\n\t}\n\n\trun(\n\t\t{\n\t\t\t/* eslint-disable @typescript-eslint/no-unused-vars */\n\t\t\tdirection,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tproprietaryConstraints,\n\t\t\textendedRtpCapabilities\n\t\t\t/* eslint-enable @typescript-eslint/no-unused-vars */\n\t\t}: HandlerRunOptions\n\t): void\n\t{\n\t\tlogger.debug('run()');\n\n\t\t// Generic sending RTP parameters for audio and video.\n\t\t// @type {Object}\n\t\tthis._rtpParametersByKind =\n\t\t{\n\t\t\taudio : ortc.getSendingRtpParameters('audio', extendedRtpCapabilities),\n\t\t\tvideo : ortc.getSendingRtpParameters('video', extendedRtpCapabilities)\n\t\t};\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync updateIceServers(iceServers: RTCIceServer[]): Promise<void>\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\treturn;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync restartIce(iceParameters: IceParameters): Promise<void>\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\treturn;\n\t}\n\n\tasync getTransportStats(): Promise<RTCStatsReport>\n\t{\n\t\treturn new Map(); // NOTE: Whatever.\n\t}\n\n\tasync send(\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t{ track, encodings, codecOptions, codec }: HandlerSendOptions\n\t): Promise<HandlerSendResult>\n\t{\n\t\tlogger.debug('send() [kind:%s, track.id:%s]', track.kind, track.id);\n\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server' });\n\n\t\tconst rtpParameters =\n\t\t\tutils.clone(this._rtpParametersByKind![track.kind], {});\n\t\tconst useRtx = rtpParameters.codecs\n\t\t\t.some((_codec: any) => /.+\\/rtx$/i.test(_codec.mimeType));\n\n\t\trtpParameters.mid = `mid-${utils.generateRandomNumber()}`;\n\n\t\tif (!encodings)\n\t\t\tencodings = [ {} ];\n\n\t\tfor (const encoding of encodings)\n\t\t{\n\t\t\tencoding.ssrc = utils.generateRandomNumber();\n\n\t\t\tif (useRtx)\n\t\t\t\tencoding.rtx = { ssrc: utils.generateRandomNumber() };\n\t\t}\n\n\t\trtpParameters.encodings = encodings;\n\n\t\t// Fill RTCRtpParameters.rtcp.\n\t\trtpParameters.rtcp =\n\t\t{\n\t\t\tcname       : this._cname,\n\t\t\treducedSize : true,\n\t\t\tmux         : true\n\t\t};\n\n\t\tconst localId = this._nextLocalId++;\n\n\t\tthis._tracks.set(localId, track);\n\n\t\treturn { localId: String(localId), rtpParameters };\n\t}\n\n\tasync stopSending(localId: string): Promise<void>\n\t{\n\t\tlogger.debug('stopSending() [localId:%s]', localId);\n\n\t\tif (!this._tracks.has(Number(localId)))\n\t\t\tthrow new Error('local track not found');\n\n\t\tthis._tracks.delete(Number(localId));\n\t}\n\n\tasync replaceTrack(\n\t\tlocalId: string, track: MediaStreamTrack | null\n\t): Promise<void>\n\t{\n\t\tif (track)\n\t\t{\n\t\t\tlogger.debug(\n\t\t\t\t'replaceTrack() [localId:%s, track.id:%s]', localId, track.id);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlogger.debug('replaceTrack() [localId:%s, no track]', localId);\n\t\t}\n\n\t\tthis._tracks.delete(Number(localId));\n\t\tthis._tracks.set(Number(localId), track);\n\t}\n\n\tasync setMaxSpatialLayer(localId: string, spatialLayer: number): Promise<void>\n\t{\n\t\tlogger.debug(\n\t\t\t'setMaxSpatialLayer() [localId:%s, spatialLayer:%s]',\n\t\t\tlocalId, spatialLayer);\n\t}\n\n\tasync setRtpEncodingParameters(localId: string, params: any): Promise<void>\n\t{\n\t\tlogger.debug(\n\t\t\t'setRtpEncodingParameters() [localId:%s, params:%o]',\n\t\t\tlocalId, params);\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync getSenderStats(localId: string): Promise<RTCStatsReport>\n\t{\n\t\treturn new Map(); // NOTE: Whatever.\n\t}\n\n\tasync sendDataChannel(\n\t\t{\n\t\t\tordered,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tlabel,\n\t\t\tprotocol,\n\t\t\tpriority\n\t\t}: HandlerSendDataChannelOptions\n\t): Promise<HandlerSendDataChannelResult>\n\t{\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'server' });\n\n\t\tlogger.debug('sendDataChannel()');\n\n\t\tconst dataChannel = new FakeDataChannel(\n\t\t\t{\n\t\t\t\tid : this._nextSctpStreamId++,\n\t\t\t\tordered,\n\t\t\t\tmaxPacketLifeTime,\n\t\t\t\tmaxRetransmits,\n\t\t\t\tpriority,\n\t\t\t\tlabel,\n\t\t\t\tprotocol\n\t\t\t});\n\n\t\tconst sctpStreamParameters =\n\t\t{\n\t\t\tstreamId          : this._nextSctpStreamId,\n\t\t\tordered           : ordered,\n\t\t\tmaxPacketLifeTime : maxPacketLifeTime,\n\t\t\tmaxRetransmits    : maxRetransmits\n\t\t};\n\n\t\t// @ts-ignore.\n\t\treturn { dataChannel, sctpStreamParameters };\n\t}\n\n\tasync receive(\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t{ trackId, kind, rtpParameters }: HandlerReceiveOptions\n\t): Promise<HandlerReceiveResult>\n\t{\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client' });\n\n\t\tlogger.debug('receive() [trackId:%s, kind:%s]', trackId, kind);\n\n\t\tconst localId = this._nextLocalId++;\n\t\tconst track = new FakeMediaStreamTrack({ kind });\n\n\t\tthis._tracks.set(localId, track);\n\n\t\treturn { localId: String(localId), track };\n\t}\n\n\tasync stopReceiving(localId: string): Promise<void>\n\t{\n\t\tlogger.debug('stopReceiving() [localId:%s]', localId);\n\n\t\tthis._tracks.delete(Number(localId));\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync getReceiverStats(localId: string): Promise<RTCStatsReport>\n\t{\n\t\treturn new Map(); //\n\t}\n\n\tasync receiveDataChannel(\n\t\t{ sctpStreamParameters, label, protocol }: HandlerReceiveDataChannelOptions\n\t): Promise<HandlerReceiveDataChannelResult>\n\t{\n\t\tif (!this._transportReady)\n\t\t\tawait this._setupTransport({ localDtlsRole: 'client' });\n\n\t\tlogger.debug('receiveDataChannel()');\n\n\t\tconst dataChannel = new FakeDataChannel(\n\t\t\t{\n\t\t\t\tid                : sctpStreamParameters.streamId!,\n\t\t\t\tordered           : sctpStreamParameters.ordered,\n\t\t\t\tmaxPacketLifeTime : sctpStreamParameters.maxPacketLifeTime,\n\t\t\t\tmaxRetransmits    : sctpStreamParameters.maxRetransmits,\n\t\t\t\tlabel,\n\t\t\t\tprotocol\n\t\t\t});\n\n\t\t// @ts-ignore.\n\t\treturn { dataChannel };\n\t}\n\n\tprivate async _setupTransport(\n\t\t{\n\t\t\tlocalDtlsRole,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\tlocalSdpObject\n\t\t}:\n\t\t{\n\t\t\tlocalDtlsRole: DtlsRole;\n\t\t\tlocalSdpObject?: any;\n\t\t}\n\t): Promise<void>\n\t{\n\t\tconst dtlsParameters =\n\t\t\tutils.clone(this.fakeParameters.generateLocalDtlsParameters(), {});\n\n\t\t// Set our DTLS role.\n\t\tif (localDtlsRole)\n\t\t\tdtlsParameters.role = localDtlsRole;\n\n\t\t// Assume we are connecting now.\n\t\tthis.emit('@connectionstatechange', 'connecting');\n\n\t\t// Need to tell the remote transport about our parameters.\n\t\tawait new Promise((resolve, reject) => (\n\t\t\tthis.emit('@connect', { dtlsParameters }, resolve, reject)\n\t\t));\n\n\t\tthis._transportReady = true;\n\t}\n}\n"]}