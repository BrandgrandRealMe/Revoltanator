{"version":3,"file":"werift.js","sourceRoot":"","sources":["../../src/handlers/werift.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable */\n\nimport {\n  RTCPeerConnection,\n  RTCSessionDescription,\n  RTCRtpTransceiver,\n  MediaStreamTrack,\n  RTCRtpCodecParameters,\n  RTCRtpHeaderExtensionParameters,\n} from \"werift\";\nimport * as utils from \"../utils\";\nimport * as sdpTransform from \"sdp-transform\";\nimport * as sdpCommonUtils from \"./sdp/commonUtils\";\nimport * as sdpUnifiedPlanUtils from \"./sdp/unifiedPlanUtils\";\nimport * as ortc from \"../ortc\";\nimport { RemoteSdp } from \"./sdp/RemoteSdp\";\nimport { Logger } from \"../Logger\";\nimport {\n  HandlerInterface,\n  HandlerReceiveDataChannelOptions,\n  HandlerReceiveDataChannelResult,\n  HandlerReceiveOptions,\n  HandlerReceiveResult,\n  HandlerRunOptions,\n  HandlerSendDataChannelOptions,\n  HandlerSendDataChannelResult,\n  HandlerSendOptions,\n  HandlerSendResult,\n} from \"./HandlerInterface\";\nimport { SctpCapabilities, SctpStreamParameters } from \"../SctpParameters\";\nimport {\n  RtpCapabilities,\n  RtpCodecCapability,\n  RtpEncodingParameters,\n  RtpHeaderExtension,\n  RtpParameters,\n} from \"../RtpParameters\";\nimport { DtlsRole, IceParameters } from \"../Transport\";\n\nconst logger = new Logger(\"werift\");\n\nconst SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n\nexport class Werift extends HandlerInterface {\n  // Handler direction.\n  private _direction?: \"send\" | \"recv\";\n  // Remote SDP handler.\n  private _remoteSdp?: RemoteSdp;\n  // Generic sending RTP parameters for audio and video.\n  private _sendingRtpParametersByKind?: { [key: string]: RtpParameters };\n  // Generic sending RTP parameters for audio and video suitable for the SDP\n  // remote answer.\n  private _sendingRemoteRtpParametersByKind?: { [key: string]: RtpParameters };\n  _pc!: RTCPeerConnection;\n  // Map of RTCTransceivers indexed by MID.\n  private readonly _mapMidTransceiver: Map<string, RTCRtpTransceiver> =\n    new Map();\n  private _hasDataChannelMediaSection = false;\n  private _nextSendSctpStreamId = 0;\n  private _transportReady = false;\n\n  static createFactory(nativeRtpCapabilities: {\n    codecs: Partial<{\n      audio: RTCRtpCodecParameters[];\n      video: RTCRtpCodecParameters[];\n    }>;\n    headerExtensions: Partial<{\n      audio: RTCRtpHeaderExtensionParameters[];\n      video: RTCRtpHeaderExtensionParameters[];\n    }>;\n  }) {\n    return () => new Werift(nativeRtpCapabilities);\n  }\n\n  constructor(\n    public nativeRtpCapabilities: {\n      codecs: Partial<{\n        audio: RTCRtpCodecParameters[];\n        video: RTCRtpCodecParameters[];\n      }>;\n      headerExtensions: Partial<{\n        audio: RTCRtpHeaderExtensionParameters[];\n        video: RTCRtpHeaderExtensionParameters[];\n      }>;\n    }\n  ) {\n    super();\n  }\n\n  get name() {\n    return \"werift\";\n  }\n\n  close(): void {\n    logger.debug(\"close()\");\n\n    // Close RTCPeerConnection.\n    if (this._pc) {\n      try {\n        this._pc.close();\n      } catch (error) {}\n    }\n  }\n\n  async getNativeRtpCapabilities(): Promise<RtpCapabilities> {\n    let preferredPayloadType = 96;\n    const codecs: RtpCodecCapability[] = [\n      ...(this.nativeRtpCapabilities.codecs.video || []).map(\n        ({ mimeType, clockRate, rtcpFeedback }) => {\n          const codec: RtpCodecCapability = {\n            kind: \"video\",\n            mimeType,\n            clockRate,\n            rtcpFeedback,\n            preferredPayloadType: preferredPayloadType++,\n          };\n          return codec;\n        }\n      ),\n      ...(this.nativeRtpCapabilities.codecs.audio || []).map(\n        ({ mimeType, clockRate, channels }) => {\n          const codec: RtpCodecCapability = {\n            kind: \"audio\",\n            mimeType,\n            clockRate,\n            channels,\n            preferredPayloadType: preferredPayloadType++,\n          };\n          return codec;\n        }\n      ),\n    ];\n    let preferredId = 1;\n    const headerExtensions: RtpHeaderExtension[] = [\n      ...(this.nativeRtpCapabilities.headerExtensions.audio || []).map(\n        ({ uri }) => {\n          const ext: RtpHeaderExtension = { uri, preferredId: preferredId++ };\n          return ext;\n        }\n      ),\n      ...(this.nativeRtpCapabilities.headerExtensions.video || []).map(\n        ({ uri }) => {\n          const ext: RtpHeaderExtension = { uri, preferredId: preferredId++ };\n          return ext;\n        }\n      ),\n    ];\n\n    const caps: RtpCapabilities = {\n      codecs,\n      headerExtensions,\n    };\n\n    return caps;\n  }\n\n  async getNativeSctpCapabilities(): Promise<SctpCapabilities> {\n    logger.debug(\"getNativeSctpCapabilities()\");\n\n    return {\n      numStreams: SCTP_NUM_STREAMS,\n    };\n  }\n\n  run({\n    direction,\n    iceParameters,\n    iceCandidates,\n    dtlsParameters,\n    sctpParameters,\n    iceServers,\n    iceTransportPolicy,\n    additionalSettings,\n    proprietaryConstraints,\n    extendedRtpCapabilities,\n  }: HandlerRunOptions): void {\n    logger.debug(\"run()\");\n\n    this._direction = direction;\n\n    this._remoteSdp = new RemoteSdp({\n      iceParameters,\n      iceCandidates,\n      dtlsParameters,\n      sctpParameters,\n    });\n\n    this._sendingRtpParametersByKind = {\n      audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n      video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities),\n    };\n\n    this._sendingRemoteRtpParametersByKind = {\n      audio: ortc.getSendingRemoteRtpParameters(\n        \"audio\",\n        extendedRtpCapabilities\n      ),\n      video: ortc.getSendingRemoteRtpParameters(\n        \"video\",\n        extendedRtpCapabilities\n      ),\n    };\n\n    this._pc = new RTCPeerConnection({\n      iceServers: iceServers || [],\n      iceTransportPolicy: iceTransportPolicy || \"all\",\n      bundlePolicy: \"max-bundle\",\n      rtcpMuxPolicy: \"require\",\n      sdpSemantics: \"unified-plan\",\n      ...this.nativeRtpCapabilities,\n      ...additionalSettings,\n    });\n\n    // Handle RTCPeerConnection connection status.\n    this._pc.connectionStateChange.subscribe((state) => {\n      switch (state) {\n        case \"connecting\":\n          this.emit(\"@connectionstatechange\", \"connecting\");\n          break;\n        case \"connected\":\n          this.emit(\"@connectionstatechange\", \"connected\");\n          break;\n      }\n    });\n  }\n\n  // todo impl\n  async updateIceServers(iceServers: RTCIceServer[]): Promise<void> {}\n\n  // todo impl\n  async restartIce(iceParameters: IceParameters): Promise<void> {}\n\n  // todo impl\n  // @ts-expect-error\n  async getTransportStats(): Promise<RTCStatsReport> {}\n\n  async send({\n    track,\n    encodings,\n    codecOptions,\n    codec,\n  }: HandlerSendOptions): Promise<HandlerSendResult> {\n    this._assertSendDirection();\n\n    logger.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n\n    if (encodings && encodings.length > 1) {\n      encodings.forEach((encoding: RtpEncodingParameters, idx: number) => {\n        encoding.rid = `r${idx}`;\n      });\n    }\n\n    const sendingRtpParameters = utils.clone(\n      this._sendingRtpParametersByKind![track.kind],\n      {}\n    );\n\n    // This may throw.\n    sendingRtpParameters.codecs = ortc.reduceCodecs(\n      sendingRtpParameters.codecs,\n      codec\n    );\n\n    const sendingRemoteRtpParameters = utils.clone(\n      this._sendingRemoteRtpParametersByKind![track.kind],\n      {}\n    );\n\n    // This may throw.\n    sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(\n      sendingRemoteRtpParameters.codecs,\n      codec\n    );\n\n    const mediaSectionIdx = this._remoteSdp!.getNextMediaSectionIdx();\n    const transceiver = this._pc.addTransceiver(\n      track as unknown as MediaStreamTrack,\n      {\n        direction: \"sendonly\",\n      }\n    );\n    const offer = await this._pc.createOffer();\n    let localSdpObject = sdpTransform.parse(offer.sdp);\n    let offerMediaObject;\n\n    if (!this._transportReady) {\n      await this._setupTransport({ localDtlsRole: \"server\", localSdpObject });\n    }\n\n    logger.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n\n    await this._pc.setLocalDescription(offer);\n\n    // We can now get the transceiver.mid.\n    const localId = transceiver.mid;\n\n    // Set MID.\n    sendingRtpParameters.mid = localId;\n\n    localSdpObject = sdpTransform.parse(this._pc.localDescription!.sdp);\n    offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n\n    // Set RTCP CNAME.\n    sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({\n      offerMediaObject,\n    });\n\n    // Set RTP encodings by parsing the SDP offer if no encodings are given.\n    if (!encodings) {\n      sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({\n        offerMediaObject,\n      });\n    }\n    // Set RTP encodings by parsing the SDP offer and complete them with given\n    // one if just a single encoding has been given.\n    else if (encodings.length === 1) {\n      const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({\n        offerMediaObject,\n      });\n\n      Object.assign(newEncodings[0], encodings[0]);\n\n      sendingRtpParameters.encodings = newEncodings;\n    }\n    // Otherwise if more than 1 encoding are given use them verbatim.\n    else {\n      sendingRtpParameters.encodings = encodings;\n    }\n\n    this._remoteSdp!.send({\n      offerMediaObject,\n      reuseMid: mediaSectionIdx.reuseMid,\n      offerRtpParameters: sendingRtpParameters,\n      answerRtpParameters: sendingRemoteRtpParameters,\n      codecOptions,\n      extmapAllowMixed: true,\n    });\n\n    const answer = { type: \"answer\", sdp: this._remoteSdp!.getSdp() } as const;\n\n    logger.debug(\n      \"send() | calling pc.setRemoteDescription() [answer:%o]\",\n      answer\n    );\n    await this._pc.setRemoteDescription(answer);\n\n    // Store in the map.\n    this._mapMidTransceiver.set(localId!, transceiver);\n\n    return {\n      localId: localId!,\n      rtpParameters: sendingRtpParameters,\n      rtpSender: transceiver.sender as any,\n    };\n  }\n\n  // todo impl\n  async stopSending(localId: string): Promise<void> {}\n\n  // todo impl\n  async replaceTrack(\n    localId: string,\n    track: globalThis.MediaStreamTrack | null\n  ): Promise<void> {}\n\n  // todo impl\n  async setMaxSpatialLayer(\n    localId: string,\n    spatialLayer: number\n  ): Promise<void> {}\n\n  // todo impl\n  async setRtpEncodingParameters(localId: string, params: any): Promise<void> {}\n\n  // todo impl\n  // @ts-expect-error\n  async getSenderStats(localId: string): Promise<RTCStatsReport> {}\n\n  async sendDataChannel({\n    ordered,\n    maxPacketLifeTime,\n    maxRetransmits,\n    label,\n    protocol,\n    priority,\n  }: HandlerSendDataChannelOptions): Promise<HandlerSendDataChannelResult> {\n    this._assertSendDirection();\n\n    const options = {\n      negotiated: true,\n      id: this._nextSendSctpStreamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol,\n      priority,\n    };\n\n    logger.debug(\"sendDataChannel() [options:%o]\", options);\n\n    const dataChannel = this._pc.createDataChannel(label || \"\", options);\n\n    // Increase next id.\n    this._nextSendSctpStreamId =\n      ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n\n    // If this is the first DataChannel we need to create the SDP answer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      const offer = await this._pc.createOffer();\n      const localSdpObject = sdpTransform.parse(offer.sdp);\n      const offerMediaObject = localSdpObject.media.find(\n        (m: any) => m.type === \"application\"\n      );\n\n      if (!this._transportReady)\n        await this._setupTransport({ localDtlsRole: \"server\", localSdpObject });\n\n      logger.debug(\n        \"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\",\n        offer\n      );\n\n      await this._pc.setLocalDescription(offer);\n\n      this._remoteSdp!.sendSctpAssociation({ offerMediaObject });\n\n      const answer = {\n        type: \"answer\",\n        sdp: this._remoteSdp!.getSdp(),\n      } as const;\n\n      logger.debug(\n        \"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\",\n        answer\n      );\n\n      await this._pc.setRemoteDescription(answer);\n\n      this._hasDataChannelMediaSection = true;\n    }\n\n    const sctpStreamParameters: SctpStreamParameters = {\n      streamId: options.id,\n      ordered: options.ordered,\n      maxPacketLifeTime: options.maxPacketLifeTime,\n      maxRetransmits: options.maxRetransmits,\n    };\n\n    return { dataChannel: dataChannel as any, sctpStreamParameters };\n  }\n\n  async receive({\n    trackId,\n    kind,\n    rtpParameters,\n  }: HandlerReceiveOptions): Promise<HandlerReceiveResult> {\n    this._assertRecvDirection();\n\n    logger.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n\n    const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n\n    this._remoteSdp!.receive({\n      mid: localId,\n      kind,\n      offerRtpParameters: rtpParameters,\n      streamId: rtpParameters.rtcp!.cname!,\n      trackId,\n    });\n\n    const offer = new RTCSessionDescription(this._remoteSdp!.getSdp(), \"offer\");\n\n    logger.debug(\n      \"receive() | calling pc.setRemoteDescription() [offer:%o]\",\n      offer\n    );\n\n    await this._pc.setRemoteDescription(offer);\n\n    let answer = await this._pc.createAnswer();\n    const localSdpObject = sdpTransform.parse(answer.sdp);\n    const answerMediaObject = localSdpObject.media.find(\n      (m: any) => String(m.mid) === localId\n    );\n\n    // May need to modify codec parameters in the answer based on codec\n    // parameters in the offer.\n    sdpCommonUtils.applyCodecParameters({\n      offerRtpParameters: rtpParameters,\n      answerMediaObject,\n    });\n\n    answer = new RTCSessionDescription(\n      sdpTransform.write(localSdpObject),\n      \"answer\"\n    );\n\n    if (!this._transportReady)\n      await this._setupTransport({ localDtlsRole: \"client\", localSdpObject });\n\n    logger.debug(\n      \"receive() | calling pc.setLocalDescription() [answer:%o]\",\n      answer\n    );\n\n    await this._pc.setLocalDescription(answer);\n\n    const transceiver = this._pc\n      .getTransceivers()\n      .find((t) => t.mid === localId);\n\n    if (!transceiver) throw new Error(\"new RTCRtpTransceiver not found\");\n\n    // Store in the map.\n    this._mapMidTransceiver.set(localId, transceiver);\n\n    return {\n      localId,\n      // todo fix\n      track: transceiver.receiver.tracks[0] as any,\n      // todo fix\n      rtpReceiver: transceiver.receiver as unknown as RTCRtpReceiver,\n    };\n  }\n\n  async stopReceiving(localId: string): Promise<void> {\n    this._assertRecvDirection();\n\n    logger.debug(\"stopReceiving() [localId:%s]\", localId);\n\n    const transceiver = this._mapMidTransceiver.get(localId);\n\n    if (!transceiver) throw new Error(\"associated RTCRtpTransceiver not found\");\n\n    this._remoteSdp!.closeMediaSection(transceiver.mid!);\n\n    const offer = new RTCSessionDescription(this._remoteSdp!.getSdp(), \"offer\");\n\n    logger.debug(\n      \"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\",\n      offer\n    );\n\n    await this._pc.setRemoteDescription(offer);\n\n    const answer = await this._pc.createAnswer();\n\n    logger.debug(\n      \"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\",\n      answer\n    );\n\n    await this._pc.setLocalDescription(answer);\n  }\n\n  // todo impl\n  // @ts-expect-error\n  async getReceiverStats(localId: string): Promise<RTCStatsReport> {}\n\n  async receiveDataChannel({\n    sctpStreamParameters,\n    label,\n    protocol,\n  }: HandlerReceiveDataChannelOptions): Promise<HandlerReceiveDataChannelResult> {\n    this._assertRecvDirection();\n\n    const {\n      streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n    }: SctpStreamParameters = sctpStreamParameters;\n\n    const options = {\n      negotiated: true,\n      id: streamId,\n      ordered,\n      maxPacketLifeTime,\n      maxRetransmits,\n      protocol,\n    };\n\n    logger.debug(\"receiveDataChannel() [options:%o]\", options);\n\n    const dataChannel = this._pc.createDataChannel(label || \"\", options);\n\n    // If this is the first DataChannel we need to create the SDP offer with\n    // m=application section.\n    if (!this._hasDataChannelMediaSection) {\n      this._remoteSdp!.receiveSctpAssociation();\n\n      const offer = { type: \"offer\", sdp: this._remoteSdp!.getSdp() } as const;\n\n      logger.debug(\n        \"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\",\n        offer\n      );\n\n      await this._pc.setRemoteDescription(offer);\n\n      const answer = await this._pc.createAnswer();\n\n      if (!this._transportReady) {\n        const localSdpObject = sdpTransform.parse(answer.sdp);\n\n        await this._setupTransport({ localDtlsRole: \"client\", localSdpObject });\n      }\n\n      logger.debug(\n        \"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\",\n        answer\n      );\n\n      await this._pc.setLocalDescription(answer);\n\n      this._hasDataChannelMediaSection = true;\n    }\n\n    return { dataChannel } as any;\n  }\n\n  private async _setupTransport({\n    localDtlsRole,\n    localSdpObject,\n  }: {\n    localDtlsRole: DtlsRole;\n    localSdpObject?: any;\n  }): Promise<void> {\n    if (!localSdpObject)\n      localSdpObject = sdpTransform.parse(this._pc.localDescription!.sdp);\n\n    // Get our local DTLS parameters.\n    const dtlsParameters = sdpCommonUtils.extractDtlsParameters({\n      sdpObject: localSdpObject,\n    });\n\n    // Set our DTLS role.\n    dtlsParameters.role = localDtlsRole;\n\n    // Update the remote DTLS role in the SDP.\n    this._remoteSdp!.updateDtlsRole(\n      localDtlsRole === \"client\" ? \"server\" : \"client\"\n    );\n\n    // Need to tell the remote transport about our parameters.\n    await this.safeEmitAsPromise(\"@connect\", { dtlsParameters });\n\n    this._transportReady = true;\n  }\n\n  private _assertSendDirection(): void {\n    if (this._direction !== \"send\") {\n      throw new Error(\n        'method can just be called for handlers with \"send\" direction'\n      );\n    }\n  }\n\n  private _assertRecvDirection(): void {\n    if (this._direction !== \"recv\") {\n      throw new Error(\n        'method can just be called for handlers with \"recv\" direction'\n      );\n    }\n  }\n}\n"]}