{"version":3,"file":"Producer.js","sourceRoot":"","sources":["../src/Producer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './Logger';\nimport { EnhancedEventEmitter } from './EnhancedEventEmitter';\nimport { UnsupportedError, InvalidStateError } from './errors';\nimport {\n\tMediaKind,\n\tRtpCodecCapability,\n\tRtpParameters,\n\tRtpEncodingParameters\n} from './RtpParameters';\nimport { RTCRtpSender } from 'werift/lib/webrtc/src/media/rtpSender';\n\nexport type ProducerOptions =\n{\n\ttrack?: MediaStreamTrack;\n\tencodings?: RtpEncodingParameters[];\n\tcodecOptions?: ProducerCodecOptions;\n\tcodec?: RtpCodecCapability;\n\tstopTracks?: boolean;\n\tdisableTrackOnPause?: boolean;\n\tzeroRtpOnPause?: boolean;\n\tappData?: any;\n}\n\n// https://mediasoup.org/documentation/v3/mediasoup-client/api/#ProducerCodecOptions\nexport type ProducerCodecOptions =\n{\n\topusStereo?: boolean;\n\topusFec?: boolean;\n\topusDtx?: boolean;\n\topusMaxPlaybackRate?: number;\n\topusMaxAverageBitrate?: number;\n\topusPtime?: number;\n\tvideoGoogleStartBitrate?: number;\n\tvideoGoogleMaxBitrate?: number;\n\tvideoGoogleMinBitrate?: number;\n}\n\nconst logger = new Logger('Producer');\n\nexport class Producer extends EnhancedEventEmitter\n{\n\t// Id.\n\tprivate readonly _id: string;\n\t// Local id.\n\tprivate readonly _localId: string;\n\t// Closed flag.\n\tprivate _closed = false;\n\t// Associated RTCRtpSender.\n\tprivate readonly _rtpSender?: RTCRtpSender;\n\t// Local track.\n\tprivate _track: MediaStreamTrack | null;\n\t// Producer kind.\n\tprivate readonly _kind: MediaKind;\n\t// RTP parameters.\n\tprivate readonly _rtpParameters: RtpParameters;\n\t// Paused flag.\n\tprivate _paused: boolean;\n\t// Video max spatial layer.\n\tprivate _maxSpatialLayer: number | undefined;\n\t// Whether the Producer should call stop() in given tracks.\n\tprivate _stopTracks: boolean;\n\t// Whether the Producer should set track.enabled = false when paused.\n\tprivate _disableTrackOnPause: boolean;\n\t// Whether we should replace the RTCRtpSender.track with null when paused.\n\tprivate _zeroRtpOnPause: boolean;\n\t// App custom data.\n\tprivate readonly _appData: any;\n\t// Observer instance.\n\tprotected readonly _observer = new EnhancedEventEmitter();\n\n\t/**\n\t * @emits transportclose\n\t * @emits trackended\n\t * @emits @replacetrack - (track: MediaStreamTrack | null)\n\t * @emits @setmaxspatiallayer - (spatialLayer: string)\n\t * @emits @setrtpencodingparameters - (params: any)\n\t * @emits @getstats\n\t * @emits @close\n\t */\n\tconstructor(\n\t\t{\n\t\t\tid,\n\t\t\tlocalId,\n\t\t\trtpSender,\n\t\t\ttrack,\n\t\t\trtpParameters,\n\t\t\tstopTracks,\n\t\t\tdisableTrackOnPause,\n\t\t\tzeroRtpOnPause,\n\t\t\tappData\n\t\t}:\n\t\t{\n\t\t\tid: string;\n\t\t\tlocalId: string;\n\t\t\trtpSender?: RTCRtpSender;\n\t\t\ttrack: MediaStreamTrack;\n\t\t\trtpParameters: RtpParameters;\n\t\t\tstopTracks: boolean;\n\t\t\tdisableTrackOnPause: boolean;\n\t\t\tzeroRtpOnPause: boolean;\n\t\t\tappData: any;\n\t\t}\n\t)\n\t{\n\t\tsuper();\n\n\t\tlogger.debug('constructor()');\n\n\t\tthis._id = id;\n\t\tthis._localId = localId;\n\t\tthis._rtpSender = rtpSender;\n\t\tthis._track = track;\n\t\tthis._kind = track.kind as MediaKind;\n\t\tthis._rtpParameters = rtpParameters;\n\t\tthis._paused = disableTrackOnPause ? !track.enabled : false;\n\t\tthis._maxSpatialLayer = undefined;\n\t\tthis._stopTracks = stopTracks;\n\t\tthis._disableTrackOnPause = disableTrackOnPause;\n\t\tthis._zeroRtpOnPause = zeroRtpOnPause;\n\t\tthis._appData = appData;\n\t\tthis._onTrackEnded = this._onTrackEnded.bind(this);\n\n\t\t// NOTE: Minor issue. If zeroRtpOnPause is true, we cannot emit the\n\t\t// '@replacetrack' event here, so RTCRtpSender.track won't be null.\n\n\t\tthis._handleTrack();\n\t}\n\n\t/**\n\t * Producer id.\n\t */\n\tget id(): string\n\t{\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Local id.\n\t */\n\tget localId(): string\n\t{\n\t\treturn this._localId;\n\t}\n\n\t/**\n\t * Whether the Producer is closed.\n\t */\n\tget closed(): boolean\n\t{\n\t\treturn this._closed;\n\t}\n\n\t/**\n\t * Media kind.\n\t */\n\tget kind(): string\n\t{\n\t\treturn this._kind;\n\t}\n\n\t/**\n\t * Associated RTCRtpSender.\n\t */\n\tget rtpSender(): RTCRtpSender | undefined\n\t{\n\t\treturn this._rtpSender;\n\t}\n\n\t/**\n\t * The associated track.\n\t */\n\tget track(): MediaStreamTrack | null\n\t{\n\t\treturn this._track;\n\t}\n\n\t/**\n\t * RTP parameters.\n\t */\n\tget rtpParameters(): RtpParameters\n\t{\n\t\treturn this._rtpParameters;\n\t}\n\n\t/**\n\t * Whether the Producer is paused.\n\t */\n\tget paused(): boolean\n\t{\n\t\treturn this._paused;\n\t}\n\n\t/**\n\t * Max spatial layer.\n\t *\n\t * @type {Number | undefined}\n\t */\n\tget maxSpatialLayer(): number | undefined\n\t{\n\t\treturn this._maxSpatialLayer;\n\t}\n\n\t/**\n\t * App custom data.\n\t */\n\tget appData(): any\n\t{\n\t\treturn this._appData;\n\t}\n\n\t/**\n\t * Invalid setter.\n\t */\n\tset appData(appData) // eslint-disable-line @typescript-eslint/no-unused-vars\n\t{\n\t\tthrow new Error('cannot override appData object');\n\t}\n\n\t/**\n\t * Observer.\n\t *\n\t * @emits close\n\t * @emits pause\n\t * @emits resume\n\t * @emits trackended\n\t */\n\tget observer(): EnhancedEventEmitter\n\t{\n\t\treturn this._observer;\n\t}\n\n\t/**\n\t * Closes the Producer.\n\t */\n\tclose(): void\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\tthis._closed = true;\n\n\t\tthis._destroyTrack();\n\n\t\tthis.emit('@close');\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('close');\n\t}\n\n\t/**\n\t * Transport was closed.\n\t */\n\ttransportClosed(): void\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('transportClosed()');\n\n\t\tthis._closed = true;\n\n\t\tthis._destroyTrack();\n\n\t\tthis.safeEmit('transportclose');\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('close');\n\t}\n\n\t/**\n\t * Get associated RTCRtpSender stats.\n\t */\n\tasync getStats(): Promise<RTCStatsReport>\n\t{\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\n\t\treturn this.safeEmitAsPromise('@getstats');\n\t}\n\n\t/**\n\t * Pauses sending media.\n\t */\n\tpause(): void\n\t{\n\t\tlogger.debug('pause()');\n\n\t\tif (this._closed)\n\t\t{\n\t\t\tlogger.error('pause() | Producer closed');\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._paused = true;\n\n\t\tif (this._track && this._disableTrackOnPause)\n\t\t{\n\t\t\tthis._track.enabled = false;\n\t\t}\n\n\t\tif (this._zeroRtpOnPause)\n\t\t{\n\t\t\tthis.safeEmitAsPromise('@replacetrack', null)\n\t\t\t\t.catch(() => {});\n\t\t}\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('pause');\n\t}\n\n\t/**\n\t * Resumes sending media.\n\t */\n\tresume(): void\n\t{\n\t\tlogger.debug('resume()');\n\n\t\tif (this._closed)\n\t\t{\n\t\t\tlogger.error('resume() | Producer closed');\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._paused = false;\n\n\t\tif (this._track && this._disableTrackOnPause)\n\t\t{\n\t\t\tthis._track.enabled = true;\n\t\t}\n\n\t\tif (this._zeroRtpOnPause)\n\t\t{\n\t\t\tthis.safeEmitAsPromise('@replacetrack', this._track)\n\t\t\t\t.catch(() => {});\n\t\t}\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('resume');\n\t}\n\n\t/**\n\t * Replaces the current track with a new one or null.\n\t */\n\tasync replaceTrack({ track }: { track: MediaStreamTrack | null }): Promise<void>\n\t{\n\t\tlogger.debug('replaceTrack() [track:%o]', track);\n\n\t\tif (this._closed)\n\t\t{\n\t\t\t// This must be done here. Otherwise there is no chance to stop the given\n\t\t\t// track.\n\t\t\tif (track && this._stopTracks)\n\t\t\t{\n\t\t\t\ttry { track.stop(); }\n\t\t\t\tcatch (error) {}\n\t\t\t}\n\n\t\t\tthrow new InvalidStateError('closed');\n\t\t}\n\t\telse if (track && track.readyState === 'ended')\n\t\t{\n\t\t\tthrow new InvalidStateError('track ended');\n\t\t}\n\n\t\t// Do nothing if this is the same track as the current handled one.\n\t\tif (track === this._track)\n\t\t{\n\t\t\tlogger.debug('replaceTrack() | same track, ignored');\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._zeroRtpOnPause || !this._paused)\n\t\t{\n\t\t\tawait this.safeEmitAsPromise('@replacetrack', track);\n\t\t}\n\n\t\t// Destroy the previous track.\n\t\tthis._destroyTrack();\n\n\t\t// Set the new track.\n\t\tthis._track = track;\n\n\t\t// If this Producer was paused/resumed and the state of the new\n\t\t// track does not match, fix it.\n\t\tif (this._track && this._disableTrackOnPause)\n\t\t{\n\t\t\tif (!this._paused)\n\t\t\t\tthis._track.enabled = true;\n\t\t\telse if (this._paused)\n\t\t\t\tthis._track.enabled = false;\n\t\t}\n\n\t\t// Handle the effective track.\n\t\tthis._handleTrack();\n\t}\n\n\t/**\n\t * Sets the video max spatial layer to be sent.\n\t */\n\tasync setMaxSpatialLayer(spatialLayer: number): Promise<void>\n\t{\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (this._kind !== 'video')\n\t\t\tthrow new UnsupportedError('not a video Producer');\n\t\telse if (typeof spatialLayer !== 'number')\n\t\t\tthrow new TypeError('invalid spatialLayer');\n\n\t\tif (spatialLayer === this._maxSpatialLayer)\n\t\t\treturn;\n\n\t\tawait this.safeEmitAsPromise('@setmaxspatiallayer', spatialLayer);\n\n\t\tthis._maxSpatialLayer = spatialLayer;\n\t}\n\n\t/**\n\t * Sets the DSCP value.\n\t */\n\tasync setRtpEncodingParameters(\n\t\tparams: RTCRtpEncodingParameters\n\t): Promise<void>\n\t{\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (typeof params !== 'object')\n\t\t\tthrow new TypeError('invalid params');\n\n\t\tawait this.safeEmitAsPromise('@setrtpencodingparameters', params);\n\t}\n\n\tprivate _onTrackEnded(): void\n\t{\n\t\tlogger.debug('track \"ended\" event');\n\n\t\tthis.safeEmit('trackended');\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('trackended');\n\t}\n\n\tprivate _handleTrack(): void\n\t{\n\t\tif (!this._track)\n\t\t\treturn;\n\n\t\tthis._track.addEventListener('ended', this._onTrackEnded);\n\t}\n\n\tprivate _destroyTrack(): void\n\t{\n\t\tif (!this._track)\n\t\t\treturn;\n\n\t\ttry\n\t\t{\n\t\t\tthis._track.removeEventListener('ended', this._onTrackEnded);\n\n\t\t\t// Just stop the track unless the app set stopTracks: false.\n\t\t\tif (this._stopTracks)\n\t\t\t\tthis._track.stop();\n\t\t}\n\t\tcatch (error)\n\t\t{}\n\t}\n}\n"]}