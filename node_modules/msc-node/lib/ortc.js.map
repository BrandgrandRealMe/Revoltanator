{"version":3,"file":"ortc.js","sourceRoot":"","sources":["../src/ortc.ts"],"names":[],"mappings":"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","sourcesContent":["import * as h264 from 'h264-profile-level-id';\nimport {\n\tRtpCapabilities,\n\tMediaKind,\n\tRtpCodecCapability,\n\tRtpHeaderExtension,\n\tRtpParameters,\n\tRtpCodecParameters,\n\tRtcpFeedback,\n\tRtpEncodingParameters,\n\tRtpHeaderExtensionParameters,\n\tRtcpParameters\n} from './RtpParameters';\nimport {\n\tSctpCapabilities,\n\tNumSctpStreams,\n\tSctpParameters,\n\tSctpStreamParameters\n} from './SctpParameters';\nimport * as utils from './utils';\n\nconst RTP_PROBATOR_MID = 'probator';\nconst RTP_PROBATOR_SSRC = 1234;\nconst RTP_PROBATOR_CODEC_PAYLOAD_TYPE = 127;\n\n/**\n * Validates RtpCapabilities. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateRtpCapabilities(caps: RtpCapabilities): void\n{\n\tif (typeof caps !== 'object')\n\t\tthrow new TypeError('caps is not an object');\n\n\t// codecs is optional. If unset, fill with an empty array.\n\tif (caps.codecs && !Array.isArray(caps.codecs))\n\t\tthrow new TypeError('caps.codecs is not an array');\n\telse if (!caps.codecs)\n\t\tcaps.codecs = [];\n\n\tfor (const codec of caps.codecs)\n\t{\n\t\tvalidateRtpCodecCapability(codec);\n\t}\n\n\t// headerExtensions is optional. If unset, fill with an empty array.\n\tif (caps.headerExtensions && !Array.isArray(caps.headerExtensions))\n\t\tthrow new TypeError('caps.headerExtensions is not an array');\n\telse if (!caps.headerExtensions)\n\t\tcaps.headerExtensions = [];\n\n\tfor (const ext of caps.headerExtensions)\n\t{\n\t\tvalidateRtpHeaderExtension(ext);\n\t}\n}\n\n/**\n * Validates RtpCodecCapability. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateRtpCodecCapability(codec: RtpCodecCapability): void\n{\n\tconst MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');\n\n\tif (typeof codec !== 'object')\n\t\tthrow new TypeError('codec is not an object');\n\n\t// mimeType is mandatory.\n\tif (!codec.mimeType || typeof codec.mimeType !== 'string')\n\t\tthrow new TypeError('missing codec.mimeType');\n\n\tconst mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n\n\tif (!mimeTypeMatch)\n\t\tthrow new TypeError('invalid codec.mimeType');\n\n\t// Just override kind with media component of mimeType.\n\tcodec.kind = mimeTypeMatch[1].toLowerCase() as MediaKind;\n\n\t// preferredPayloadType is optional.\n\tif (codec.preferredPayloadType && typeof codec.preferredPayloadType !== 'number')\n\t\tthrow new TypeError('invalid codec.preferredPayloadType');\n\n\t// clockRate is mandatory.\n\tif (typeof codec.clockRate !== 'number')\n\t\tthrow new TypeError('missing codec.clockRate');\n\n\t// channels is optional. If unset, set it to 1 (just if audio).\n\tif (codec.kind === 'audio')\n\t{\n\t\tif (typeof codec.channels !== 'number')\n\t\t\tcodec.channels = 1;\n\t}\n\telse\n\t{\n\t\tdelete codec.channels;\n\t}\n\n\t// parameters is optional. If unset, set it to an empty object.\n\tif (!codec.parameters || typeof codec.parameters !== 'object')\n\t\tcodec.parameters = {};\n\n\tfor (const key of Object.keys(codec.parameters))\n\t{\n\t\tlet value = codec.parameters[key];\n\n\t\tif (value === undefined)\n\t\t{\n\t\t\tcodec.parameters[key] = '';\n\t\t\tvalue = '';\n\t\t}\n\n\t\tif (typeof value !== 'string' && typeof value !== 'number')\n\t\t{\n\t\t\tthrow new TypeError(\n\t\t\t\t`invalid codec parameter [key:${key}s, value:${value}]`);\n\t\t}\n\n\t\t// Specific parameters validation.\n\t\tif (key === 'apt')\n\t\t{\n\t\t\tif (typeof value !== 'number')\n\t\t\t\tthrow new TypeError('invalid codec apt parameter');\n\t\t}\n\t}\n\n\t// rtcpFeedback is optional. If unset, set it to an empty array.\n\tif (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback))\n\t\tcodec.rtcpFeedback = [];\n\n\tfor (const fb of codec.rtcpFeedback)\n\t{\n\t\tvalidateRtcpFeedback(fb);\n\t}\n}\n\n/**\n * Validates RtcpFeedback. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateRtcpFeedback(fb: RtcpFeedback): void\n{\n\tif (typeof fb !== 'object')\n\t\tthrow new TypeError('fb is not an object');\n\n\t// type is mandatory.\n\tif (!fb.type || typeof fb.type !== 'string')\n\t\tthrow new TypeError('missing fb.type');\n\n\t// parameter is optional. If unset set it to an empty string.\n\tif (!fb.parameter || typeof fb.parameter !== 'string')\n\t\tfb.parameter = '';\n}\n\n/**\n * Validates RtpHeaderExtension. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateRtpHeaderExtension(ext: RtpHeaderExtension): void\n{\n\n\tif (typeof ext !== 'object')\n\t\tthrow new TypeError('ext is not an object');\n\n\t// kind is optional. If unset set it to an empty string.\n\tif (!ext.kind || typeof ext.kind !== 'string')\n\t\text.kind = '';\n\n\tif (ext.kind !== '' && ext.kind !== 'audio' && ext.kind !== 'video')\n\t\tthrow new TypeError('invalid ext.kind');\n\n\t// uri is mandatory.\n\tif (!ext.uri || typeof ext.uri !== 'string')\n\t\tthrow new TypeError('missing ext.uri');\n\n\t// preferredId is mandatory.\n\tif (typeof ext.preferredId !== 'number')\n\t\tthrow new TypeError('missing ext.preferredId');\n\n\t// preferredEncrypt is optional. If unset set it to false.\n\tif (ext.preferredEncrypt && typeof ext.preferredEncrypt !== 'boolean')\n\t\tthrow new TypeError('invalid ext.preferredEncrypt');\n\telse if (!ext.preferredEncrypt)\n\t\text.preferredEncrypt = false;\n\n\t// direction is optional. If unset set it to sendrecv.\n\tif (ext.direction && typeof ext.direction !== 'string')\n\t\tthrow new TypeError('invalid ext.direction');\n\telse if (!ext.direction)\n\t\text.direction = 'sendrecv';\n}\n\n/**\n * Validates RtpParameters. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateRtpParameters(params: RtpParameters): void\n{\n\tif (typeof params !== 'object')\n\t\tthrow new TypeError('params is not an object');\n\n\t// mid is optional.\n\tif (params.mid && typeof params.mid !== 'string')\n\t\tthrow new TypeError('params.mid is not a string');\n\n\t// codecs is mandatory.\n\tif (!Array.isArray(params.codecs))\n\t\tthrow new TypeError('missing params.codecs');\n\n\tfor (const codec of params.codecs)\n\t{\n\t\tvalidateRtpCodecParameters(codec);\n\t}\n\n\t// headerExtensions is optional. If unset, fill with an empty array.\n\tif (params.headerExtensions && !Array.isArray(params.headerExtensions))\n\t\tthrow new TypeError('params.headerExtensions is not an array');\n\telse if (!params.headerExtensions)\n\t\tparams.headerExtensions = [];\n\n\tfor (const ext of params.headerExtensions)\n\t{\n\t\tvalidateRtpHeaderExtensionParameters(ext);\n\t}\n\n\t// encodings is optional. If unset, fill with an empty array.\n\tif (params.encodings && !Array.isArray(params.encodings))\n\t\tthrow new TypeError('params.encodings is not an array');\n\telse if (!params.encodings)\n\t\tparams.encodings = [];\n\n\tfor (const encoding of params.encodings)\n\t{\n\t\tvalidateRtpEncodingParameters(encoding);\n\t}\n\n\t// rtcp is optional. If unset, fill with an empty object.\n\tif (params.rtcp && typeof params.rtcp !== 'object')\n\t\tthrow new TypeError('params.rtcp is not an object');\n\telse if (!params.rtcp)\n\t\tparams.rtcp = {};\n\n\tvalidateRtcpParameters(params.rtcp);\n}\n\n/**\n * Validates RtpCodecParameters. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateRtpCodecParameters(codec: RtpCodecParameters): void\n{\n\tconst MimeTypeRegex = new RegExp('^(audio|video)/(.+)', 'i');\n\n\tif (typeof codec !== 'object')\n\t\tthrow new TypeError('codec is not an object');\n\n\t// mimeType is mandatory.\n\tif (!codec.mimeType || typeof codec.mimeType !== 'string')\n\t\tthrow new TypeError('missing codec.mimeType');\n\n\tconst mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n\n\tif (!mimeTypeMatch)\n\t\tthrow new TypeError('invalid codec.mimeType');\n\n\t// payloadType is mandatory.\n\tif (typeof codec.payloadType !== 'number')\n\t\tthrow new TypeError('missing codec.payloadType');\n\n\t// clockRate is mandatory.\n\tif (typeof codec.clockRate !== 'number')\n\t\tthrow new TypeError('missing codec.clockRate');\n\n\tconst kind = mimeTypeMatch[1].toLowerCase() as MediaKind;\n\n\t// channels is optional. If unset, set it to 1 (just if audio).\n\tif (kind === 'audio')\n\t{\n\t\tif (typeof codec.channels !== 'number')\n\t\t\tcodec.channels = 1;\n\t}\n\telse\n\t{\n\t\tdelete codec.channels;\n\t}\n\n\t// parameters is optional. If unset, set it to an empty object.\n\tif (!codec.parameters || typeof codec.parameters !== 'object')\n\t\tcodec.parameters = {};\n\n\tfor (const key of Object.keys(codec.parameters))\n\t{\n\t\tlet value = codec.parameters[key];\n\n\t\tif (value === undefined)\n\t\t{\n\t\t\tcodec.parameters[key] = '';\n\t\t\tvalue = '';\n\t\t}\n\n\t\tif (typeof value !== 'string' && typeof value !== 'number')\n\t\t{\n\t\t\tthrow new TypeError(\n\t\t\t\t`invalid codec parameter [key:${key}s, value:${value}]`);\n\t\t}\n\n\t\t// Specific parameters validation.\n\t\tif (key === 'apt')\n\t\t{\n\t\t\tif (typeof value !== 'number')\n\t\t\t\tthrow new TypeError('invalid codec apt parameter');\n\t\t}\n\t}\n\n\t// rtcpFeedback is optional. If unset, set it to an empty array.\n\tif (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback))\n\t\tcodec.rtcpFeedback = [];\n\n\tfor (const fb of codec.rtcpFeedback)\n\t{\n\t\tvalidateRtcpFeedback(fb);\n\t}\n}\n\n/**\n * Validates RtpHeaderExtensionParameteters. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateRtpHeaderExtensionParameters(\n\text: RtpHeaderExtensionParameters\n): void\n{\n\n\tif (typeof ext !== 'object')\n\t\tthrow new TypeError('ext is not an object');\n\n\t// uri is mandatory.\n\tif (!ext.uri || typeof ext.uri !== 'string')\n\t\tthrow new TypeError('missing ext.uri');\n\n\t// id is mandatory.\n\tif (typeof ext.id !== 'number')\n\t\tthrow new TypeError('missing ext.id');\n\n\t// encrypt is optional. If unset set it to false.\n\tif (ext.encrypt && typeof ext.encrypt !== 'boolean')\n\t\tthrow new TypeError('invalid ext.encrypt');\n\telse if (!ext.encrypt)\n\t\text.encrypt = false;\n\n\t// parameters is optional. If unset, set it to an empty object.\n\tif (!ext.parameters || typeof ext.parameters !== 'object')\n\t\text.parameters = {};\n\n\tfor (const key of Object.keys(ext.parameters))\n\t{\n\t\tlet value = ext.parameters[key];\n\n\t\tif (value === undefined)\n\t\t{\n\t\t\text.parameters[key] = '';\n\t\t\tvalue = '';\n\t\t}\n\n\t\tif (typeof value !== 'string' && typeof value !== 'number')\n\t\t\tthrow new TypeError('invalid header extension parameter');\n\t}\n}\n\n/**\n * Validates RtpEncodingParameters. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateRtpEncodingParameters(encoding: RtpEncodingParameters): void\n{\n\tif (typeof encoding !== 'object')\n\t\tthrow new TypeError('encoding is not an object');\n\n\t// ssrc is optional.\n\tif (encoding.ssrc && typeof encoding.ssrc !== 'number')\n\t\tthrow new TypeError('invalid encoding.ssrc');\n\n\t// rid is optional.\n\tif (encoding.rid && typeof encoding.rid !== 'string')\n\t\tthrow new TypeError('invalid encoding.rid');\n\n\t// rtx is optional.\n\tif (encoding.rtx && typeof encoding.rtx !== 'object')\n\t{\n\t\tthrow new TypeError('invalid encoding.rtx');\n\t}\n\telse if (encoding.rtx)\n\t{\n\t\t// RTX ssrc is mandatory if rtx is present.\n\t\tif (typeof encoding.rtx.ssrc !== 'number')\n\t\t\tthrow new TypeError('missing encoding.rtx.ssrc');\n\t}\n\n\t// dtx is optional. If unset set it to false.\n\tif (!encoding.dtx || typeof encoding.dtx !== 'boolean')\n\t\tencoding.dtx = false;\n\n\t// scalabilityMode is optional.\n\tif (encoding.scalabilityMode && typeof encoding.scalabilityMode !== 'string')\n\t\tthrow new TypeError('invalid encoding.scalabilityMode');\n}\n\n/**\n * Validates RtcpParameters. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateRtcpParameters(rtcp: RtcpParameters): void\n{\n\tif (typeof rtcp !== 'object')\n\t\tthrow new TypeError('rtcp is not an object');\n\n\t// cname is optional.\n\tif (rtcp.cname && typeof rtcp.cname !== 'string')\n\t\tthrow new TypeError('invalid rtcp.cname');\n\n\t// reducedSize is optional. If unset set it to true.\n\tif (!rtcp.reducedSize || typeof rtcp.reducedSize !== 'boolean')\n\t\trtcp.reducedSize = true;\n}\n\n/**\n * Validates SctpCapabilities. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateSctpCapabilities(caps: SctpCapabilities): void\n{\n\tif (typeof caps !== 'object')\n\t\tthrow new TypeError('caps is not an object');\n\n\t// numStreams is mandatory.\n\tif (!caps.numStreams || typeof caps.numStreams !== 'object')\n\t\tthrow new TypeError('missing caps.numStreams');\n\n\tvalidateNumSctpStreams(caps.numStreams);\n}\n\n/**\n * Validates NumSctpStreams. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateNumSctpStreams(numStreams: NumSctpStreams): void\n{\n\tif (typeof numStreams !== 'object')\n\t\tthrow new TypeError('numStreams is not an object');\n\n\t// OS is mandatory.\n\tif (typeof numStreams.OS !== 'number')\n\t\tthrow new TypeError('missing numStreams.OS');\n\n\t// MIS is mandatory.\n\tif (typeof numStreams.MIS !== 'number')\n\t\tthrow new TypeError('missing numStreams.MIS');\n}\n\n/**\n * Validates SctpParameters. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateSctpParameters(params: SctpParameters): void\n{\n\tif (typeof params !== 'object')\n\t\tthrow new TypeError('params is not an object');\n\n\t// port is mandatory.\n\tif (typeof params.port !== 'number')\n\t\tthrow new TypeError('missing params.port');\n\n\t// OS is mandatory.\n\tif (typeof params.OS !== 'number')\n\t\tthrow new TypeError('missing params.OS');\n\n\t// MIS is mandatory.\n\tif (typeof params.MIS !== 'number')\n\t\tthrow new TypeError('missing params.MIS');\n\n\t// maxMessageSize is mandatory.\n\tif (typeof params.maxMessageSize !== 'number')\n\t\tthrow new TypeError('missing params.maxMessageSize');\n}\n\n/**\n * Validates SctpStreamParameters. It may modify given data by adding missing\n * fields with default values.\n * It throws if invalid.\n */\nexport function validateSctpStreamParameters(params: SctpStreamParameters): void\n{\n\tif (typeof params !== 'object')\n\t\tthrow new TypeError('params is not an object');\n\n\t// streamId is mandatory.\n\tif (typeof params.streamId !== 'number')\n\t\tthrow new TypeError('missing params.streamId');\n\n\t// ordered is optional.\n\tlet orderedGiven = false;\n\n\tif (typeof params.ordered === 'boolean')\n\t\torderedGiven = true;\n\telse\n\t\tparams.ordered = true;\n\n\t// maxPacketLifeTime is optional.\n\tif (params.maxPacketLifeTime && typeof params.maxPacketLifeTime !== 'number')\n\t\tthrow new TypeError('invalid params.maxPacketLifeTime');\n\n\t// maxRetransmits is optional.\n\tif (params.maxRetransmits && typeof params.maxRetransmits !== 'number')\n\t\tthrow new TypeError('invalid params.maxRetransmits');\n\n\tif (params.maxPacketLifeTime && params.maxRetransmits)\n\t\tthrow new TypeError('cannot provide both maxPacketLifeTime and maxRetransmits');\n\n\tif (\n\t\torderedGiven &&\n\t\tparams.ordered &&\n\t\t(params.maxPacketLifeTime || params.maxRetransmits)\n\t)\n\t{\n\t\tthrow new TypeError('cannot be ordered with maxPacketLifeTime or maxRetransmits');\n\t}\n\telse if (!orderedGiven && (params.maxPacketLifeTime || params.maxRetransmits))\n\t{\n\t\tparams.ordered = false;\n\t}\n\n\t// priority is optional.\n\tif (params.priority && typeof params.priority !== 'string')\n\t\tthrow new TypeError('invalid params.priority');\n\n\t// label is optional.\n\tif (params.label && typeof params.label !== 'string')\n\t\tthrow new TypeError('invalid params.label');\n\n\t// protocol is optional.\n\tif (params.protocol && typeof params.protocol !== 'string')\n\t\tthrow new TypeError('invalid params.protocol');\n}\n\n/**\n * Generate extended RTP capabilities for sending and receiving.\n */\nexport function getExtendedRtpCapabilities(\n\tlocalCaps: RtpCapabilities,\n\tremoteCaps: RtpCapabilities\n): any\n{\n\tconst extendedRtpCapabilities: any =\n\t{\n\t\tcodecs           : [],\n\t\theaderExtensions : []\n\t};\n\n\t// Match media codecs and keep the order preferred by remoteCaps.\n\tfor (const remoteCodec of remoteCaps.codecs || [])\n\t{\n\t\tif (isRtxCodec(remoteCodec))\n\t\t\tcontinue;\n\n\t\tconst matchingLocalCodec = (localCaps.codecs || [])\n\t\t\t.find((localCodec: RtpCodecCapability) => (\n\t\t\t\tmatchCodecs(localCodec, remoteCodec, { strict: true, modify: true }))\n\t\t\t);\n\n\t\tif (!matchingLocalCodec)\n\t\t\tcontinue;\n\n\t\tconst extendedCodec: any =\n\t\t{\n\t\t\tmimeType             : matchingLocalCodec.mimeType,\n\t\t\tkind                 : matchingLocalCodec.kind,\n\t\t\tclockRate            : matchingLocalCodec.clockRate,\n\t\t\tchannels             : matchingLocalCodec.channels,\n\t\t\tlocalPayloadType     : matchingLocalCodec.preferredPayloadType,\n\t\t\tlocalRtxPayloadType  : undefined,\n\t\t\tremotePayloadType    : remoteCodec.preferredPayloadType,\n\t\t\tremoteRtxPayloadType : undefined,\n\t\t\tlocalParameters      : matchingLocalCodec.parameters,\n\t\t\tremoteParameters     : remoteCodec.parameters,\n\t\t\trtcpFeedback         : reduceRtcpFeedback(matchingLocalCodec, remoteCodec)\n\t\t};\n\n\t\textendedRtpCapabilities.codecs.push(extendedCodec);\n\t}\n\n\t// Match RTX codecs.\n\tfor (const extendedCodec of extendedRtpCapabilities.codecs)\n\t{\n\t\tconst matchingLocalRtxCodec = localCaps.codecs!\n\t\t\t.find((localCodec: RtpCodecCapability) => (\n\t\t\t\tisRtxCodec(localCodec) &&\n\t\t\t\tlocalCodec.parameters.apt === extendedCodec.localPayloadType\n\t\t\t));\n\n\t\tconst matchingRemoteRtxCodec = remoteCaps.codecs!\n\t\t\t.find((remoteCodec: RtpCodecCapability) => (\n\t\t\t\tisRtxCodec(remoteCodec) &&\n\t\t\t\tremoteCodec.parameters.apt === extendedCodec.remotePayloadType\n\t\t\t));\n\n\t\tif (matchingLocalRtxCodec && matchingRemoteRtxCodec)\n\t\t{\n\t\t\textendedCodec.localRtxPayloadType = matchingLocalRtxCodec.preferredPayloadType;\n\t\t\textendedCodec.remoteRtxPayloadType = matchingRemoteRtxCodec.preferredPayloadType;\n\t\t}\n\t}\n\n\t// Match header extensions.\n\tfor (const remoteExt of remoteCaps.headerExtensions!)\n\t{\n\t\tconst matchingLocalExt = localCaps.headerExtensions!\n\t\t\t.find((localExt: RtpHeaderExtension) => (\n\t\t\t\tmatchHeaderExtensions(localExt, remoteExt)\n\t\t\t));\n\n\t\tif (!matchingLocalExt)\n\t\t\tcontinue;\n\n\t\tconst extendedExt =\n\t\t{\n\t\t\tkind      : remoteExt.kind,\n\t\t\turi       : remoteExt.uri,\n\t\t\tsendId    : matchingLocalExt.preferredId,\n\t\t\trecvId    : remoteExt.preferredId,\n\t\t\tencrypt   : matchingLocalExt.preferredEncrypt,\n\t\t\tdirection : 'sendrecv'\n\t\t};\n\n\t\tswitch (remoteExt.direction)\n\t\t{\n\t\t\tcase 'sendrecv':\n\t\t\t\textendedExt.direction = 'sendrecv';\n\t\t\t\tbreak;\n\t\t\tcase 'recvonly':\n\t\t\t\textendedExt.direction = 'sendonly';\n\t\t\t\tbreak;\n\t\t\tcase 'sendonly':\n\t\t\t\textendedExt.direction = 'recvonly';\n\t\t\t\tbreak;\n\t\t\tcase 'inactive':\n\t\t\t\textendedExt.direction = 'inactive';\n\t\t\t\tbreak;\n\t\t}\n\n\t\textendedRtpCapabilities.headerExtensions.push(extendedExt);\n\t}\n\n\treturn extendedRtpCapabilities;\n}\n\n/**\n * Generate RTP capabilities for receiving media based on the given extended\n * RTP capabilities.\n */\nexport function getRecvRtpCapabilities(extendedRtpCapabilities: any): RtpCapabilities\n{\n\tconst rtpCapabilities: RtpCapabilities =\n\t{\n\t\tcodecs           : [],\n\t\theaderExtensions : []\n\t};\n\n\tfor (const extendedCodec of extendedRtpCapabilities.codecs)\n\t{\n\t\tconst codec =\n\t\t{\n\t\t\tmimeType             : extendedCodec.mimeType,\n\t\t\tkind                 : extendedCodec.kind,\n\t\t\tpreferredPayloadType : extendedCodec.remotePayloadType,\n\t\t\tclockRate            : extendedCodec.clockRate,\n\t\t\tchannels             : extendedCodec.channels,\n\t\t\tparameters           : extendedCodec.localParameters,\n\t\t\trtcpFeedback         : extendedCodec.rtcpFeedback\n\t\t};\n\n\t\trtpCapabilities.codecs!.push(codec);\n\n\t\t// Add RTX codec.\n\t\tif (!extendedCodec.remoteRtxPayloadType)\n\t\t\tcontinue;\n\n\t\tconst rtxCodec: RtpCodecCapability =\n\t\t{\n\t\t\tmimeType             : `${extendedCodec.kind}/rtx`,\n\t\t\tkind                 : extendedCodec.kind,\n\t\t\tpreferredPayloadType : extendedCodec.remoteRtxPayloadType,\n\t\t\tclockRate            : extendedCodec.clockRate,\n\t\t\tparameters           :\n\t\t\t{\n\t\t\t\tapt : extendedCodec.remotePayloadType\n\t\t\t},\n\t\t\trtcpFeedback : []\n\t\t};\n\n\t\trtpCapabilities.codecs!.push(rtxCodec);\n\n\t\t// TODO: In the future, we need to add FEC, CN, etc, codecs.\n\t}\n\n\tfor (const extendedExtension of extendedRtpCapabilities.headerExtensions)\n\t{\n\t\t// Ignore RTP extensions not valid for receiving.\n\t\tif (\n\t\t\textendedExtension.direction !== 'sendrecv' &&\n\t\t\textendedExtension.direction !== 'recvonly'\n\t\t)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ext: RtpHeaderExtension =\n\t\t{\n\t\t\tkind             : extendedExtension.kind,\n\t\t\turi              : extendedExtension.uri,\n\t\t\tpreferredId      : extendedExtension.recvId,\n\t\t\tpreferredEncrypt : extendedExtension.encrypt,\n\t\t\tdirection        : extendedExtension.direction\n\t\t};\n\n\t\trtpCapabilities.headerExtensions!.push(ext);\n\t}\n\n\treturn rtpCapabilities;\n}\n\n/**\n * Generate RTP parameters of the given kind for sending media.\n * NOTE: mid, encodings and rtcp fields are left empty.\n */\nexport function getSendingRtpParameters(\n\tkind: MediaKind,\n\textendedRtpCapabilities: any\n): RtpParameters\n{\n\tconst rtpParameters: RtpParameters =\n\t{\n\t\tmid              : undefined,\n\t\tcodecs           : [],\n\t\theaderExtensions : [],\n\t\tencodings        : [],\n\t\trtcp             : {}\n\t};\n\n\tfor (const extendedCodec of extendedRtpCapabilities.codecs)\n\t{\n\t\tif (extendedCodec.kind !== kind)\n\t\t\tcontinue;\n\n\t\tconst codec: RtpCodecParameters =\n\t\t{\n\t\t\tmimeType     : extendedCodec.mimeType,\n\t\t\tpayloadType  : extendedCodec.localPayloadType,\n\t\t\tclockRate    : extendedCodec.clockRate,\n\t\t\tchannels     : extendedCodec.channels,\n\t\t\tparameters   : extendedCodec.localParameters,\n\t\t\trtcpFeedback : extendedCodec.rtcpFeedback\n\t\t};\n\n\t\trtpParameters.codecs.push(codec);\n\n\t\t// Add RTX codec.\n\t\tif (extendedCodec.localRtxPayloadType)\n\t\t{\n\t\t\tconst rtxCodec: RtpCodecParameters =\n\t\t\t{\n\t\t\t\tmimeType    : `${extendedCodec.kind}/rtx`,\n\t\t\t\tpayloadType : extendedCodec.localRtxPayloadType,\n\t\t\t\tclockRate   : extendedCodec.clockRate,\n\t\t\t\tparameters  :\n\t\t\t\t{\n\t\t\t\t\tapt : extendedCodec.localPayloadType\n\t\t\t\t},\n\t\t\t\trtcpFeedback : []\n\t\t\t};\n\n\t\t\trtpParameters.codecs.push(rtxCodec);\n\t\t}\n\t}\n\n\tfor (const extendedExtension of extendedRtpCapabilities.headerExtensions)\n\t{\n\t\t// Ignore RTP extensions of a different kind and those not valid for sending.\n\t\tif (\n\t\t\t(extendedExtension.kind && extendedExtension.kind !== kind) ||\n\t\t\t(\n\t\t\t\textendedExtension.direction !== 'sendrecv' &&\n\t\t\t\textendedExtension.direction !== 'sendonly'\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ext: RtpHeaderExtensionParameters =\n\t\t{\n\t\t\turi        : extendedExtension.uri,\n\t\t\tid         : extendedExtension.sendId,\n\t\t\tencrypt    : extendedExtension.encrypt,\n\t\t\tparameters : {}\n\t\t};\n\n\t\trtpParameters.headerExtensions!.push(ext);\n\t}\n\n\treturn rtpParameters;\n}\n\n/**\n * Generate RTP parameters of the given kind suitable for the remote SDP answer.\n */\nexport function getSendingRemoteRtpParameters(\n\tkind: MediaKind,\n\textendedRtpCapabilities: any\n): RtpParameters\n{\n\tconst rtpParameters: RtpParameters =\n\t{\n\t\tmid              : undefined,\n\t\tcodecs           : [],\n\t\theaderExtensions : [],\n\t\tencodings        : [],\n\t\trtcp             : {}\n\t};\n\n\tfor (const extendedCodec of extendedRtpCapabilities.codecs)\n\t{\n\t\tif (extendedCodec.kind !== kind)\n\t\t\tcontinue;\n\n\t\tconst codec =\n\t\t{\n\t\t\tmimeType     : extendedCodec.mimeType,\n\t\t\tpayloadType  : extendedCodec.localPayloadType,\n\t\t\tclockRate    : extendedCodec.clockRate,\n\t\t\tchannels     : extendedCodec.channels,\n\t\t\tparameters   : extendedCodec.remoteParameters,\n\t\t\trtcpFeedback : extendedCodec.rtcpFeedback\n\t\t};\n\n\t\trtpParameters.codecs.push(codec);\n\n\t\t// Add RTX codec.\n\t\tif (extendedCodec.localRtxPayloadType)\n\t\t{\n\t\t\tconst rtxCodec: RtpCodecParameters =\n\t\t\t{\n\t\t\t\tmimeType    : `${extendedCodec.kind}/rtx`,\n\t\t\t\tpayloadType : extendedCodec.localRtxPayloadType,\n\t\t\t\tclockRate   : extendedCodec.clockRate,\n\t\t\t\tparameters  :\n\t\t\t\t{\n\t\t\t\t\tapt : extendedCodec.localPayloadType\n\t\t\t\t},\n\t\t\t\trtcpFeedback : []\n\t\t\t};\n\n\t\t\trtpParameters.codecs.push(rtxCodec);\n\t\t}\n\t}\n\n\tfor (const extendedExtension of extendedRtpCapabilities.headerExtensions)\n\t{\n\t\t// Ignore RTP extensions of a different kind and those not valid for sending.\n\t\tif (\n\t\t\t(extendedExtension.kind && extendedExtension.kind !== kind) ||\n\t\t\t(\n\t\t\t\textendedExtension.direction !== 'sendrecv' &&\n\t\t\t\textendedExtension.direction !== 'sendonly'\n\t\t\t)\n\t\t)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst ext: RtpHeaderExtensionParameters =\n\t\t{\n\t\t\turi        : extendedExtension.uri,\n\t\t\tid         : extendedExtension.sendId,\n\t\t\tencrypt    : extendedExtension.encrypt,\n\t\t\tparameters : {}\n\n\t\t};\n\n\t\trtpParameters.headerExtensions!.push(ext);\n\t}\n\n\t// Reduce codecs' RTCP feedback. Use Transport-CC if available, REMB otherwise.\n\tif (\n\t\trtpParameters.headerExtensions!.some((ext) => (\n\t\t\text.uri === 'http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01'\n\t\t))\n\t)\n\t{\n\t\tfor (const codec of rtpParameters.codecs)\n\t\t{\n\t\t\tcodec.rtcpFeedback = (codec.rtcpFeedback || [])\n\t\t\t\t.filter((fb: RtcpFeedback) => fb.type !== 'goog-remb');\n\t\t}\n\t}\n\telse if (\n\t\trtpParameters.headerExtensions!.some((ext) => (\n\t\t\text.uri === 'http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time'\n\t\t))\n\t)\n\t{\n\t\tfor (const codec of rtpParameters.codecs)\n\t\t{\n\t\t\tcodec.rtcpFeedback = (codec.rtcpFeedback || [])\n\t\t\t\t.filter((fb) => fb.type !== 'transport-cc');\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (const codec of rtpParameters.codecs)\n\t\t{\n\t\t\tcodec.rtcpFeedback = (codec.rtcpFeedback || [])\n\t\t\t\t.filter((fb: RtcpFeedback) => (\n\t\t\t\t\tfb.type !== 'transport-cc' &&\n\t\t\t\t\tfb.type !== 'goog-remb'\n\t\t\t\t));\n\t\t}\n\t}\n\n\treturn rtpParameters;\n}\n\n/**\n * Reduce given codecs by returning an array of codecs \"compatible\" with the\n * given capability codec. If no capability codec is given, take the first\n * one(s).\n *\n * Given codecs must be generated by ortc.getSendingRtpParameters() or\n * ortc.getSendingRemoteRtpParameters().\n *\n * The returned array of codecs also include a RTX codec if available.\n */\nexport function reduceCodecs(\n\tcodecs: RtpCodecParameters[],\n\tcapCodec?: RtpCodecCapability\n): RtpCodecParameters[]\n{\n\tconst filteredCodecs: RtpCodecParameters[] = [];\n\n\t// If no capability codec is given, take the first one (and RTX).\n\tif (!capCodec)\n\t{\n\t\tfilteredCodecs.push(codecs[0]);\n\n\t\tif (isRtxCodec(codecs[1]))\n\t\t\tfilteredCodecs.push(codecs[1]);\n\t}\n\t// Otherwise look for a compatible set of codecs.\n\telse\n\t{\n\t\tfor (let idx = 0; idx < codecs.length; ++idx)\n\t\t{\n\t\t\tif (matchCodecs(codecs[idx], capCodec))\n\t\t\t{\n\t\t\t\tfilteredCodecs.push(codecs[idx]);\n\n\t\t\t\tif (isRtxCodec(codecs[idx + 1]))\n\t\t\t\t\tfilteredCodecs.push(codecs[idx + 1]);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (filteredCodecs.length === 0)\n\t\t\tthrow new TypeError('no matching codec found');\n\t}\n\n\treturn filteredCodecs;\n}\n\n/**\n * Create RTP parameters for a Consumer for the RTP probator.\n */\nexport function generateProbatorRtpParameters(\n\tvideoRtpParameters: RtpParameters\n): RtpParameters\n{\n\t// Clone given reference video RTP parameters.\n\tvideoRtpParameters = utils.clone(videoRtpParameters, {}) as RtpParameters;\n\n\t// This may throw.\n\tvalidateRtpParameters(videoRtpParameters);\n\n\tconst rtpParameters: RtpParameters =\n\t{\n\t\tmid              : RTP_PROBATOR_MID,\n\t\tcodecs           : [],\n\t\theaderExtensions : [],\n\t\tencodings        : [ { ssrc: RTP_PROBATOR_SSRC } ],\n\t\trtcp             : { cname: 'probator' }\n\t};\n\n\trtpParameters.codecs.push(videoRtpParameters.codecs[0]);\n\trtpParameters.codecs[0].payloadType = RTP_PROBATOR_CODEC_PAYLOAD_TYPE;\n\trtpParameters.headerExtensions = videoRtpParameters.headerExtensions;\n\n\treturn rtpParameters;\n}\n\n/**\n * Whether media can be sent based on the given RTP capabilities.\n */\nexport function canSend(kind: MediaKind, extendedRtpCapabilities: any): boolean\n{\n\treturn extendedRtpCapabilities.codecs.\n\t\tsome((codec: any) => codec.kind === kind);\n}\n\n/**\n * Whether the given RTP parameters can be received with the given RTP\n * capabilities.\n */\nexport function canReceive(\n\trtpParameters: RtpParameters,\n\textendedRtpCapabilities: any\n): boolean\n{\n\t// This may throw.\n\tvalidateRtpParameters(rtpParameters);\n\n\tif (rtpParameters.codecs.length === 0)\n\t\treturn false;\n\n\tconst firstMediaCodec = rtpParameters.codecs[0];\n\n\treturn extendedRtpCapabilities.codecs\n\t\t.some((codec: any) => codec.remotePayloadType === firstMediaCodec.payloadType);\n}\n\nfunction isRtxCodec(codec?: RtpCodecCapability | RtpCodecParameters): boolean\n{\n\tif (!codec)\n\t\treturn false;\n\n\treturn /.+\\/rtx$/i.test(codec.mimeType);\n}\n\nfunction matchCodecs(\n\taCodec: RtpCodecCapability | RtpCodecParameters,\n\tbCodec: RtpCodecCapability | RtpCodecParameters,\n\t{ strict = false, modify = false } = {}\n): boolean\n{\n\tconst aMimeType = aCodec.mimeType.toLowerCase();\n\tconst bMimeType = bCodec.mimeType.toLowerCase();\n\n\tif (aMimeType !== bMimeType)\n\t\treturn false;\n\n\tif (aCodec.clockRate !== bCodec.clockRate)\n\t\treturn false;\n\n\tif (aCodec.channels !== bCodec.channels)\n\t\treturn false;\n\n\t// Per codec special checks.\n\tswitch (aMimeType)\n\t{\n\t\tcase 'video/h264':\n\t\t{\n\t\t\tconst aPacketizationMode = aCodec.parameters['packetization-mode'] || 0;\n\t\t\tconst bPacketizationMode = bCodec.parameters['packetization-mode'] || 0;\n\n\t\t\tif (aPacketizationMode !== bPacketizationMode)\n\t\t\t\treturn false;\n\n\t\t\t// If strict matching check profile-level-id.\n\t\t\tif (strict)\n\t\t\t{\n\t\t\t\tif (!h264.isSameProfile(aCodec.parameters, bCodec.parameters))\n\t\t\t\t\treturn false;\n\n\t\t\t\tlet selectedProfileLevelId;\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tselectedProfileLevelId =\n\t\t\t\t\t\th264.generateProfileLevelIdForAnswer(aCodec.parameters, bCodec.parameters);\n\t\t\t\t}\n\t\t\t\tcatch (error)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (modify)\n\t\t\t\t{\n\t\t\t\t\tif (selectedProfileLevelId)\n\t\t\t\t\t{\n\t\t\t\t\t\taCodec.parameters['profile-level-id'] = selectedProfileLevelId;\n\t\t\t\t\t\tbCodec.parameters['profile-level-id'] = selectedProfileLevelId;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdelete aCodec.parameters['profile-level-id'];\n\t\t\t\t\t\tdelete bCodec.parameters['profile-level-id'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase 'video/vp9':\n\t\t{\n\t\t\t// If strict matching check profile-id.\n\t\t\tif (strict)\n\t\t\t{\n\t\t\t\tconst aProfileId = aCodec.parameters['profile-id'] || 0;\n\t\t\t\tconst bProfileId = bCodec.parameters['profile-id'] || 0;\n\n\t\t\t\tif (aProfileId !== bProfileId)\n\t\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction matchHeaderExtensions(\n\taExt: RtpHeaderExtension,\n\tbExt: RtpHeaderExtension\n): boolean\n{\n\tif (aExt.kind && bExt.kind && aExt.kind !== bExt.kind)\n\t\treturn false;\n\n\tif (aExt.uri !== bExt.uri)\n\t\treturn false;\n\n\treturn true;\n}\n\nfunction reduceRtcpFeedback(\n\tcodecA: RtpCodecCapability | RtpCodecParameters,\n\tcodecB: RtpCodecCapability | RtpCodecParameters\n): RtcpFeedback[]\n{\n\tconst reducedRtcpFeedback: RtcpFeedback[] = [];\n\n\tfor (const aFb of codecA.rtcpFeedback || [])\n\t{\n\t\tconst matchingBFb = (codecB.rtcpFeedback || [])\n\t\t\t.find((bFb: RtcpFeedback) => (\n\t\t\t\tbFb.type === aFb.type &&\n\t\t\t\t(bFb.parameter === aFb.parameter || (!bFb.parameter && !aFb.parameter))\n\t\t\t));\n\n\t\tif (matchingBFb)\n\t\t\treducedRtcpFeedback.push(matchingBFb);\n\t}\n\n\treturn reducedRtcpFeedback;\n}\n"]}