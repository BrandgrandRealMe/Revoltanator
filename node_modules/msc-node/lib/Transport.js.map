{"version":3,"file":"Transport.js","sourceRoot":"","sources":["../src/Transport.ts"],"names":[],"mappings":"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","sourcesContent":["import { AwaitQueue } from 'awaitqueue';\nimport { Logger } from './Logger';\nimport { EnhancedEventEmitter } from './EnhancedEventEmitter';\nimport { UnsupportedError, InvalidStateError } from './errors';\nimport * as utils from './utils';\nimport * as ortc from './ortc';\nimport { HandlerFactory, HandlerInterface } from './handlers/HandlerInterface';\nimport { Producer, ProducerOptions } from './Producer';\nimport { Consumer, ConsumerOptions } from './Consumer';\nimport { DataProducer, DataProducerOptions } from './DataProducer';\nimport { DataConsumer, DataConsumerOptions } from './DataConsumer';\nimport { SctpParameters } from './SctpParameters';\nimport { MediaStreamTrack, RTCPeerConnection } from 'werift';\n\ninterface InternalTransportOptions extends TransportOptions\n{\n\tdirection: 'send' | 'recv';\n\thandlerFactory: HandlerFactory;\n\textendedRtpCapabilities: any;\n\tcanProduceByKind: CanProduceByKind;\n}\n\nexport type TransportOptions =\n{\n\tid: string;\n\ticeParameters: IceParameters;\n\ticeCandidates: IceCandidate[];\n\tdtlsParameters: DtlsParameters;\n\tsctpParameters?: SctpParameters;\n\ticeServers?: RTCIceServer[];\n\ticeTransportPolicy?: RTCIceTransportPolicy;\n\tadditionalSettings?: any;\n\tproprietaryConstraints?: any;\n\tappData?: any;\n}\n\nexport type CanProduceByKind =\n{\n\taudio: boolean;\n\tvideo: boolean;\n\t[key: string]: boolean;\n}\n\nexport type IceParameters =\n{\n\t/**\n\t * ICE username fragment.\n\t * */\n\tusernameFragment: string;\n\t/**\n\t * ICE password.\n\t */\n\tpassword: string;\n\t/**\n\t * ICE Lite.\n\t */\n\ticeLite?: boolean;\n}\n\nexport type IceCandidate =\n{\n\t/**\n\t * Unique identifier that allows ICE to correlate candidates that appear on\n\t * multiple transports.\n\t */\n\tfoundation: string;\n\t/**\n\t * The assigned priority of the candidate.\n\t */\n\tpriority: number;\n\t/**\n\t * The IP address of the candidate.\n\t */\n\tip: string;\n\t/**\n\t * The protocol of the candidate.\n\t */\n\tprotocol: 'udp' | 'tcp';\n\t/**\n\t * The port for the candidate.\n\t */\n\tport: number;\n\t/**\n\t * The type of candidate..\n\t */\n\ttype: 'host' | 'srflx' | 'prflx' | 'relay';\n\t/**\n\t * The type of TCP candidate.\n\t */\n\ttcpType: 'active' | 'passive' | 'so';\n}\n\nexport type DtlsParameters =\n{\n\t/**\n\t * DTLS role. Default 'auto'.\n\t */\n\trole?: DtlsRole;\n\t/**\n\t * DTLS fingerprints.\n\t */\n\tfingerprints: DtlsFingerprint[];\n}\n\n/**\n * The hash function algorithm (as defined in the \"Hash function Textual Names\"\n * registry initially specified in RFC 4572 Section 8) and its corresponding\n * certificate fingerprint value (in lowercase hex string as expressed utilizing\n * the syntax of \"fingerprint\" in RFC 4572 Section 5).\n */\nexport type DtlsFingerprint =\n{\n\talgorithm: string;\n\tvalue: string;\n}\n\nexport type DtlsRole = 'auto' | 'client' | 'server';\n\nexport type ConnectionState =\n\t| 'new'\n\t| 'connecting'\n\t| 'connected'\n\t| 'failed'\n\t| 'disconnected'\n\t| 'closed';\n\nexport type PlainRtpParameters =\n{\n\tip: string;\n\tipVersion: 4 | 6;\n\tport: number;\n};\n\nconst logger = new Logger('Transport');\n\nexport class Transport extends EnhancedEventEmitter\n{\n\tpc:RTCPeerConnection;\n\t// Id.\n\tprivate readonly _id: string;\n\t// Closed flag.\n\tprivate _closed = false;\n\t// Direction.\n\tprivate readonly _direction: 'send' | 'recv';\n\t// Extended RTP capabilities.\n\tprivate readonly _extendedRtpCapabilities: any;\n\t// Whether we can produce audio/video based on computed extended RTP\n\t// capabilities.\n\tprivate readonly _canProduceByKind: CanProduceByKind;\n\t// SCTP max message size if enabled, null otherwise.\n\tprivate readonly _maxSctpMessageSize?: number | null;\n\t// RTC handler isntance.\n\tprivate readonly _handler: HandlerInterface;\n\t// Transport connection state.\n\tprivate _connectionState: ConnectionState = 'new';\n\t// App custom data.\n\tprivate readonly _appData: any;\n\t// Map of Producers indexed by id.\n\tprivate readonly _producers: Map<string, Producer> = new Map();\n\t// Map of Consumers indexed by id.\n\tprivate readonly _consumers: Map<string, Consumer> = new Map();\n\t// Map of DataProducers indexed by id.\n\tprivate readonly _dataProducers: Map<string, DataProducer> = new Map();\n\t// Map of DataConsumers indexed by id.\n\tprivate readonly _dataConsumers: Map<string, DataConsumer> = new Map();\n\t// Whether the Consumer for RTP probation has been created.\n\tprivate _probatorConsumerCreated = false;\n\t// AwaitQueue instance to make async tasks happen sequentially.\n\tprivate readonly _awaitQueue = new AwaitQueue({ ClosedErrorClass: InvalidStateError });\n\t// Observer instance.\n\tprotected readonly _observer = new EnhancedEventEmitter();\n\n\t/**\n\t * @emits connect - (transportLocalParameters: any, callback: Function, errback: Function)\n\t * @emits connectionstatechange - (connectionState: ConnectionState)\n\t * @emits produce - (producerLocalParameters: any, callback: Function, errback: Function)\n\t * @emits producedata - (dataProducerLocalParameters: any, callback: Function, errback: Function)\n\t */\n\tconstructor(\n\t\t{\n\t\t\tdirection,\n\t\t\tid,\n\t\t\ticeParameters,\n\t\t\ticeCandidates,\n\t\t\tdtlsParameters,\n\t\t\tsctpParameters,\n\t\t\ticeServers,\n\t\t\ticeTransportPolicy,\n\t\t\tadditionalSettings,\n\t\t\tproprietaryConstraints,\n\t\t\tappData,\n\t\t\thandlerFactory,\n\t\t\textendedRtpCapabilities,\n\t\t\tcanProduceByKind\n\t\t}: InternalTransportOptions\n\t)\n\t{\n\t\tsuper();\n\n\t\tlogger.debug('constructor() [id:%s, direction:%s]', id, direction);\n\n\t\tthis._id = id;\n\t\tthis._direction = direction;\n\t\tthis._extendedRtpCapabilities = extendedRtpCapabilities;\n\t\tthis._canProduceByKind = canProduceByKind;\n\t\tthis._maxSctpMessageSize =\n\t\t\tsctpParameters ? sctpParameters.maxMessageSize : null;\n\n\t\t// Clone and sanitize additionalSettings.\n\t\tadditionalSettings = utils.clone(additionalSettings, {});\n\n\t\tdelete additionalSettings.iceServers;\n\t\tdelete additionalSettings.iceTransportPolicy;\n\t\tdelete additionalSettings.bundlePolicy;\n\t\tdelete additionalSettings.rtcpMuxPolicy;\n\t\tdelete additionalSettings.sdpSemantics;\n\n\t\tthis._handler = handlerFactory();\n\n\t\tthis._handler.run(\n\t\t\t{\n\t\t\t\tdirection,\n\t\t\t\ticeParameters,\n\t\t\t\ticeCandidates,\n\t\t\t\tdtlsParameters,\n\t\t\t\tsctpParameters,\n\t\t\t\ticeServers,\n\t\t\t\ticeTransportPolicy,\n\t\t\t\tadditionalSettings,\n\t\t\t\tproprietaryConstraints,\n\t\t\t\textendedRtpCapabilities\n\t\t\t});\n\n\t\tthis._appData = appData;\n\t\t// @ts-expect-error\n\t\tthis.pc = this._handler._pc;\n\t\tthis._handleHandler();\n\t}\n\n\t/**\n\t * Transport id.\n\t */\n\tget id(): string\n\t{\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Whether the Transport is closed.\n\t */\n\tget closed(): boolean\n\t{\n\t\treturn this._closed;\n\t}\n\n\t/**\n\t * Transport direction.\n\t */\n\tget direction(): 'send' | 'recv'\n\t{\n\t\treturn this._direction;\n\t}\n\n\t/**\n\t * RTC handler instance.\n\t */\n\tget handler(): HandlerInterface\n\t{\n\t\treturn this._handler;\n\t}\n\n\t/**\n\t * Connection state.\n\t */\n\tget connectionState(): ConnectionState\n\t{\n\t\treturn this._connectionState;\n\t}\n\n\t/**\n\t * App custom data.\n\t */\n\tget appData(): any\n\t{\n\t\treturn this._appData;\n\t}\n\n\t/**\n\t * Invalid setter.\n\t */\n\tset appData(appData: any) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new Error('cannot override appData object');\n\t}\n\n\t/**\n\t * Observer.\n\t *\n\t * @emits close\n\t * @emits newproducer - (producer: Producer)\n\t * @emits newconsumer - (producer: Producer)\n\t * @emits newdataproducer - (dataProducer: DataProducer)\n\t * @emits newdataconsumer - (dataProducer: DataProducer)\n\t */\n\tget observer(): EnhancedEventEmitter\n\t{\n\t\treturn this._observer;\n\t}\n\n\t/**\n\t * Close the Transport.\n\t */\n\tclose(): void\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\tthis._closed = true;\n\n\t\t// Close the AwaitQueue.\n\t\tthis._awaitQueue.close();\n\n\t\t// Close the handler.\n\t\tthis._handler.close();\n\n\t\t// Close all Producers.\n\t\tfor (const producer of this._producers.values())\n\t\t{\n\t\t\tproducer.transportClosed();\n\t\t}\n\t\tthis._producers.clear();\n\n\t\t// Close all Consumers.\n\t\tfor (const consumer of this._consumers.values())\n\t\t{\n\t\t\tconsumer.transportClosed();\n\t\t}\n\t\tthis._consumers.clear();\n\n\t\t// Close all DataProducers.\n\t\tfor (const dataProducer of this._dataProducers.values())\n\t\t{\n\t\t\tdataProducer.transportClosed();\n\t\t}\n\t\tthis._dataProducers.clear();\n\n\t\t// Close all DataConsumers.\n\t\tfor (const dataConsumer of this._dataConsumers.values())\n\t\t{\n\t\t\tdataConsumer.transportClosed();\n\t\t}\n\t\tthis._dataConsumers.clear();\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('close');\n\t}\n\n\t/**\n\t * Get associated Transport (RTCPeerConnection) stats.\n\t *\n\t * @returns {RTCStatsReport}\n\t */\n\tasync getStats(): Promise<RTCStatsReport>\n\t{\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\n\t\treturn this._handler.getTransportStats();\n\t}\n\n\t/**\n\t * Restart ICE connection.\n\t */\n\tasync restartIce(\n\t\t{ iceParameters }:\n\t\t{ iceParameters: IceParameters }\n\t): Promise<void>\n\t{\n\t\tlogger.debug('restartIce()');\n\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (!iceParameters)\n\t\t\tthrow new TypeError('missing iceParameters');\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () => this._handler.restartIce(iceParameters),\n\t\t\t'transport.restartIce()');\n\t}\n\n\t/**\n\t * Update ICE servers.\n\t */\n\tasync updateIceServers(\n\t\t{ iceServers }:\n\t\t{ iceServers?: RTCIceServer[] } = {}\n\t): Promise<void>\n\t{\n\t\tlogger.debug('updateIceServers()');\n\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (!Array.isArray(iceServers))\n\t\t\tthrow new TypeError('missing iceServers');\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () => this._handler.updateIceServers(iceServers),\n\t\t\t'transport.updateIceServers()');\n\t}\n\n\t/**\n\t * Create a Producer.\n\t */\n\tasync produce(\n\t\t{\n\t\t\ttrack,\n\t\t\tencodings,\n\t\t\tcodecOptions,\n\t\t\tcodec,\n\t\t\tstopTracks = true,\n\t\t\tdisableTrackOnPause = true,\n\t\t\tzeroRtpOnPause = false,\n\t\t\tappData = {}\n\t\t}: ProducerOptions = {}\n\t): Promise<Producer>\n\t{\n\t\tlogger.debug('produce() [track:%o]', track);\n\n\t\tif (!track)\n\t\t\tthrow new TypeError('missing track');\n\t\telse if (this._direction !== 'send')\n\t\t\tthrow new UnsupportedError('not a sending Transport');\n\t\telse if (!this._canProduceByKind[track.kind])\n\t\t\tthrow new UnsupportedError(`cannot produce ${track.kind}`);\n\t\telse if (track.readyState === 'ended')\n\t\t\tthrow new InvalidStateError('track ended');\n\t\telse if (this.listenerCount('connect') === 0 && this._connectionState === 'new')\n\t\t\tthrow new TypeError('no \"connect\" listener set into this transport');\n\t\telse if (this.listenerCount('produce') === 0)\n\t\t\tthrow new TypeError('no \"produce\" listener set into this transport');\n\t\telse if (appData && typeof appData !== 'object')\n\t\t\tthrow new TypeError('if given, appData must be an object');\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () =>\n\t\t\t{\n\t\t\t\tlet normalizedEncodings;\n\n\t\t\t\tif (encodings && !Array.isArray(encodings))\n\t\t\t\t{\n\t\t\t\t\tthrow TypeError('encodings must be an array');\n\t\t\t\t}\n\t\t\t\telse if (encodings && encodings.length === 0)\n\t\t\t\t{\n\t\t\t\t\tnormalizedEncodings = undefined;\n\t\t\t\t}\n\t\t\t\telse if (encodings)\n\t\t\t\t{\n\t\t\t\t\tnormalizedEncodings = encodings\n\t\t\t\t\t\t.map((encoding: any) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst normalizedEncoding: any = { active: true };\n\n\t\t\t\t\t\t\tif (encoding.active === false)\n\t\t\t\t\t\t\t\tnormalizedEncoding.active = false;\n\t\t\t\t\t\t\tif (typeof encoding.dtx === 'boolean')\n\t\t\t\t\t\t\t\tnormalizedEncoding.dtx = encoding.dtx;\n\t\t\t\t\t\t\tif (typeof encoding.scalabilityMode === 'string')\n\t\t\t\t\t\t\t\tnormalizedEncoding.scalabilityMode = encoding.scalabilityMode;\n\t\t\t\t\t\t\tif (typeof encoding.scaleResolutionDownBy === 'number')\n\t\t\t\t\t\t\t\tnormalizedEncoding.scaleResolutionDownBy = encoding.scaleResolutionDownBy;\n\t\t\t\t\t\t\tif (typeof encoding.maxBitrate === 'number')\n\t\t\t\t\t\t\t\tnormalizedEncoding.maxBitrate = encoding.maxBitrate;\n\t\t\t\t\t\t\tif (typeof encoding.maxFramerate === 'number')\n\t\t\t\t\t\t\t\tnormalizedEncoding.maxFramerate = encoding.maxFramerate;\n\t\t\t\t\t\t\tif (typeof encoding.adaptivePtime === 'boolean')\n\t\t\t\t\t\t\t\tnormalizedEncoding.adaptivePtime = encoding.adaptivePtime;\n\t\t\t\t\t\t\tif (typeof encoding.priority === 'string')\n\t\t\t\t\t\t\t\tnormalizedEncoding.priority = encoding.priority;\n\t\t\t\t\t\t\tif (typeof encoding.networkPriority === 'string')\n\t\t\t\t\t\t\t\tnormalizedEncoding.networkPriority = encoding.networkPriority;\n\n\t\t\t\t\t\t\treturn normalizedEncoding;\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst { localId, rtpParameters, rtpSender } = await this._handler.send(\n\t\t\t\t\t{\n\t\t\t\t\t\ttrack,\n\t\t\t\t\t\tencodings : normalizedEncodings,\n\t\t\t\t\t\tcodecOptions,\n\t\t\t\t\t\tcodec\n\t\t\t\t\t});\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// This will fill rtpParameters's missing fields with default values.\n\t\t\t\t\tortc.validateRtpParameters(rtpParameters);\n\n\t\t\t\t\tconst { id } = await this.safeEmitAsPromise(\n\t\t\t\t\t\t'produce',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind : track.kind,\n\t\t\t\t\t\t\trtpParameters,\n\t\t\t\t\t\t\tappData\n\t\t\t\t\t\t});\n\n\t\t\t\t\tconst producer = new Producer(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tlocalId,\n\t\t\t\t\t\t\trtpSender,\n\t\t\t\t\t\t\ttrack,\n\t\t\t\t\t\t\trtpParameters,\n\t\t\t\t\t\t\tstopTracks,\n\t\t\t\t\t\t\tdisableTrackOnPause,\n\t\t\t\t\t\t\tzeroRtpOnPause,\n\t\t\t\t\t\t\tappData\n\t\t\t\t\t\t});\n\n\t\t\t\t\tthis._producers.set(producer.id, producer);\n\t\t\t\t\tthis._handleProducer(producer);\n\n\t\t\t\t\t// Emit observer event.\n\t\t\t\t\tthis._observer.safeEmit('newproducer', producer);\n\n\t\t\t\t\treturn producer;\n\t\t\t\t}\n\t\t\t\tcatch (error)\n\t\t\t\t{\n\t\t\t\t\tthis._handler.stopSending(localId)\n\t\t\t\t\t\t.catch(() => {});\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t},\n\t\t\t'transport.produce()')\n\t\t\t// This catch is needed to stop the given track if the command above\n\t\t\t// failed due to closed Transport.\n\t\t\t.catch((error: Error) =>\n\t\t\t{\n\t\t\t\tif (stopTracks)\n\t\t\t\t{\n\t\t\t\t\ttry { track.stop(); }\n\t\t\t\t\tcatch (error2) {}\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t});\n\t}\n\n\t/**\n\t * Create a Consumer to consume a remote Producer.\n\t */\n\tasync consume(\n\t\t{\n\t\t\tid,\n\t\t\tproducerId,\n\t\t\tkind,\n\t\t\trtpParameters,\n\t\t\tappData = {}\n\t\t}: ConsumerOptions\n\t): Promise<Consumer>\n\t{\n\t\tlogger.debug('consume()');\n\n\t\trtpParameters = utils.clone(rtpParameters, undefined);\n\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (this._direction !== 'recv')\n\t\t\tthrow new UnsupportedError('not a receiving Transport');\n\t\telse if (typeof id !== 'string')\n\t\t\tthrow new TypeError('missing id');\n\t\telse if (typeof producerId !== 'string')\n\t\t\tthrow new TypeError('missing producerId');\n\t\telse if (kind !== 'audio' && kind !== 'video')\n\t\t\tthrow new TypeError(`invalid kind '${kind}'`);\n\t\telse if (this.listenerCount('connect') === 0 && this._connectionState === 'new')\n\t\t\tthrow new TypeError('no \"connect\" listener set into this transport');\n\t\telse if (appData && typeof appData !== 'object')\n\t\t\tthrow new TypeError('if given, appData must be an object');\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () =>\n\t\t\t{\n\t\t\t\t// Ensure the device can consume it.\n\t\t\t\tconst canConsume = ortc.canReceive(\n\t\t\t\t\trtpParameters, this._extendedRtpCapabilities);\n\n\t\t\t\tif (!canConsume)\n\t\t\t\t\tthrow new UnsupportedError('cannot consume this Producer');\n\n\t\t\t\tconst { localId, rtpReceiver, track } =\n\t\t\t\t\tawait this._handler.receive({ trackId: id, kind, rtpParameters });\n\n\t\t\t\tconst consumer = new Consumer(\n\t\t\t\t\t{\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tlocalId,\n\t\t\t\t\t\tproducerId,\n\t\t\t\t\t\trtpReceiver,\n\t\t\t\t\t\ttrack : track as unknown as MediaStreamTrack,\n\t\t\t\t\t\trtpParameters,\n\t\t\t\t\t\tappData\n\t\t\t\t\t});\n\n\t\t\t\tthis._consumers.set(consumer.id, consumer);\n\t\t\t\tthis._handleConsumer(consumer);\n\n\t\t\t\t// If this is the first video Consumer and the Consumer for RTP probation\n\t\t\t\t// has not yet been created, create it now.\n\t\t\t\tif (!this._probatorConsumerCreated && kind === 'video')\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tconst probatorRtpParameters =\n\t\t\t\t\t\t\tortc.generateProbatorRtpParameters(consumer.rtpParameters);\n\n\t\t\t\t\t\tawait this._handler.receive(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttrackId       : 'probator',\n\t\t\t\t\t\t\t\tkind          : 'video',\n\t\t\t\t\t\t\t\trtpParameters : probatorRtpParameters\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tlogger.debug('consume() | Consumer for RTP probation created');\n\n\t\t\t\t\t\tthis._probatorConsumerCreated = true;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (error)\n\t\t\t\t\t{\n\t\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t\t'consume() | failed to create Consumer for RTP probation:%o',\n\t\t\t\t\t\t\terror);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Emit observer event.\n\t\t\t\tthis._observer.safeEmit('newconsumer', consumer);\n\n\t\t\t\treturn consumer;\n\t\t\t},\n\t\t\t'transport.consume()');\n\t}\n\n\t/**\n\t * Create a DataProducer\n\t */\n\tasync produceData(\n\t\t{\n\t\t\tordered = true,\n\t\t\tmaxPacketLifeTime,\n\t\t\tmaxRetransmits,\n\t\t\tpriority = 'low',\n\t\t\tlabel = '',\n\t\t\tprotocol = '',\n\t\t\tappData = {}\n\t\t}: DataProducerOptions = {}\n\t): Promise<DataProducer>\n\t{\n\t\tlogger.debug('produceData()');\n\n\t\tif (this._direction !== 'send')\n\t\t\tthrow new UnsupportedError('not a sending Transport');\n\t\telse if (!this._maxSctpMessageSize)\n\t\t\tthrow new UnsupportedError('SCTP not enabled by remote Transport');\n\t\telse if (![ 'very-low', 'low', 'medium', 'high' ].includes(priority))\n\t\t\tthrow new TypeError('wrong priority');\n\t\telse if (this.listenerCount('connect') === 0 && this._connectionState === 'new')\n\t\t\tthrow new TypeError('no \"connect\" listener set into this transport');\n\t\telse if (this.listenerCount('producedata') === 0)\n\t\t\tthrow new TypeError('no \"producedata\" listener set into this transport');\n\t\telse if (appData && typeof appData !== 'object')\n\t\t\tthrow new TypeError('if given, appData must be an object');\n\n\t\tif (maxPacketLifeTime || maxRetransmits)\n\t\t\tordered = false;\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () =>\n\t\t\t{\n\t\t\t\tconst {\n\t\t\t\t\tdataChannel,\n\t\t\t\t\tsctpStreamParameters\n\t\t\t\t} = await this._handler.sendDataChannel(\n\t\t\t\t\t{\n\t\t\t\t\t\tordered,\n\t\t\t\t\t\tmaxPacketLifeTime,\n\t\t\t\t\t\tmaxRetransmits,\n\t\t\t\t\t\tpriority,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\tprotocol\n\t\t\t\t\t});\n\n\t\t\t\t// This will fill sctpStreamParameters's missing fields with default values.\n\t\t\t\tortc.validateSctpStreamParameters(sctpStreamParameters);\n\n\t\t\t\tconst { id } = await this.safeEmitAsPromise(\n\t\t\t\t\t'producedata',\n\t\t\t\t\t{\n\t\t\t\t\t\tsctpStreamParameters,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\tprotocol,\n\t\t\t\t\t\tappData\n\t\t\t\t\t});\n\n\t\t\t\tconst dataProducer =\n\t\t\t\t\tnew DataProducer({ id, dataChannel, sctpStreamParameters, appData });\n\n\t\t\t\tthis._dataProducers.set(dataProducer.id, dataProducer);\n\t\t\t\tthis._handleDataProducer(dataProducer);\n\n\t\t\t\t// Emit observer event.\n\t\t\t\tthis._observer.safeEmit('newdataproducer', dataProducer);\n\n\t\t\t\treturn dataProducer;\n\t\t\t},\n\t\t\t'transport.produceData()');\n\t}\n\n\t/**\n\t * Create a DataConsumer\n\t */\n\tasync consumeData(\n\t\t{\n\t\t\tid,\n\t\t\tdataProducerId,\n\t\t\tsctpStreamParameters,\n\t\t\tlabel = '',\n\t\t\tprotocol = '',\n\t\t\tappData = {}\n\t\t}: DataConsumerOptions\n\t): Promise<DataConsumer>\n\t{\n\t\tlogger.debug('consumeData()');\n\n\t\tsctpStreamParameters = utils.clone(sctpStreamParameters, undefined);\n\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\t\telse if (this._direction !== 'recv')\n\t\t\tthrow new UnsupportedError('not a receiving Transport');\n\t\telse if (!this._maxSctpMessageSize)\n\t\t\tthrow new UnsupportedError('SCTP not enabled by remote Transport');\n\t\telse if (typeof id !== 'string')\n\t\t\tthrow new TypeError('missing id');\n\t\telse if (typeof dataProducerId !== 'string')\n\t\t\tthrow new TypeError('missing dataProducerId');\n\t\telse if (this.listenerCount('connect') === 0 && this._connectionState === 'new')\n\t\t\tthrow new TypeError('no \"connect\" listener set into this transport');\n\t\telse if (appData && typeof appData !== 'object')\n\t\t\tthrow new TypeError('if given, appData must be an object');\n\n\t\t// This may throw.\n\t\tortc.validateSctpStreamParameters(sctpStreamParameters);\n\n\t\t// Enqueue command.\n\t\treturn this._awaitQueue.push(\n\t\t\tasync () =>\n\t\t\t{\n\t\t\t\tconst {\n\t\t\t\t\tdataChannel\n\t\t\t\t} = await this._handler.receiveDataChannel(\n\t\t\t\t\t{\n\t\t\t\t\t\tsctpStreamParameters,\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\tprotocol\n\t\t\t\t\t});\n\n\t\t\t\tconst dataConsumer = new DataConsumer(\n\t\t\t\t\t{\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tdataProducerId,\n\t\t\t\t\t\tdataChannel,\n\t\t\t\t\t\tsctpStreamParameters,\n\t\t\t\t\t\tappData\n\t\t\t\t\t});\n\n\t\t\t\tthis._dataConsumers.set(dataConsumer.id, dataConsumer);\n\t\t\t\tthis._handleDataConsumer(dataConsumer);\n\n\t\t\t\t// Emit observer event.\n\t\t\t\tthis._observer.safeEmit('newdataconsumer', dataConsumer);\n\n\t\t\t\treturn dataConsumer;\n\t\t\t},\n\t\t\t'transport.consumeData()');\n\t}\n\n\t_handleHandler(): void\n\t{\n\t\tconst handler = this._handler;\n\n\t\thandler.on('@connect', (\n\t\t\t{ dtlsParameters }: { dtlsParameters: DtlsParameters },\n\t\t\tcallback: Function,\n\t\t\terrback: Function\n\t\t) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t{\n\t\t\t\terrback(new InvalidStateError('closed'));\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.safeEmit('connect', { dtlsParameters }, callback, errback);\n\t\t});\n\n\t\thandler.on('@connectionstatechange', (connectionState: ConnectionState) =>\n\t\t{\n\t\t\tif (connectionState === this._connectionState)\n\t\t\t\treturn;\n\n\t\t\tlogger.debug('connection state changed to %s', connectionState);\n\n\t\t\tthis._connectionState = connectionState;\n\n\t\t\tif (!this._closed)\n\t\t\t\tthis.safeEmit('connectionstatechange', connectionState);\n\t\t});\n\t}\n\n\t_handleProducer(producer: Producer): void\n\t{\n\t\tproducer.on('@close', () =>\n\t\t{\n\t\t\tthis._producers.delete(producer.id);\n\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tthis._awaitQueue.push(\n\t\t\t\tasync () => this._handler.stopSending(producer.localId),\n\t\t\t\t'producer @close event')\n\t\t\t\t.catch((error: Error) => logger.warn('producer.close() failed:%o', error));\n\t\t});\n\n\t\tproducer.on('@replacetrack', (track, callback, errback) =>\n\t\t{\n\t\t\tthis._awaitQueue.push(\n\t\t\t\tasync () => this._handler.replaceTrack(producer.localId, track),\n\t\t\t\t'producer @replacetrack event')\n\t\t\t\t.then(callback)\n\t\t\t\t.catch(errback);\n\t\t});\n\n\t\tproducer.on('@setmaxspatiallayer', (spatialLayer, callback, errback) =>\n\t\t{\n\t\t\tthis._awaitQueue.push(\n\t\t\t\tasync () => (\n\t\t\t\t\tthis._handler.setMaxSpatialLayer(producer.localId, spatialLayer)\n\t\t\t\t), 'producer @setmaxspatiallayer event')\n\t\t\t\t.then(callback)\n\t\t\t\t.catch(errback);\n\t\t});\n\n\t\tproducer.on('@setrtpencodingparameters', (params, callback, errback) =>\n\t\t{\n\t\t\tthis._awaitQueue.push(\n\t\t\t\tasync () => (\n\t\t\t\t\tthis._handler.setRtpEncodingParameters(producer.localId, params)\n\t\t\t\t), 'producer @setrtpencodingparameters event')\n\t\t\t\t.then(callback)\n\t\t\t\t.catch(errback);\n\t\t});\n\n\t\tproducer.on('@getstats', (callback, errback) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn errback(new InvalidStateError('closed'));\n\n\t\t\tthis._handler.getSenderStats(producer.localId)\n\t\t\t\t.then(callback)\n\t\t\t\t.catch(errback);\n\t\t});\n\t}\n\n\t_handleConsumer(consumer: Consumer): void\n\t{\n\t\tconsumer.on('@close', () =>\n\t\t{\n\t\t\tthis._consumers.delete(consumer.id);\n\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tthis._awaitQueue.push(\n\t\t\t\tasync () => this._handler.stopReceiving(consumer.localId),\n\t\t\t\t'consumer @close event')\n\t\t\t\t.catch(() => {});\n\t\t});\n\n\t\tconsumer.on('@getstats', (callback, errback) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn errback(new InvalidStateError('closed'));\n\n\t\t\tthis._handler.getReceiverStats(consumer.localId)\n\t\t\t\t.then(callback)\n\t\t\t\t.catch(errback);\n\t\t});\n\t}\n\n\t_handleDataProducer(dataProducer: DataProducer): void\n\t{\n\t\tdataProducer.on('@close', () =>\n\t\t{\n\t\t\tthis._dataProducers.delete(dataProducer.id);\n\t\t});\n\t}\n\n\t_handleDataConsumer(dataConsumer: DataConsumer): void\n\t{\n\t\tdataConsumer.on('@close', () =>\n\t\t{\n\t\t\tthis._dataConsumers.delete(dataConsumer.id);\n\t\t});\n\t}\n}\n"]}