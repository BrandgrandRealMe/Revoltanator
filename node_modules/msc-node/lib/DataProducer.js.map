{"version":3,"file":"DataProducer.js","sourceRoot":"","sources":["../src/DataProducer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from './Logger';\nimport { EnhancedEventEmitter } from './EnhancedEventEmitter';\nimport { InvalidStateError } from './errors';\nimport { SctpStreamParameters } from './SctpParameters';\n\nexport type DataProducerOptions =\n{\n\tordered?: boolean;\n\tmaxPacketLifeTime?: number;\n\tmaxRetransmits?: number;\n\tpriority?: \"high\" | \"low\" | \"medium\" | \"very-low\";\n\tlabel?: string;\n\tprotocol?: string;\n\tappData?: any;\n}\n\nconst logger = new Logger('DataProducer');\n\nexport class DataProducer extends EnhancedEventEmitter\n{\n\t// Id.\n\tprivate readonly _id: string;\n\t// The underlying RTCDataChannel instance.\n\tprivate readonly _dataChannel: RTCDataChannel;\n\t// Closed flag.\n\tprivate _closed = false;\n\t// SCTP stream parameters.\n\tprivate readonly _sctpStreamParameters: SctpStreamParameters;\n\t// App custom data.\n\tprivate readonly _appData: any;\n\t// Observer instance.\n\tprotected readonly _observer = new EnhancedEventEmitter();\n\n\t/**\n\t * @emits transportclose\n\t * @emits open\n\t * @emits error - (error: Error)\n\t * @emits close\n\t * @emits bufferedamountlow\n\t * @emits @close\n\t */\n\tconstructor(\n\t\t{\n\t\t\tid,\n\t\t\tdataChannel,\n\t\t\tsctpStreamParameters,\n\t\t\tappData\n\t\t}:\n\t\t{\n\t\t\tid: string;\n\t\t\tdataChannel: RTCDataChannel;\n\t\t\tsctpStreamParameters: SctpStreamParameters;\n\t\t\tappData: any;\n\t\t}\n\t)\n\t{\n\t\tsuper();\n\n\t\tlogger.debug('constructor()');\n\n\t\tthis._id = id;\n\t\tthis._dataChannel = dataChannel;\n\t\tthis._sctpStreamParameters = sctpStreamParameters;\n\t\tthis._appData = appData;\n\n\t\tthis._handleDataChannel();\n\t}\n\n\t/**\n\t * DataProducer id.\n\t */\n\tget id(): string\n\t{\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Whether the DataProducer is closed.\n\t */\n\tget closed(): boolean\n\t{\n\t\treturn this._closed;\n\t}\n\n\t/**\n\t * SCTP stream parameters.\n\t */\n\tget sctpStreamParameters(): SctpStreamParameters\n\t{\n\t\treturn this._sctpStreamParameters;\n\t}\n\n\t/**\n\t * DataChannel readyState.\n\t */\n\tget readyState(): RTCDataChannelState\n\t{\n\t\treturn this._dataChannel.readyState;\n\t}\n\n\t/**\n\t * DataChannel label.\n\t */\n\tget label(): string\n\t{\n\t\treturn this._dataChannel.label;\n\t}\n\n\t/**\n\t * DataChannel protocol.\n\t */\n\tget protocol(): string\n\t{\n\t\treturn this._dataChannel.protocol;\n\t}\n\n\t/**\n\t * DataChannel bufferedAmount.\n\t */\n\tget bufferedAmount(): number\n\t{\n\t\treturn this._dataChannel.bufferedAmount;\n\t}\n\n\t/**\n\t * DataChannel bufferedAmountLowThreshold.\n\t */\n\tget bufferedAmountLowThreshold(): number\n\t{\n\t\treturn this._dataChannel.bufferedAmountLowThreshold;\n\t}\n\n\t/**\n\t * Set DataChannel bufferedAmountLowThreshold.\n\t */\n\tset bufferedAmountLowThreshold(bufferedAmountLowThreshold: number)\n\t{\n\t\tthis._dataChannel.bufferedAmountLowThreshold = bufferedAmountLowThreshold;\n\t}\n\n\t/**\n\t * App custom data.\n\t */\n\tget appData(): any\n\t{\n\t\treturn this._appData;\n\t}\n\n\t/**\n\t * Invalid setter.\n\t */\n\tset appData(appData: any) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new Error('cannot override appData object');\n\t}\n\n\t/**\n\t * Observer.\n\t *\n\t * @emits close\n\t */\n\tget observer(): EnhancedEventEmitter\n\t{\n\t\treturn this._observer;\n\t}\n\n\t/**\n\t * Closes the DataProducer.\n\t */\n\tclose(): void\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\tthis._closed = true;\n\n\t\tthis._dataChannel.close();\n\n\t\tthis.emit('@close');\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('close');\n\t}\n\n\t/**\n\t * Transport was closed.\n\t */\n\ttransportClosed(): void\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('transportClosed()');\n\n\t\tthis._closed = true;\n\n\t\tthis._dataChannel.close();\n\n\t\tthis.safeEmit('transportclose');\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('close');\n\t}\n\n\t/**\n\t * Send a message.\n\t *\n\t * @param {String|Blob|ArrayBuffer|ArrayBufferView} data.\n\t */\n\tsend(data: any): void\n\t{\n\t\tlogger.debug('send()');\n\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\n\t\tthis._dataChannel.send(data);\n\t}\n\n\tprivate _handleDataChannel(): void\n\t{\n\t\tthis._dataChannel.addEventListener('open', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.debug('DataChannel \"open\" event');\n\n\t\t\tthis.safeEmit('open');\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('error', (event: any) =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlet { error } = event;\n\n\t\t\tif (!error)\n\t\t\t\terror = new Error('unknown DataChannel error');\n\n\t\t\tif (error.errorDetail === 'sctp-failure')\n\t\t\t{\n\t\t\t\tlogger.error(\n\t\t\t\t\t'DataChannel SCTP error [sctpCauseCode:%s]: %s',\n\t\t\t\t\terror.sctpCauseCode, error.message);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlogger.error('DataChannel \"error\" event: %o', error);\n\t\t\t}\n\n\t\t\tthis.safeEmit('error', error);\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('close', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.warn('DataChannel \"close\" event');\n\n\t\t\tthis._closed = true;\n\n\t\t\tthis.emit('@close');\n\t\t\tthis.safeEmit('close');\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('message', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tlogger.warn(\n\t\t\t\t'DataChannel \"message\" event in a DataProducer, message discarded');\n\t\t});\n\n\t\tthis._dataChannel.addEventListener('bufferedamountlow', () =>\n\t\t{\n\t\t\tif (this._closed)\n\t\t\t\treturn;\n\n\t\t\tthis.safeEmit('bufferedamountlow');\n\t\t});\n\t}\n}\n"]}