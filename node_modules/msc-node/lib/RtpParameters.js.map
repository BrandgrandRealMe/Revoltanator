{"version":3,"file":"RtpParameters.js","sourceRoot":"","sources":["../src/RtpParameters.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/**\n * The RTP capabilities define what mediasoup or an endpoint can receive at\n * media level.\n */\n\nexport type RtpCapabilities =\n{\n\t/**\n\t * Supported media and RTX codecs.\n\t */\n\tcodecs?: RtpCodecCapability[];\n\t/**\n\t * Supported RTP header extensions.\n\t */\n\theaderExtensions?: RtpHeaderExtension[];\n\t/**\n\t * Supported FEC mechanisms.\n\t */\n\tfecMechanisms?: string[];\n}\n\n/**\n * Media kind ('audio' or 'video').\n */\nexport type MediaKind = 'audio' | 'video';\n\n/**\n * Provides information on the capabilities of a codec within the RTP\n * capabilities. The list of media codecs supported by mediasoup and their\n * settings is defined in the supportedRtpCapabilities.ts file.\n *\n * Exactly one RtpCodecCapability will be present for each supported combination\n * of parameters that requires a distinct value of preferredPayloadType. For\n * example:\n *\n * - Multiple H264 codecs, each with their own distinct 'packetization-mode' and\n *   'profile-level-id' values.\n * - Multiple VP9 codecs, each with their own distinct 'profile-id' value.\n *\n * RtpCodecCapability entries in the mediaCodecs array of RouterOptions do not\n * require preferredPayloadType field (if unset, mediasoup will choose a random\n * one). If given, make sure it's in the 96-127 range.\n */\nexport type RtpCodecCapability =\n{\n\t/**\n\t * Media kind.\n\t */\n\tkind: MediaKind;\n\t/**\n\t * The codec MIME media type/subtype (e.g. 'audio/opus', 'video/VP8').\n\t */\n\tmimeType: string;\n\t/**\n\t * The preferred RTP payload type.\n\t */\n\tpreferredPayloadType?: number;\n\t/**\n\t * Codec clock rate expressed in Hertz.\n\t */\n\tclockRate: number;\n\t/**\n\t * The number of channels supported (e.g. two for stereo). Just for audio.\n\t * Default 1.\n\t */\n\tchannels?: number;\n\t/**\n\t * Codec specific parameters. Some parameters (such as 'packetization-mode'\n\t * and 'profile-level-id' in H264 or 'profile-id' in VP9) are critical for\n\t * codec matching.\n\t */\n\tparameters?: any;\n\t/**\n\t * Transport layer and codec-specific feedback messages for this codec.\n\t */\n\trtcpFeedback?: RtcpFeedback[];\n}\n\n/**\n * Direction of RTP header extension.\n */\nexport type RtpHeaderExtensionDirection = 'sendrecv' | 'sendonly' | 'recvonly' | 'inactive';\n\n/**\n * Provides information relating to supported header extensions. The list of\n * RTP header extensions supported by mediasoup is defined in the\n * supportedRtpCapabilities.ts file.\n *\n * mediasoup does not currently support encrypted RTP header extensions. The\n * direction field is just present in mediasoup RTP capabilities (retrieved via\n * router.rtpCapabilities or mediasoup.getSupportedRtpCapabilities()). It's\n * ignored if present in endpoints' RTP capabilities.\n */\nexport type RtpHeaderExtension =\n{\n\t/**\n\t * Media kind. If empty string, it's valid for all kinds.\n\t * Default any media kind.\n\t */\n\tkind?: MediaKind | '';\n\t/*\n\t * The URI of the RTP header extension, as defined in RFC 5285.\n\t */\n\turi: string;\n\t/**\n\t * The preferred numeric identifier that goes in the RTP packet. Must be\n\t * unique.\n\t */\n\tpreferredId: number;\n\t/**\n\t * If true, it is preferred that the value in the header be encrypted as per\n\t * RFC 6904. Default false.\n\t */\n\tpreferredEncrypt?: boolean;\n\t/**\n\t * If 'sendrecv', mediasoup supports sending and receiving this RTP extension.\n\t * 'sendonly' means that mediasoup can send (but not receive) it. 'recvonly'\n\t * means that mediasoup can receive (but not send) it.\n\t */\n\tdirection?: RtpHeaderExtensionDirection;\n}\n\n/**\n * The RTP send parameters describe a media stream received by mediasoup from\n * an endpoint through its corresponding mediasoup Producer. These parameters\n * may include a mid value that the mediasoup transport will use to match\n * received RTP packets based on their MID RTP extension value.\n *\n * mediasoup allows RTP send parameters with a single encoding and with multiple\n * encodings (simulcast). In the latter case, each entry in the encodings array\n * must include a ssrc field or a rid field (the RID RTP extension value). Check\n * the Simulcast and SVC sections for more information.\n *\n * The RTP receive parameters describe a media stream as sent by mediasoup to\n * an endpoint through its corresponding mediasoup Consumer. The mid value is\n * unset (mediasoup does not include the MID RTP extension into RTP packets\n * being sent to endpoints).\n *\n * There is a single entry in the encodings array (even if the corresponding\n * producer uses simulcast). The consumer sends a single and continuous RTP\n * stream to the endpoint and spatial/temporal layer selection is possible via\n * consumer.setPreferredLayers().\n *\n * As an exception, previous bullet is not true when consuming a stream over a\n * PipeTransport, in which all RTP streams from the associated producer are\n * forwarded verbatim through the consumer.\n *\n * The RTP receive parameters will always have their ssrc values randomly\n * generated for all of its  encodings (and optional rtx: { ssrc: XXXX } if the\n * endpoint supports RTX), regardless of the original RTP send parameters in\n * the associated producer. This applies even if the producer's encodings have\n * rid set.\n */\nexport type RtpParameters =\n{\n\t/**\n\t * The MID RTP extension value as defined in the BUNDLE specification.\n\t */\n\tmid?: string;\n\t/**\n\t * Media and RTX codecs in use.\n\t */\n\tcodecs: RtpCodecParameters[];\n\t/**\n\t * RTP header extensions in use.\n\t */\n\theaderExtensions?: RtpHeaderExtensionParameters[];\n\t/**\n\t * Transmitted RTP streams and their settings.\n\t */\n\tencodings?: RtpEncodingParameters[];\n\t/**\n\t * Parameters used for RTCP.\n\t */\n\trtcp?: RtcpParameters;\n}\n\n/**\n * Provides information on codec settings within the RTP parameters. The list\n * of media codecs supported by mediasoup and their settings is defined in the\n * supportedRtpCapabilities.ts file.\n */\nexport type RtpCodecParameters =\n{\n\t/**\n\t * The codec MIME media type/subtype (e.g. 'audio/opus', 'video/VP8').\n\t */\n\tmimeType: string;\n\t/**\n\t * The value that goes in the RTP Payload Type Field. Must be unique.\n\t */\n\tpayloadType: number;\n\t/**\n\t * Codec clock rate expressed in Hertz.\n\t */\n\tclockRate: number;\n\t/**\n\t * The number of channels supported (e.g. two for stereo). Just for audio.\n\t * Default 1.\n\t */\n\tchannels?: number;\n\t/**\n\t * Codec-specific parameters available for signaling. Some parameters (such\n\t * as 'packetization-mode' and 'profile-level-id' in H264 or 'profile-id' in\n\t * VP9) are critical for codec matching.\n\t */\n\tparameters?: any;\n\t/**\n\t * Transport layer and codec-specific feedback messages for this codec.\n\t */\n\trtcpFeedback?: RtcpFeedback[];\n}\n\n/**\n * Provides information on RTCP feedback messages for a specific codec. Those\n * messages can be transport layer feedback messages or codec-specific feedback\n * messages. The list of RTCP feedbacks supported by mediasoup is defined in the\n * supportedRtpCapabilities.ts file.\n */\nexport type RtcpFeedback =\n{\n\t/**\n\t * RTCP feedback type.\n\t */\n\ttype: string;\n\t/**\n\t * RTCP feedback parameter.\n\t */\n\tparameter?: string;\n}\n\n/**\n * Provides information relating to an encoding, which represents a media RTP\n * stream and its associated RTX stream (if any).\n */\nexport type RtpEncodingParameters =\n{\n\t/**\n\t * The media SSRC.\n\t */\n\tssrc?: number;\n\t/**\n\t * The RID RTP extension value. Must be unique.\n\t */\n\trid?: string;\n\t/**\n\t * Codec payload type this encoding affects. If unset, first media codec is\n\t * chosen.\n\t */\n\tcodecPayloadType?: number;\n\t/**\n\t * RTX stream information. It must contain a numeric ssrc field indicating\n\t * the RTX SSRC.\n\t */\n\trtx?: { ssrc: number };\n\t/**\n\t * It indicates whether discontinuous RTP transmission will be used. Useful\n\t * for audio (if the codec supports it) and for video screen sharing (when\n\t * static content is being transmitted, this option disables the RTP\n\t * inactivity checks in mediasoup). Default false.\n\t */\n\tdtx?: boolean;\n\t/**\n\t * Number of spatial and temporal layers in the RTP stream (e.g. 'L1T3').\n\t * See webrtc-svc.\n\t */\n\tscalabilityMode?: string;\n\t/**\n\t * Others.\n\t */\n\tscaleResolutionDownBy?: number;\n\tmaxBitrate?: number;\n\tmaxFramerate?: number;\n\tadaptivePtime?: boolean;\n\tpriority?: 'very-low' | 'low' | 'medium' | 'high';\n\tnetworkPriority?: 'very-low' | 'low' | 'medium' | 'high';\n}\n\n/**\n * Defines a RTP header extension within the RTP parameters. The list of RTP\n * header extensions supported by mediasoup is defined in the\n * supportedRtpCapabilities.ts file.\n *\n * mediasoup does not currently support encrypted RTP header extensions and no\n * parameters are currently considered.\n */\nexport type RtpHeaderExtensionParameters =\n{\n\t/**\n\t * The URI of the RTP header extension, as defined in RFC 5285.\n\t */\n\turi: string;\n\t/**\n\t * The numeric identifier that goes in the RTP packet. Must be unique.\n\t */\n\tid: number;\n\t/**\n\t * If true, the value in the header is encrypted as per RFC 6904. Default false.\n\t */\n\tencrypt?: boolean;\n\t/**\n\t * Configuration parameters for the header extension.\n\t */\n\tparameters?: any;\n}\n\n/**\n * Provides information on RTCP settings within the RTP parameters.\n *\n * If no cname is given in a producer's RTP parameters, the mediasoup transport\n * will choose a random one that will be used into RTCP SDES messages sent to\n * all its associated consumers.\n *\n * mediasoup assumes reducedSize to always be true.\n */\nexport type RtcpParameters =\n{\n\t/**\n\t * The Canonical Name (CNAME) used by RTCP (e.g. in SDES messages).\n\t */\n\tcname?: string;\n\t/**\n\t * Whether reduced size RTCP RFC 5506 is configured (if true) or compound RTCP\n\t * as specified in RFC 3550 (if false). Default true.\n\t */\n\treducedSize?: boolean;\n\t/**\n\t * Whether RTCP-mux is used. Default true.\n\t */\n\tmux?: boolean;\n}\n"]}