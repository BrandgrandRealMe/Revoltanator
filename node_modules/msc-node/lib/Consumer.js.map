{"version":3,"file":"Consumer.js","sourceRoot":"","sources":["../src/Consumer.ts"],"names":[],"mappings":";;;AAAA,qCAAkC;AAClC,iEAA8D;AAC9D,qCAA6C;AAa7C,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,UAAU,CAAC,CAAC;AAEtC,MAAa,QAAS,SAAQ,2CAAoB;IAuBjD;;;;;OAKG;IACH,YACC,EACC,EAAE,EACF,OAAO,EACP,UAAU,EACV,WAAW,EACX,KAAK,EACL,aAAa,EACb,OAAO,EAUP;QAGD,KAAK,EAAE,CAAC;QA1CT,eAAe;QACP,YAAO,GAAG,KAAK,CAAC;QAWxB,qBAAqB;QACF,cAAS,GAAG,IAAI,2CAAoB,EAAE,CAAC;QA+BzD,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAE9B,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnD,IAAI,CAAC,YAAY,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,IAAI,EAAE;QAEL,OAAO,IAAI,CAAC,GAAG,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QAEV,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,IAAI,UAAU;QAEb,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QAET,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,IAAI,IAAI;QAEP,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,IAAI,WAAW;QAEd,OAAO,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,IAAI,KAAK;QAER,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,IAAI,aAAa;QAEhB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QAET,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QAEV,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,IAAI,OAAO,CAAC,OAAO;QAElB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACnD,CAAC;IAED;;;;;;;OAOG;IACH,IAAI,QAAQ;QAEX,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,KAAK;QAEJ,IAAI,IAAI,CAAC,OAAO;YACf,OAAO;QAER,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAExB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEpB,uBAAuB;QACvB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,eAAe;QAEd,IAAI,IAAI,CAAC,OAAO;YACf,OAAO;QAER,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAElC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAEpB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;QAEhC,uBAAuB;QACvB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ;QAEb,IAAI,IAAI,CAAC,OAAO;YACf,MAAM,IAAI,0BAAiB,CAAC,QAAQ,CAAC,CAAC;QAEvC,OAAO,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IACH,KAAK;QAEJ,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAExB,IAAI,IAAI,CAAC,OAAO,EAChB;YACC,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAE1C,OAAO;SACP;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;QAE5B,uBAAuB;QACvB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,MAAM;QAEL,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAEzB,IAAI,IAAI,CAAC,OAAO,EAChB;YACC,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAE3C,OAAO;SACP;QAED,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;QAE3B,uBAAuB;QACvB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAEO,aAAa;QAEpB,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;QAEpC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAE5B,uBAAuB;QACvB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACvC,CAAC;IAEO,YAAY;QAEnB,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3D,CAAC;IAEO,aAAa;QAEpB,IACA;YACC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC7D,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;SACnB;QACD,OAAO,KAAK,EACZ,GAAE;IACH,CAAC;CACD;AA9RD,4BA8RC","sourcesContent":["import { Logger } from './Logger';\nimport { EnhancedEventEmitter } from './EnhancedEventEmitter';\nimport { InvalidStateError } from './errors';\nimport { RtpParameters } from './RtpParameters';\nimport { MediaStreamTrack } from 'werift';\n\nexport type ConsumerOptions =\n{\n\tid?: string;\n\tproducerId?: string;\n\tkind?: 'audio' | 'video';\n\trtpParameters: RtpParameters;\n\tappData?: any;\n}\n\nconst logger = new Logger('Consumer');\n\nexport class Consumer extends EnhancedEventEmitter\n{\n\t// Id.\n\tprivate readonly _id: string;\n\t// Local id.\n\tprivate readonly _localId: string;\n\t// Associated Producer id.\n\tprivate readonly _producerId: string;\n\t// Closed flag.\n\tprivate _closed = false;\n\t// Associated RTCRtpReceiver.\n\tprivate readonly _rtpReceiver?: RTCRtpReceiver;\n\t// Remote track.\n\tprivate readonly _track: MediaStreamTrack;\n\t// RTP parameters.\n\tprivate readonly _rtpParameters: RtpParameters;\n\t// Paused flag.\n\tprivate _paused: boolean;\n\t// App custom data.\n\tprivate readonly _appData: any;\n\t// Observer instance.\n\tprotected readonly _observer = new EnhancedEventEmitter();\n\n\t/**\n\t * @emits transportclose\n\t * @emits trackended\n\t * @emits @getstats\n\t * @emits @close\n\t */\n\tconstructor(\n\t\t{\n\t\t\tid,\n\t\t\tlocalId,\n\t\t\tproducerId,\n\t\t\trtpReceiver,\n\t\t\ttrack,\n\t\t\trtpParameters,\n\t\t\tappData\n\t\t}:\n\t\t{\n\t\t\tid: string;\n\t\t\tlocalId: string;\n\t\t\tproducerId: string;\n\t\t\trtpReceiver?: RTCRtpReceiver;\n\t\t\ttrack: MediaStreamTrack;\n\t\t\trtpParameters: RtpParameters;\n\t\t\tappData: any;\n\t\t}\n\t)\n\t{\n\t\tsuper();\n\n\t\tlogger.debug('constructor()');\n\n\t\tthis._id = id;\n\t\tthis._localId = localId;\n\t\tthis._producerId = producerId;\n\t\tthis._rtpReceiver = rtpReceiver;\n\t\tthis._track = track;\n\t\tthis._rtpParameters = rtpParameters;\n\t\tthis._paused = !track.enabled;\n\t\tthis._appData = appData;\n\t\tthis._onTrackEnded = this._onTrackEnded.bind(this);\n\n\t\tthis._handleTrack();\n\t}\n\n\t/**\n\t * Consumer id.\n\t */\n\tget id(): string\n\t{\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Local id.\n\t */\n\tget localId(): string\n\t{\n\t\treturn this._localId;\n\t}\n\n\t/**\n\t * Associated Producer id.\n\t */\n\tget producerId(): string\n\t{\n\t\treturn this._producerId;\n\t}\n\n\t/**\n\t * Whether the Consumer is closed.\n\t */\n\tget closed(): boolean\n\t{\n\t\treturn this._closed;\n\t}\n\n\t/**\n\t * Media kind.\n\t */\n\tget kind(): string\n\t{\n\t\treturn this._track.kind;\n\t}\n\n\t/**\n\t * Associated RTCRtpReceiver.\n\t */\n\tget rtpReceiver(): RTCRtpReceiver | undefined\n\t{\n\t\treturn this._rtpReceiver;\n\t}\n\n\t/**\n\t * The associated track.\n\t */\n\tget track(): MediaStreamTrack\n\t{\n\t\treturn this._track;\n\t}\n\n\t/**\n\t * RTP parameters.\n\t */\n\tget rtpParameters(): RtpParameters\n\t{\n\t\treturn this._rtpParameters;\n\t}\n\n\t/**\n\t * Whether the Consumer is paused.\n\t */\n\tget paused(): boolean\n\t{\n\t\treturn this._paused;\n\t}\n\n\t/**\n\t * App custom data.\n\t */\n\tget appData(): any\n\t{\n\t\treturn this._appData;\n\t}\n\n\t/**\n\t * Invalid setter.\n\t */\n\tset appData(appData) // eslint-disable-line no-unused-vars\n\t{\n\t\tthrow new Error('cannot override appData object');\n\t}\n\n\t/**\n\t * Observer.\n\t *\n\t * @emits close\n\t * @emits pause\n\t * @emits resume\n\t * @emits trackended\n\t */\n\tget observer(): EnhancedEventEmitter\n\t{\n\t\treturn this._observer;\n\t}\n\n\t/**\n\t * Closes the Consumer.\n\t */\n\tclose(): void\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('close()');\n\n\t\tthis._closed = true;\n\n\t\tthis._destroyTrack();\n\n\t\tthis.emit('@close');\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('close');\n\t}\n\n\t/**\n\t * Transport was closed.\n\t */\n\ttransportClosed(): void\n\t{\n\t\tif (this._closed)\n\t\t\treturn;\n\n\t\tlogger.debug('transportClosed()');\n\n\t\tthis._closed = true;\n\n\t\tthis._destroyTrack();\n\n\t\tthis.safeEmit('transportclose');\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('close');\n\t}\n\n\t/**\n\t * Get associated RTCRtpReceiver stats.\n\t */\n\tasync getStats(): Promise<RTCStatsReport>\n\t{\n\t\tif (this._closed)\n\t\t\tthrow new InvalidStateError('closed');\n\n\t\treturn this.safeEmitAsPromise('@getstats');\n\t}\n\n\t/**\n\t * Pauses receiving media.\n\t */\n\tpause(): void\n\t{\n\t\tlogger.debug('pause()');\n\n\t\tif (this._closed)\n\t\t{\n\t\t\tlogger.error('pause() | Consumer closed');\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._paused = true;\n\t\tthis._track.enabled = false;\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('pause');\n\t}\n\n\t/**\n\t * Resumes receiving media.\n\t */\n\tresume(): void\n\t{\n\t\tlogger.debug('resume()');\n\n\t\tif (this._closed)\n\t\t{\n\t\t\tlogger.error('resume() | Consumer closed');\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis._paused = false;\n\t\tthis._track.enabled = true;\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('resume');\n\t}\n\n\tprivate _onTrackEnded(): void\n\t{\n\t\tlogger.debug('track \"ended\" event');\n\n\t\tthis.safeEmit('trackended');\n\n\t\t// Emit observer event.\n\t\tthis._observer.safeEmit('trackended');\n\t}\n\n\tprivate _handleTrack(): void\n\t{\n\t\tthis._track.addEventListener('ended', this._onTrackEnded);\n\t}\n\n\tprivate _destroyTrack(): void\n\t{\n\t\ttry\n\t\t{\n\t\t\tthis._track.removeEventListener('ended', this._onTrackEnded);\n\t\t\tthis._track.stop();\n\t\t}\n\t\tcatch (error)\n\t\t{}\n\t}\n}\n"]}