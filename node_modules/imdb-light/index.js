const _ = require('lodash');
const axios = require('axios');

const BASE_URL = 'https://www.imdb.com';

const MEDIA_URL = BASE_URL + '/title/';
const TRAILER_URL = BASE_URL + '/video/imdb/';
const BOX_OFFICE_URL = BASE_URL + '/chart/boxoffice';
const TOP_250_MOVIE_URL = BASE_URL + '/chart/top/';
const TOP_250_TV_URL = BASE_URL + '/chart/toptv/';

const IMDb = {};

IMDb.fetch = function (id, callback) {

        // validate imdb id
        if (!id.match(/tt\d+/i)) {
                return callback({ Status: false })
        }

        let details = [];

        axios({
                url: MEDIA_URL + id
        })
                .then(function (req) {

                        try {
                                let page = req.data;

                                const regex = /json\"\>(.*?)<\/script>/mg;
                                let m;
                                let array = [];
                                while ((m = regex.exec(page)) !== null) {
                                        if (m.index === regex.lastIndex) {
                                                regex.lastIndex++;
                                        }
                                        m.forEach((match, groupIndex) => {
                                                array.push(match)
                                        });
                                }

                                const regex2 = /country_of_origin\=(.*?)&amp;ref_=tt_dt_cn\">(.*?)<\/a>/mg;
                                let n;
                                let c
                                while ((n = regex2.exec(page)) !== null) {
                                        if (n.index === regex2.lastIndex) {
                                                regex2.lastIndex++;
                                        }
                                        n.forEach((match, groupIndex) => {
                                                if (groupIndex === 2)
                                                        c = match
                                        });
                                }

                                if (c)
                                        details.Country = _.toString(c);

                                let parse = JSON.parse(array[1])

                                let
                                        actors = [],
                                        directors = [],
                                        writers = [],
                                        genres = [];

                                if (!_.isUndefined(parse.actor)) {
                                        parse.actor.forEach((a, i) => {
                                                if (!_.isUndefined(a.name)) {
                                                        actors.push(' ' + a.name)
                                                }
                                        })
                                }

                                if (!_.isUndefined(parse.director)) {
                                        parse.director.forEach((a, i) => {
                                                if (!_.isUndefined(a.name)) {
                                                        directors.push(a.name)
                                                }
                                        })
                                }

                                if (!_.isUndefined(parse.creator)) {
                                        parse.creator.forEach((a, i) => {
                                                if (!_.isUndefined(a.name)) {
                                                        writers.push(a.name)
                                                }
                                        })
                                }

                                if (!_.isUndefined(parse.genre)) {
                                        parse.genre.forEach((a, i) => {
                                                if (!_.isUndefined(a)) {
                                                        genres.push(' ' + a)
                                                }
                                        })
                                }

                                if (directors.length > 0)
                                        details.Director = _.toString(directors)

                                if (actors.length > 0)
                                        details.Actors = _.trim(_.toString(actors))

                                if (writers.length > 0)
                                        details.Writers = _.toString(writers)

                                if (genres.length > 0)
                                        details.Genres = _.trim(_.toString(genres))

                                if (parse.name)
                                        details.Title = parse.name

                                if (parse.description)
                                        details.Plot = parse.description

                                if (parse.datePublished) {
                                        details.Year = _.split(parse.datePublished, '-')[0]
                                        details.Release = parse.datePublished
                                }

                                if (parse.aggregateRating.ratingValue)
                                        details.Rating = parseFloat(parse.aggregateRating.ratingValue).toFixed(1) + '/10';

                                if (parse.aggregateRating.ratingCount)
                                        details.Votes = parseFloat(parse.aggregateRating.ratingCount);

                                if (parse.trailer.thumbnailUrl)
                                        details.Backdrop = parse.trailer.thumbnailUrl

                                if (parse.image)
                                        details.Poster = parse.image

                                if (parse.trailer.embedUrl)
                                        details.Trailer_id = _.replace(parse.trailer.embedUrl, "/video/imdb/", "");

                                if (parse['@type'])
                                        details.Type = parse['@type']

                                details.Status = true;

                        } catch (e) {

                                details.Status = false;
                                details.Error = e.message;
                        }

                        callback(details)
                })
}

IMDb.trailer = function (id, callback) {

        // validate imdb id
        if (!id.match(/tt\d+/i)) {
                return callback({ Status: false })
        }

        axios({
                url: MEDIA_URL + id
        })
                .then(function (req) {
                        try {
                                let page = req.data;
                                const regex = /json\"\>(.*?)<\/script>/mg;
                                let m;
                                let array = [];
                                while ((m = regex.exec(page)) !== null) {
                                        if (m.index === regex.lastIndex) {
                                                regex.lastIndex++;
                                        }
                                        m.forEach((match, groupIndex) => {
                                                array.push(match)
                                        });
                                }

                                let parse = JSON.parse(array[1])

                                if (parse.trailer.embedUrl) {
                                        let trailer_id = _.replace(parse.trailer.embedUrl, "/video/imdb/", "");
                                        fetchTrailer(trailer_id, (url) => {
                                                callback(url)
                                        })
                                }
                        } catch (e) {
                                callback(null)
                        }
                })
}

IMDb.boxoffice = function (callback) {
        let details = [],
                m;
        axios({
                url: BOX_OFFICE_URL
        })
                .then(function (req) {
                        try {
                                let page = req.data;

                                //Titles
                                const r1 = /height="67" alt=\"(.*?)\"/gms
                                let titles = [];
                                while ((m = r1.exec(page)) !== null) {
                                        if (m.index === r1.lastIndex) {
                                                r1.lastIndex++;
                                        }
                                        m.forEach((match, groupIndex) => {
                                                if (groupIndex === 1)
                                                        titles.push(match)
                                        });
                                }

                                //Ids
                                const r2 = /titleColumn">(.*?)<a href="\/title\/(.*?)\?/gms
                                let ids = [];
                                while ((m = r2.exec(page)) !== null) {
                                        if (m.index === r2.lastIndex) {
                                                r2.lastIndex++;
                                        }
                                        m.forEach((match, groupIndex) => {
                                                if (groupIndex === 2)
                                                        ids.push(match)
                                        });
                                }

                                for (var i = 0; i < titles.length; i++) {
                                        details.push({
                                                title: titles[i],
                                                id: ids[i]
                                        })
                                }

                                details.Status = true;
                        } catch (e) {
                                details.Status = false;
                        }
                        callback(details)
                })
}

IMDb.topMovies = function (callback) {
        let details = [],
                m;
        axios({
                url: TOP_250_MOVIE_URL
        })
                .then(function (req) {
                        try {
                                let page = req.data;

                                //Titles
                                const r1 = /height="67" alt=\"(.*?)\"/gms
                                let titles = [];
                                while ((m = r1.exec(page)) !== null) {
                                        if (m.index === r1.lastIndex) {
                                                r1.lastIndex++;
                                        }
                                        m.forEach((match, groupIndex) => {
                                                if (groupIndex === 1)
                                                        titles.push(match)
                                        });
                                }

                                //Ids
                                const r2 = /titleColumn">(.*?)<a href="\/title\/(.*?)\?/gms
                                let ids = [];
                                while ((m = r2.exec(page)) !== null) {
                                        if (m.index === r2.lastIndex) {
                                                r2.lastIndex++;
                                        }
                                        m.forEach((match, groupIndex) => {
                                                if (groupIndex === 2)
                                                        ids.push(_.split(match, '/')[0])
                                        });
                                }

                                for (var i = 0; i < titles.length; i++) {
                                        details.push({
                                                rank: i + 1,
                                                title: titles[i],
                                                id: ids[i]
                                        })
                                }

                                details.Status = true;
                        } catch (e) {
                                details.Status = false;
                        }
                        callback(details)
                })
}

IMDb.topSeries = function (callback) {
        let details = [],
                m;
        axios({
                url: TOP_250_TV_URL
        })
                .then(function (req) {
                        try {
                                let page = req.data;

                                //Titles
                                const r1 = /height="67" alt=\"(.*?)\"/gms
                                let titles = [];
                                while ((m = r1.exec(page)) !== null) {
                                        if (m.index === r1.lastIndex) {
                                                r1.lastIndex++;
                                        }
                                        m.forEach((match, groupIndex) => {
                                                if (groupIndex === 1)
                                                        titles.push(match)
                                        });
                                }

                                //Ids
                                const r2 = /titleColumn">(.*?)<a href="\/title\/(.*?)\?/gms
                                let ids = [];
                                while ((m = r2.exec(page)) !== null) {
                                        if (m.index === r2.lastIndex) {
                                                r2.lastIndex++;
                                        }
                                        m.forEach((match, groupIndex) => {
                                                if (groupIndex === 2)
                                                        ids.push(_.split(match, '/')[0])
                                        });
                                }

                                for (var i = 0; i < titles.length; i++) {
                                        details.push({
                                                rank: i + 1,
                                                title: titles[i],
                                                id: ids[i]
                                        })
                                }

                                details.Status = true;
                        } catch (e) {
                                details.Status = false;
                        }
                        callback(details)
                })
}

/** 
        Fetch a trailer mp4 link
 */
function fetchTrailer(id, callback) {
        axios({
                url: TRAILER_URL + id + '/imdb/single?vPage=1'
        })
                .then(function (req) {
                        let page = req.data;
                        const regex = /player-json">(.*?)<\/script>/sg
                        let m;
                        let array = [];
                        while ((m = regex.exec(page)) !== null) {
                                if (m.index === regex.lastIndex) {
                                        regex.lastIndex++;
                                }
                                m.forEach((match, groupIndex) => {
                                        array.push(match)
                                });
                        }
                        if (!_.isUndefined(array[1])) {
                                let parse = JSON.parse(array[1])
                                let list = parse.videoPlayerObject.video.videoInfoList
                                if (!_.isUndefined(list)) {
                                        list.forEach((video, i) => {
                                                if (video.videoMimeType === 'video/mp4') {
                                                        return callback(video.videoUrl)
                                                }
                                        })
                                }
                        }
                        else callback(false)
                })
}

module.exports = IMDb;