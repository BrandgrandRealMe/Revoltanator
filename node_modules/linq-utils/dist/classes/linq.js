class Linq {
    rows = [];
    constructor(rows = []) {
        this.rows = rows;
    }
    Add(item) {
        this.rows.push(item);
    }
    AddRange(item) {
        this.rows.push(...item);
    }
    Remove(item) {
        this.rows = this.rows.filter((row) => row !== item);
    }
    RemoveRange(items) {
        this.rows = this.rows.filter((row) => !items.includes(row));
    }
    Sort(comparer) {
        return new Linq(this.rows.sort(comparer));
    }
    ToMap(keySelector, valueSelector) {
        let map = new Map();
        this.rows.forEach((row) => {
            map.set(keySelector(row), valueSelector(row));
        });
        return map;
    }
    ToArray() {
        return this.rows;
    }
    Any(predicate = (row) => true) {
        return this.rows.some(predicate);
    }
    All(predicate = (row) => true) {
        return this.rows.every(predicate);
    }
    Sum(selector) {
        return this.rows.reduce((sum, row) => sum + selector(row), 0);
    }
    Min(selector) {
        return Math.min(...this.rows.map(selector));
    }
    Max(selector) {
        return Math.max(...this.rows.map(selector));
    }
    Average(selector) {
        return this.Sum(selector) / this.rows.length;
    }
    Distinct() {
        return new Linq([...new Set(this.rows)]);
    }
    DistinctBy(keySelector) {
        return new Linq([...new Map(this.rows.map((row) => [keySelector(row), row])).values()]);
    }
    Select(selector) {
        return new Linq(this.rows.map(selector));
    }
    SelectMany(selector) {
        return new Linq(this.rows.reduce((result, row) => result.concat(selector(row)), []));
    }
    Where(predicate) {
        return new Linq(this.rows.filter(predicate));
    }
    Skip(count) {
        return new Linq(this.rows.slice(count));
    }
    SkipWhile(predicate) {
        let index = this.rows.findIndex((row) => !predicate(row));
        return new Linq(index === -1 ? [] : this.rows.slice(index));
    }
    Take(count) {
        return new Linq(this.rows.slice(0, count));
    }
    TakeWhile(predicate) {
        let index = this.rows.findIndex((row) => !predicate(row));
        return new Linq(index === -1 ? this.rows : this.rows.slice(0, index));
    }
    OrderBy(keySelector) {
        return new Linq(this.rows.slice().sort((a, b) => {
            let keyA = keySelector(a);
            let keyB = keySelector(b);
            return keyA < keyB ? -1 : keyA > keyB ? 1 : 0;
        }));
    }
    OrderByDescending(keySelector) {
        return new Linq(this.rows.slice().sort((a, b) => {
            let keyA = keySelector(a);
            let keyB = keySelector(b);
            return keyA < keyB ? 1 : keyA > keyB ? -1 : 0;
        }));
    }
    Reverse() {
        return new Linq(this.rows.slice().reverse());
    }
    ThenBy(keySelector) {
        return this.OrderBy(keySelector);
    }
    ThenByDescending(keySelector) {
        return this.OrderByDescending(keySelector);
    }
    Union(second) {
        return new Linq([...new Set(this.rows.concat(second.rows))]);
    }
    Intersect(second) {
        return new Linq(this.rows.filter((row) => second.rows.indexOf(row) !== -1));
    }
    Except(second) {
        return new Linq(this.rows.filter((row) => second.rows.indexOf(row) === -1));
    }
    Concat(second) {
        return new Linq(this.rows.concat(second.rows));
    }
    DefaultIfEmpty(defaultValue = null) {
        return new Linq(this.rows.length === 0 ? [defaultValue] : this.rows);
    }
    ElementAt(index) {
        return this.rows[index];
    }
    ElementAtOrDefault(index, defaultValue = null) {
        return this.rows[index] || defaultValue;
    }
    First(predicate = null) {
        return predicate ? this.rows.find(predicate) : this.rows[0];
    }
    FirstOrDefault(predicate = null, defaultValue = null) {
        return predicate ? this.rows.find(predicate) || defaultValue : this.rows[0] || defaultValue;
    }
    Last(predicate = null) {
        return predicate ? this.rows.reverse().find(predicate) : this.rows[this.rows.length - 1];
    }
    LastOrDefault(predicate = null, defaultValue = null) {
        return predicate ? this.rows.reverse().find(predicate) || defaultValue : this.rows[this.rows.length - 1] || defaultValue;
    }
    Single(predicate = null) {
        return predicate ? this.rows.filter(predicate)[0] : this.rows[0];
    }
    SingleOrDefault(predicate = null, defaultValue = null) {
        return predicate ? this.rows.filter(predicate)[0] || defaultValue : this.rows[0] || defaultValue;
    }
    SequenceEqual(second) {
        return this.rows.length === second.rows.length && this.rows.every((row, index) => row === second.rows[index]);
    }
    Contains(value) {
        return this.rows.indexOf(value) !== -1;
    }
    Count(predicate = null) {
        return predicate ? this.rows.filter(predicate).length : this.rows.length;
    }
    Aggregate(func) {
        return this.rows.reduce(func);
    }
    ForEach(action) {
        this.rows.forEach(action);
    }
    Stringify() {
        return JSON.stringify(this.rows);
    }
    toString() {
        return this.Stringify();
    }
}
export default Linq;
//# sourceMappingURL=linq.js.map