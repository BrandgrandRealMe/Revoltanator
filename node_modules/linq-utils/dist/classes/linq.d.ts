declare class Linq<T> {
    rows: T[];
    constructor(rows?: T[]);
    Add(item: T): void;
    AddRange(item: T[]): void;
    Remove(item: T): void;
    RemoveRange(items: T[]): void;
    Sort(comparer: (a: T, b: T) => number): Linq<T>;
    ToMap<TKey, TValue>(keySelector: (row: T) => TKey, valueSelector: (row: T) => TValue): Map<TKey, TValue>;
    ToArray(): T[];
    Any(predicate?: (row: T) => boolean): boolean;
    All(predicate?: (row: T) => boolean): boolean;
    Sum(selector: (row: T) => number): number;
    Min(selector: (row: T) => number): number;
    Max(selector: (row: T) => number): number;
    Average(selector: (row: T) => number): number;
    Distinct(): Linq<T>;
    DistinctBy<TKey>(keySelector: (row: T) => TKey): Linq<T>;
    Select<TResult>(selector: (row: T) => TResult): Linq<TResult>;
    SelectMany<TResult>(selector: (row: T) => TResult[]): Linq<TResult>;
    Where(predicate: (row: T) => boolean): Linq<T>;
    Skip(count: number): Linq<T>;
    SkipWhile(predicate: (row: T) => boolean): Linq<T>;
    Take(count: number): Linq<T>;
    TakeWhile(predicate: (row: T) => boolean): Linq<T>;
    OrderBy<TKey>(keySelector: (row: T) => TKey): Linq<T>;
    OrderByDescending<TKey>(keySelector: (row: T) => TKey): Linq<T>;
    Reverse(): Linq<T>;
    ThenBy<TKey>(keySelector: (row: T) => TKey): Linq<T>;
    ThenByDescending<TKey>(keySelector: (row: T) => TKey): Linq<T>;
    Union(second: Linq<T>): Linq<T>;
    Intersect(second: Linq<T>): Linq<T>;
    Except(second: Linq<T>): Linq<T>;
    Concat(second: Linq<T>): Linq<T>;
    DefaultIfEmpty(defaultValue?: T): Linq<T>;
    ElementAt(index: number): T;
    ElementAtOrDefault(index: number, defaultValue?: T): T;
    First(predicate?: (row: T) => boolean): T;
    FirstOrDefault(predicate?: (row: T) => boolean, defaultValue?: T): T;
    Last(predicate?: (row: T) => boolean): T;
    LastOrDefault(predicate?: (row: T) => boolean, defaultValue?: T): T;
    Single(predicate?: (row: T) => boolean): T;
    SingleOrDefault(predicate?: (row: T) => boolean, defaultValue?: T): T;
    SequenceEqual(second: Linq<T>): boolean;
    Contains(value: T): boolean;
    Count(predicate?: (row: T) => boolean): number;
    Aggregate(func: (accumulator: T, row: T) => T): T;
    ForEach(action: (row: T) => void): void;
    Stringify(): string;
    toString(): string;
}
export default Linq;
